/*
 * SOLIDserver API
 *
 * OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2021 EfficientIP</p><p><em>All specifications and information regarding the products in  this document are subject to change without notice and should not be  construed as a commitment by EfficientIP. EfficientIP assumes no  responsibility or liability for any mistakes or inaccuracies that may appear  in this document. All statements and recommendations in this document are  believed to be accurate but are presented without warranty. Users must take  full responsibility for their application of any product.</em></p><p>Generated (Monday 14th of June 2021 12:30:34 PM)</p>
 *
 * API version: 2.0
 * Contact: support-api@efficientip.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// DnsAclAddInput struct for DnsAclAddInput
type DnsAclAddInput struct {
	// The database identifier (ID) of the DNS server, a unique numeric key value automatically incremented when you add a DNS server. Use the ID to specify the DNS server of your choice.
	ServerId *int32 `json:"server_id,omitempty"`
	// The name of the DNS server.
	ServerName *string `json:"server_name,omitempty"`
	// The name of the DNS ACL, each DNS ACL must have a unique name.
	AclName *string `json:"acl_name,omitempty"`
	// The values of the DNS ACL in order of priority, as follows: &lt;value_1&gt;;&lt;value_2&gt;... .
	AclValue *string `json:"acl_value,omitempty"`
	// The IP address of the DNS server.
	ServerHostaddr *string `json:"server_hostaddr,omitempty"`
	// A way to bypass <b>(accept) </b>any enabled rule that would return warning messages. If the service returns an error message, you cannot bypass the enabled rules.
	Warnings *string `json:"warnings,omitempty"`
}

// NewDnsAclAddInput instantiates a new DnsAclAddInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnsAclAddInput() *DnsAclAddInput {
	this := DnsAclAddInput{}
	return &this
}

// NewDnsAclAddInputWithDefaults instantiates a new DnsAclAddInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsAclAddInputWithDefaults() *DnsAclAddInput {
	this := DnsAclAddInput{}
	return &this
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *DnsAclAddInput) GetServerId() int32 {
	if o == nil || o.ServerId == nil {
		var ret int32
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsAclAddInput) GetServerIdOk() (*int32, bool) {
	if o == nil || o.ServerId == nil {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *DnsAclAddInput) HasServerId() bool {
	if o != nil && o.ServerId != nil {
		return true
	}

	return false
}

// SetServerId gets a reference to the given int32 and assigns it to the ServerId field.
func (o *DnsAclAddInput) SetServerId(v int32) {
	o.ServerId = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *DnsAclAddInput) GetServerName() string {
	if o == nil || o.ServerName == nil {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsAclAddInput) GetServerNameOk() (*string, bool) {
	if o == nil || o.ServerName == nil {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *DnsAclAddInput) HasServerName() bool {
	if o != nil && o.ServerName != nil {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *DnsAclAddInput) SetServerName(v string) {
	o.ServerName = &v
}

// GetAclName returns the AclName field value if set, zero value otherwise.
func (o *DnsAclAddInput) GetAclName() string {
	if o == nil || o.AclName == nil {
		var ret string
		return ret
	}
	return *o.AclName
}

// GetAclNameOk returns a tuple with the AclName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsAclAddInput) GetAclNameOk() (*string, bool) {
	if o == nil || o.AclName == nil {
		return nil, false
	}
	return o.AclName, true
}

// HasAclName returns a boolean if a field has been set.
func (o *DnsAclAddInput) HasAclName() bool {
	if o != nil && o.AclName != nil {
		return true
	}

	return false
}

// SetAclName gets a reference to the given string and assigns it to the AclName field.
func (o *DnsAclAddInput) SetAclName(v string) {
	o.AclName = &v
}

// GetAclValue returns the AclValue field value if set, zero value otherwise.
func (o *DnsAclAddInput) GetAclValue() string {
	if o == nil || o.AclValue == nil {
		var ret string
		return ret
	}
	return *o.AclValue
}

// GetAclValueOk returns a tuple with the AclValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsAclAddInput) GetAclValueOk() (*string, bool) {
	if o == nil || o.AclValue == nil {
		return nil, false
	}
	return o.AclValue, true
}

// HasAclValue returns a boolean if a field has been set.
func (o *DnsAclAddInput) HasAclValue() bool {
	if o != nil && o.AclValue != nil {
		return true
	}

	return false
}

// SetAclValue gets a reference to the given string and assigns it to the AclValue field.
func (o *DnsAclAddInput) SetAclValue(v string) {
	o.AclValue = &v
}

// GetServerHostaddr returns the ServerHostaddr field value if set, zero value otherwise.
func (o *DnsAclAddInput) GetServerHostaddr() string {
	if o == nil || o.ServerHostaddr == nil {
		var ret string
		return ret
	}
	return *o.ServerHostaddr
}

// GetServerHostaddrOk returns a tuple with the ServerHostaddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsAclAddInput) GetServerHostaddrOk() (*string, bool) {
	if o == nil || o.ServerHostaddr == nil {
		return nil, false
	}
	return o.ServerHostaddr, true
}

// HasServerHostaddr returns a boolean if a field has been set.
func (o *DnsAclAddInput) HasServerHostaddr() bool {
	if o != nil && o.ServerHostaddr != nil {
		return true
	}

	return false
}

// SetServerHostaddr gets a reference to the given string and assigns it to the ServerHostaddr field.
func (o *DnsAclAddInput) SetServerHostaddr(v string) {
	o.ServerHostaddr = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *DnsAclAddInput) GetWarnings() string {
	if o == nil || o.Warnings == nil {
		var ret string
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsAclAddInput) GetWarningsOk() (*string, bool) {
	if o == nil || o.Warnings == nil {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *DnsAclAddInput) HasWarnings() bool {
	if o != nil && o.Warnings != nil {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given string and assigns it to the Warnings field.
func (o *DnsAclAddInput) SetWarnings(v string) {
	o.Warnings = &v
}

func (o DnsAclAddInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ServerId != nil {
		toSerialize["server_id"] = o.ServerId
	}
	if o.ServerName != nil {
		toSerialize["server_name"] = o.ServerName
	}
	if o.AclName != nil {
		toSerialize["acl_name"] = o.AclName
	}
	if o.AclValue != nil {
		toSerialize["acl_value"] = o.AclValue
	}
	if o.ServerHostaddr != nil {
		toSerialize["server_hostaddr"] = o.ServerHostaddr
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	return json.Marshal(toSerialize)
}

type NullableDnsAclAddInput struct {
	value *DnsAclAddInput
	isSet bool
}

func (v NullableDnsAclAddInput) Get() *DnsAclAddInput {
	return v.value
}

func (v *NullableDnsAclAddInput) Set(val *DnsAclAddInput) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsAclAddInput) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsAclAddInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsAclAddInput(val *DnsAclAddInput) *NullableDnsAclAddInput {
	return &NullableDnsAclAddInput{value: val, isSet: true}
}

func (v NullableDnsAclAddInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsAclAddInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


