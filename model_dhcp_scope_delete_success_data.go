/*
 * SOLIDserver API
 *
 * OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2021 EfficientIP</p><p><em>All specifications and information regarding the products in  this document are subject to change without notice and should not be  construed as a commitment by EfficientIP. EfficientIP assumes no  responsibility or liability for any mistakes or inaccuracies that may appear  in this document. All statements and recommendations in this document are  believed to be accurate but are presented without warranty. Users must take  full responsibility for their application of any product.</em></p><p>Generated (Monday 14th of June 2021 12:30:34 PM)</p>
 *
 * API version: 2.0
 * Contact: support-api@efficientip.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// DhcpScopeDeleteSuccessData struct for DhcpScopeDeleteSuccessData
type DhcpScopeDeleteSuccessData struct {
	// The database identifier (ID) of the object you deleted.
	ScopeId *string `json:"scope_id,omitempty"`
}

// NewDhcpScopeDeleteSuccessData instantiates a new DhcpScopeDeleteSuccessData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDhcpScopeDeleteSuccessData() *DhcpScopeDeleteSuccessData {
	this := DhcpScopeDeleteSuccessData{}
	return &this
}

// NewDhcpScopeDeleteSuccessDataWithDefaults instantiates a new DhcpScopeDeleteSuccessData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDhcpScopeDeleteSuccessDataWithDefaults() *DhcpScopeDeleteSuccessData {
	this := DhcpScopeDeleteSuccessData{}
	return &this
}

// GetScopeId returns the ScopeId field value if set, zero value otherwise.
func (o *DhcpScopeDeleteSuccessData) GetScopeId() string {
	if o == nil || o.ScopeId == nil {
		var ret string
		return ret
	}
	return *o.ScopeId
}

// GetScopeIdOk returns a tuple with the ScopeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeDeleteSuccessData) GetScopeIdOk() (*string, bool) {
	if o == nil || o.ScopeId == nil {
		return nil, false
	}
	return o.ScopeId, true
}

// HasScopeId returns a boolean if a field has been set.
func (o *DhcpScopeDeleteSuccessData) HasScopeId() bool {
	if o != nil && o.ScopeId != nil {
		return true
	}

	return false
}

// SetScopeId gets a reference to the given string and assigns it to the ScopeId field.
func (o *DhcpScopeDeleteSuccessData) SetScopeId(v string) {
	o.ScopeId = &v
}

func (o DhcpScopeDeleteSuccessData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ScopeId != nil {
		toSerialize["scope_id"] = o.ScopeId
	}
	return json.Marshal(toSerialize)
}

type NullableDhcpScopeDeleteSuccessData struct {
	value *DhcpScopeDeleteSuccessData
	isSet bool
}

func (v NullableDhcpScopeDeleteSuccessData) Get() *DhcpScopeDeleteSuccessData {
	return v.value
}

func (v *NullableDhcpScopeDeleteSuccessData) Set(val *DhcpScopeDeleteSuccessData) {
	v.value = val
	v.isSet = true
}

func (v NullableDhcpScopeDeleteSuccessData) IsSet() bool {
	return v.isSet
}

func (v *NullableDhcpScopeDeleteSuccessData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDhcpScopeDeleteSuccessData(val *DhcpScopeDeleteSuccessData) *NullableDhcpScopeDeleteSuccessData {
	return &NullableDhcpScopeDeleteSuccessData{value: val, isSet: true}
}

func (v NullableDhcpScopeDeleteSuccessData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDhcpScopeDeleteSuccessData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


