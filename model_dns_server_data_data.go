/*
 * SOLIDserver API
 *
 * OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2021 EfficientIP</p><p><em>All specifications and information regarding the products in  this document are subject to change without notice and should not be  construed as a commitment by EfficientIP. EfficientIP assumes no  responsibility or liability for any mistakes or inaccuracies that may appear  in this document. All statements and recommendations in this document are  believed to be accurate but are presented without warranty. Users must take  full responsibility for their application of any product.</em></p><p>Generated (Monday 14th of June 2021 12:30:34 PM)</p>
 *
 * API version: 2.0
 * Contact: support-api@efficientip.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// DnsServerDataData struct for DnsServerDataData
type DnsServerDataData struct {
	// TODO:dns_server_list.output.ad_domain
	AdDomain *string `json:"ad_domain,omitempty"`
	// TODO:dns_server_list.output.ad_user
	AdUser *string `json:"ad_user,omitempty"`
	// The AWS access key identifier (ID) of the DNS server.
	ServerAwsKeyid *string `json:"server_aws_keyid,omitempty"`
	// TODO:dns_server_list.output.az_group
	AzGroup *string `json:"az_group,omitempty"`
	// TODO:dns_server_list.output.az_keyid
	AzKeyid *string `json:"az_keyid,omitempty"`
	// TODO:dns_server_list.output.az_subscriptionid
	AzSubscriptionid *string `json:"az_subscriptionid,omitempty"`
	// TODO:dns_server_list.output.az_tenantid
	AzTenantid *string `json:"az_tenantid,omitempty"`
	// The ACL values associated with the allow-query configuration of the DNS server, as follows: <b>&lt;value1&gt;;&lt;value2&gt;;... </b>. Values may include IP and network addresses, the name of TSIG keys and ACLs, preceded by <b>!</b> if the access is denied.
	ServerAllowQuery *string `json:"server_allow_query,omitempty"`
	// The ACL values associated with the allow-query-cache configuration of the DNS server, as follows: <b>&lt;value1&gt;;&lt;value2&gt;;... </b>. Values may include IP and network addresses, the name of TSIG keys and ACLs, preceded by <b>!</b> if the access is denied.
	ServerAllowQueryCache *string `json:"server_allow_query_cache,omitempty"`
	// The ACL values associated with the allow-recursion configuration of the DNS server, as follows: <b>&lt;value1&gt;;&lt;value2&gt;;... </b>. Values may include IP and network addresses, the name of TSIG keys and ACLs, preceded by <b>!</b> if the access is denied.
	ServerAllowRecursion *string `json:"server_allow_recursion,omitempty"`
	// The ACL values associated with the allow-transfer configuration of the DNS server, as follows: <b>&lt;value1&gt;;&lt;value2&gt;;... </b>. Values may include IP and network addresses, the name of TSIG keys and ACLs, preceded by <b>!</b> if the access is denied.
	ServerAllowTransfer *string `json:"server_allow_transfer,omitempty"`
	// The IP address and port of the DNS server managing the smart architecture. If the parameter <b>dns_notify</b> is set to <b>yes</b> or <b>explicit</b>, the server specified is instantly notified of any slave zones updates.
	ServerAlsoNotify *string `json:"server_also_notify,omitempty"`
	// The name of the class applied to the DNS server, it can be preceded by the class directory.
	ServerClassName *string `json:"server_class_name,omitempty"`
	// #general.output.class_parameters#
	ServerClassParameters *[]ApiClassParameterOutputEntry `json:"server_class_parameters,omitempty"`
	// Internal use. Not documented.
	ServerCloud *string `json:"server_cloud,omitempty"`
	// The description of the DNS server.
	ServerComment *string `json:"server_comment,omitempty"`
	// Internal use. Not documented.
	ServerForceHybrid *string `json:"server_force_hybrid,omitempty"`
	// The forwarding mode of the DNS server. No value indicates that the forwarding is disabled: <table><caption>dns_forward possible values</caption><br/><thead><tr><th>Status</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >first</td><td >The server sends the queries to the forwarder(s). If no answer is returned, it attempts to answer the queries on its own.</td></tr><tr><td >only</td><td >The server only forwards the queries to the forwarder(s). Required by some reverse forward zones (e.g., in the case of private addresses).</td></tr></tbody></table></p><br/>
	ServerForward *string `json:"server_forward,omitempty"`
	// The IP address(es) of the forwarder(s) associated with the DNS server. It lists the DNS servers to which any unknown zone should be sent, as follows: <b>&lt;ip_address1&gt;;&lt;ip_address2&gt;;...</b> .
	ServerForwarders *string `json:"server_forwarders,omitempty"`
	// Internal use. Not documented.
	ServerHybrid *string `json:"server_hybrid,omitempty"`
	// The database identifier (ID) of the DNS server, a unique numeric key value automatically incremented when you add a DNS server.
	ServerId *string `json:"server_id,omitempty"`
	// The name of the DNS TSIG key associated with the DNS server.
	ServerKeyName *string `json:"server_key_name,omitempty"`
	// The encryption protocol of the TSIG key associated with the DNS server.
	ServerKeyProto *string `json:"server_key_proto,omitempty"`
	// The value of the TSIG key associated with the DNS server.
	ServerKeyValue *string `json:"server_key_value,omitempty"`
	// The name of the DNS server.
	ServerName *string `json:"server_name,omitempty"`
	// The notify status of the DNS server:<table><caption>dns_notify possible values</caption><br/><thead><tr><th>Status</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >no</td><td >No notify message is sent when changes are performed in the master zones.</td></tr><tr><td >yes</td><td >The notify messages are sent to the target of the NS records of the master zone. They are also sent to the IP address(es) specified in the parameter .</td></tr><tr><td >explicit</td><td >The notify messages are only sent to the IP address(es) specified in the parameter .</td></tr></tbody></table></p><br/>
	ServerNotify *string `json:"server_notify,omitempty"`
	// The recursion status of the DNS server:<table><caption>dns_recursion possible values</caption><br/><thead><tr><th>Status</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >no</td><td >The server only provides iterative query behavior - normally resulting in a referral. If the answer to the query already exists in the cache it will be returned whatever the value of this statement.</td></tr><tr><td >yes</td><td >The server always provides recursive query behavior if requested by the client.</td></tr></tbody></table></p><br/>
	ServerRecursion *string `json:"server_recursion,omitempty"`
	// The role of the DNS server in the smart architecture, either <b>master</b>, <b>hidden-master</b>, <b>pseudo-master</b> or <b>slave</b>.
	ServerRole *string `json:"server_role,omitempty"`
	// The status of the DNS server:<table><caption>dns_state possible values</caption><br/><thead><tr><th>Status</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >ER</td><td >The license used in SOLIDserver is not compliant with the added server: the license is invalid.</td></tr><tr><td >ES</td><td >The server configuration could not be parsed properly.</td></tr><tr><td >ET</td><td >The server does not answer anymore due to a scheduled configuration of the server.</td></tr><tr><td >IC</td><td >The SSL credentials are invalid</td></tr><tr><td >IP</td><td >The provided account does not have sufficient privileges to remotely manage the MS server.</td></tr><tr><td >IR</td><td >SOLIDserver cannot resolve the AWS DNS service. The Amazon services are unreachable and the Amazon Route 53 server cannot be managed. Make sure that the DNS resolvers declared on the page  are valid.</td></tr><tr><td >IS</td><td >There was a setting error during the server declaration. For instance, some settings were added to a server that does not support them or a smart architecture is not managing any physical server.</td></tr><tr><td >IT</td><td >The server editions performed from the GUI are not pushed to the server because SOLIDserver time and date are incorrect. You must use the UTC system on the appliance, especially when managing Amazon Route 53 servers.</td></tr><tr><td >LS</td><td >The server configuration is not viable.</td></tr><tr><td >N</td><td >The server does not have a status as it has not synchronized yet.</td></tr><tr><td >UE</td><td >An error occurred that SOLIDserver could not identify.</td></tr><tr><td >Y</td><td >The server is operational.</td></tr></tbody></table></p><br/>
	ServerState *string `json:"server_state,omitempty"`
	// The synchronization status of the DNS server. <b>1</b> indicates that the server is currently being synchronized.
	ServerSynching *string `json:"server_synching,omitempty"`
	// The type of the DNS server: <table><caption>dns_type possible values</caption><br/><thead><tr><th>Type</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >ipm</td><td >EfficientIP DNS server or EfficientIP DNS Package</td></tr><tr><td >msdaemon</td><td >Agentless Microsoft DNS server</td></tr><tr><td >ans</td><td >Nominum DNS server (ANS)</td></tr><tr><td >aws</td><td >Amazon Route 53 server</td></tr><tr><td >other</td><td >Generic DNS server</td></tr><tr><td >vdns</td><td >EfficientIP DNS smart architecture</td></tr></tbody></table></p><br/>
	ServerType *string `json:"server_type,omitempty"`
	// The version details of the DNS server.
	ServerVersion *string `json:"server_version,omitempty"`
	// The status of the service DNS Guardian, either enabled (<b>1</b>) or disabled (<b>0</b>).
	ServerBlastEnabled *string `json:"server_blast_enabled,omitempty"`
	// The status of the Guardian server, either OK (<b>1</b>), Stopped (<b>2</b>), Invalid Credentials (<b>4</b>) or Timeout (<b>5</b>).
	ServerBlastStatus *string `json:"server_blast_status,omitempty"`
	// The license GSLB activation status. <b>1</b> indicates your license includes GSLB and your appliance supports it.
	ServerGslbSupported *string `json:"server_gslb_supported,omitempty"`
	// Internal use. Not documented.
	ServerGuardianGuiManagementSupported *string `json:"server_guardian_gui_management_supported,omitempty"`
	// The license Guardian activation status. <b>1</b> indicates your license includes Guardian and your appliance supports its latest features.
	ServerGuardianSupported *string `json:"server_guardian_supported,omitempty"`
	// The DNSSEC resolution status of the DNS server. <b>yes</b> indicates it is enabled.
	ServerDnssecValidation *string `json:"server_dnssec_validation,omitempty"`
	// The GSS-TSIG status of the DNS server. <b>1</b> indicates that GSS-TSIG is enabled on the server.
	ServerGssEnabled *string `json:"server_gss_enabled,omitempty"`
	// The database identifier (ID) of the DNS GSS-TSIG keytab.
	ServerGssKeytabId *string `json:"server_gss_keytab_id,omitempty"`
	// The IP address of the DNS server, in hexadecimal format.
	ServerAddr *string `json:"server_addr,omitempty"`
	// Internal use. Not documented.
	ServerIpmLogin *string `json:"server_ipm_login,omitempty"`
	// The DNS server package information. <b>Y</b> for an EfficientIP DNS Package server, <b>N</b> for an appliance or virtual machine, <b>U</b> the package information is irrelevant. For servers with a <b>dns_type</b> set to <b>ipm</b>, <b>U</b> indicates either EfficientIP DNS Packages or appliances/virtual machines.
	ServerIpmIsPackage *string `json:"server_ipm_is_package,omitempty"`
	// Internal use. Not documented.
	ServerIpmProtocol *string `json:"server_ipm_protocol,omitempty"`
	// The engine type of the DNS server: <b>named</b> (BIND engine), <b>nsd</b> (NSD engine) or <b>unbound</b> (Unbound engine).
	ServerIpmType *string `json:"server_ipm_type,omitempty"`
	// A way to determine if the server can update any other module <b>(1)</b>.
	ServerIsolated *string `json:"server_isolated,omitempty"`
	// The LDAP domain associated with the DNS server.
	ServerLdapDomain *string `json:"server_ldap_domain,omitempty"`
	// The LDAP login associated with the DNS server.
	ServerLdapUser *string `json:"server_ldap_user,omitempty"`
	// The Multi-status information is displayed as follows: <i>&lt;number-of-instances&gt;@&lt;message-number&gt;@&lt;multi-status-severity&gt;@&lt;module&gt;</i>. The different severity levels are:<br><b>Multi-status severity levels</b>    <table border=1>        <thead>        <tr >            <td><b>Message number</b></td>            <td><b>Severity</b></td>            <td><b>Description</b></td>        </tr>        </thead>        <tbody>        <tr  valign=middle>            <td>0 - 16</td>            <td>Emergency</td>            <td>The object configuration prevents the system from running properly. Action is required.</td>        </tr>        <tr  valign=middle>            <td>17 - 33</td>            <td>Critical</td>            <td>The object configuration is in critical conditions. Immediate action is recommended.</td>        </tr>        <tr  valign=middle>            <td>34 - 50</td>            <td>Error</td>            <td>The object configuration failed at some level. Action is recommended.</td>        </tr>        <tr  valign=middle>            <td>51 - 66</td>            <td>Warning</td>            <td>The object configuration triggers error messages if no action is taken. Action to be taken at your discretion.</td>        </tr>        <tr  valign=middle>            <td>67 - 83</td>            <td>Notice</td>            <td>The object configuration is normal but undergoing events that might trigger errors. No immediate action required.</td>        </tr>        <tr  valign=middle>            <td>84 - 100</td>            <td>Informational</td>            <td>The object configuration is normal, operational messages (might inform you about potential incompatibilities with other modules, etc). No action required.</td>        </tr>        </tbody></table>
	ServerMultistatus *string `json:"server_multistatus,omitempty"`
	// The DNS querylog status. <b>1</b> indicates that the DNS server querylog is enabled.
	ServerQuerylogState *string `json:"server_querylog_state,omitempty"`
	// TODO:dns_server_list.output.reverse_proxy_conf
	ReverseProxyConf *string `json:"reverse_proxy_conf,omitempty"`
	// Internal use. Not documented.
	ServerSnmpId *string `json:"server_snmp_id,omitempty"`
	// Internal use. Not documented.
	ServerStatEnabled *string `json:"server_stat_enabled,omitempty"`
	// Internal use. Not documented.
	ServerStatNiceness *string `json:"server_stat_niceness,omitempty"`
	// Internal use. Not documented.
	ServerStatPeriod *string `json:"server_stat_period,omitempty"`
	// Internal use. Not documented.
	ServerStatTime *string `json:"server_stat_time,omitempty"`
	// The total number of servers managed by the DNS smart architecture.
	TotalSmartMembers *string `json:"total_smart_members,omitempty"`
	// The type of the DNS smart architecture:<table><caption>vdns_arch possible values</caption><br/><thead><tr><th>Status</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >masterslave</td><td >Master/Slave</td></tr><tr><td >stealth</td><td >Stealth</td></tr><tr><td >multimaster</td><td >Multi-Master</td></tr><tr><td >single</td><td >Single-Server</td></tr><tr><td >farm</td><td >Farm</td></tr></tbody></table></p><br/>
	SmartArch *string `json:"smart_arch,omitempty"`
	// The list of the servers managed by the DNS smart architecture, as follows: <b>&lt;dns_name&gt;,&lt;dns_name&gt;,...</b> .
	SmartMembersName *string `json:"smart_members_name,omitempty"`
	// The type of the DNS smart architecture managing the DNS server. No value indicates that the server is not managed by a smart architecture or is a smart architecture itself.
	SmartParentArch *string `json:"smart_parent_arch,omitempty"`
	// The database identifier (ID) of the DNS smart architecture managing the DNS server. <b>0</b> indicates that the server is not managed by a smart architecture or is a smart architecture itself.
	SmartParentId *string `json:"smart_parent_id,omitempty"`
	// The name of the DNS smart architecture managing the DNS server. <b>#</b> indicates that the server is not managed by a smart architecture or is a smart architecture itself.
	SmartParentName *string `json:"smart_parent_name,omitempty"`
	// The list of the published name servers associated with the DNS smart architecture, as follows: <b>&lt;ns1&gt;;&lt;ns2&gt;;...</b> .
	SmartPublicNsList *string `json:"smart_public_ns_list,omitempty"`
	// Internal use. Not documented.
	ServerWindnsPort *string `json:"server_windns_port,omitempty"`
	// Internal use. Not documented.
	ServerWindnsProtocol *string `json:"server_windns_protocol,omitempty"`
	// Internal use. Not documented.
	ServerWindnsUseSsl *string `json:"server_windns_use_ssl,omitempty"`
}

// NewDnsServerDataData instantiates a new DnsServerDataData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnsServerDataData() *DnsServerDataData {
	this := DnsServerDataData{}
	return &this
}

// NewDnsServerDataDataWithDefaults instantiates a new DnsServerDataData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsServerDataDataWithDefaults() *DnsServerDataData {
	this := DnsServerDataData{}
	return &this
}

// GetAdDomain returns the AdDomain field value if set, zero value otherwise.
func (o *DnsServerDataData) GetAdDomain() string {
	if o == nil || o.AdDomain == nil {
		var ret string
		return ret
	}
	return *o.AdDomain
}

// GetAdDomainOk returns a tuple with the AdDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetAdDomainOk() (*string, bool) {
	if o == nil || o.AdDomain == nil {
		return nil, false
	}
	return o.AdDomain, true
}

// HasAdDomain returns a boolean if a field has been set.
func (o *DnsServerDataData) HasAdDomain() bool {
	if o != nil && o.AdDomain != nil {
		return true
	}

	return false
}

// SetAdDomain gets a reference to the given string and assigns it to the AdDomain field.
func (o *DnsServerDataData) SetAdDomain(v string) {
	o.AdDomain = &v
}

// GetAdUser returns the AdUser field value if set, zero value otherwise.
func (o *DnsServerDataData) GetAdUser() string {
	if o == nil || o.AdUser == nil {
		var ret string
		return ret
	}
	return *o.AdUser
}

// GetAdUserOk returns a tuple with the AdUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetAdUserOk() (*string, bool) {
	if o == nil || o.AdUser == nil {
		return nil, false
	}
	return o.AdUser, true
}

// HasAdUser returns a boolean if a field has been set.
func (o *DnsServerDataData) HasAdUser() bool {
	if o != nil && o.AdUser != nil {
		return true
	}

	return false
}

// SetAdUser gets a reference to the given string and assigns it to the AdUser field.
func (o *DnsServerDataData) SetAdUser(v string) {
	o.AdUser = &v
}

// GetServerAwsKeyid returns the ServerAwsKeyid field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerAwsKeyid() string {
	if o == nil || o.ServerAwsKeyid == nil {
		var ret string
		return ret
	}
	return *o.ServerAwsKeyid
}

// GetServerAwsKeyidOk returns a tuple with the ServerAwsKeyid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerAwsKeyidOk() (*string, bool) {
	if o == nil || o.ServerAwsKeyid == nil {
		return nil, false
	}
	return o.ServerAwsKeyid, true
}

// HasServerAwsKeyid returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerAwsKeyid() bool {
	if o != nil && o.ServerAwsKeyid != nil {
		return true
	}

	return false
}

// SetServerAwsKeyid gets a reference to the given string and assigns it to the ServerAwsKeyid field.
func (o *DnsServerDataData) SetServerAwsKeyid(v string) {
	o.ServerAwsKeyid = &v
}

// GetAzGroup returns the AzGroup field value if set, zero value otherwise.
func (o *DnsServerDataData) GetAzGroup() string {
	if o == nil || o.AzGroup == nil {
		var ret string
		return ret
	}
	return *o.AzGroup
}

// GetAzGroupOk returns a tuple with the AzGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetAzGroupOk() (*string, bool) {
	if o == nil || o.AzGroup == nil {
		return nil, false
	}
	return o.AzGroup, true
}

// HasAzGroup returns a boolean if a field has been set.
func (o *DnsServerDataData) HasAzGroup() bool {
	if o != nil && o.AzGroup != nil {
		return true
	}

	return false
}

// SetAzGroup gets a reference to the given string and assigns it to the AzGroup field.
func (o *DnsServerDataData) SetAzGroup(v string) {
	o.AzGroup = &v
}

// GetAzKeyid returns the AzKeyid field value if set, zero value otherwise.
func (o *DnsServerDataData) GetAzKeyid() string {
	if o == nil || o.AzKeyid == nil {
		var ret string
		return ret
	}
	return *o.AzKeyid
}

// GetAzKeyidOk returns a tuple with the AzKeyid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetAzKeyidOk() (*string, bool) {
	if o == nil || o.AzKeyid == nil {
		return nil, false
	}
	return o.AzKeyid, true
}

// HasAzKeyid returns a boolean if a field has been set.
func (o *DnsServerDataData) HasAzKeyid() bool {
	if o != nil && o.AzKeyid != nil {
		return true
	}

	return false
}

// SetAzKeyid gets a reference to the given string and assigns it to the AzKeyid field.
func (o *DnsServerDataData) SetAzKeyid(v string) {
	o.AzKeyid = &v
}

// GetAzSubscriptionid returns the AzSubscriptionid field value if set, zero value otherwise.
func (o *DnsServerDataData) GetAzSubscriptionid() string {
	if o == nil || o.AzSubscriptionid == nil {
		var ret string
		return ret
	}
	return *o.AzSubscriptionid
}

// GetAzSubscriptionidOk returns a tuple with the AzSubscriptionid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetAzSubscriptionidOk() (*string, bool) {
	if o == nil || o.AzSubscriptionid == nil {
		return nil, false
	}
	return o.AzSubscriptionid, true
}

// HasAzSubscriptionid returns a boolean if a field has been set.
func (o *DnsServerDataData) HasAzSubscriptionid() bool {
	if o != nil && o.AzSubscriptionid != nil {
		return true
	}

	return false
}

// SetAzSubscriptionid gets a reference to the given string and assigns it to the AzSubscriptionid field.
func (o *DnsServerDataData) SetAzSubscriptionid(v string) {
	o.AzSubscriptionid = &v
}

// GetAzTenantid returns the AzTenantid field value if set, zero value otherwise.
func (o *DnsServerDataData) GetAzTenantid() string {
	if o == nil || o.AzTenantid == nil {
		var ret string
		return ret
	}
	return *o.AzTenantid
}

// GetAzTenantidOk returns a tuple with the AzTenantid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetAzTenantidOk() (*string, bool) {
	if o == nil || o.AzTenantid == nil {
		return nil, false
	}
	return o.AzTenantid, true
}

// HasAzTenantid returns a boolean if a field has been set.
func (o *DnsServerDataData) HasAzTenantid() bool {
	if o != nil && o.AzTenantid != nil {
		return true
	}

	return false
}

// SetAzTenantid gets a reference to the given string and assigns it to the AzTenantid field.
func (o *DnsServerDataData) SetAzTenantid(v string) {
	o.AzTenantid = &v
}

// GetServerAllowQuery returns the ServerAllowQuery field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerAllowQuery() string {
	if o == nil || o.ServerAllowQuery == nil {
		var ret string
		return ret
	}
	return *o.ServerAllowQuery
}

// GetServerAllowQueryOk returns a tuple with the ServerAllowQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerAllowQueryOk() (*string, bool) {
	if o == nil || o.ServerAllowQuery == nil {
		return nil, false
	}
	return o.ServerAllowQuery, true
}

// HasServerAllowQuery returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerAllowQuery() bool {
	if o != nil && o.ServerAllowQuery != nil {
		return true
	}

	return false
}

// SetServerAllowQuery gets a reference to the given string and assigns it to the ServerAllowQuery field.
func (o *DnsServerDataData) SetServerAllowQuery(v string) {
	o.ServerAllowQuery = &v
}

// GetServerAllowQueryCache returns the ServerAllowQueryCache field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerAllowQueryCache() string {
	if o == nil || o.ServerAllowQueryCache == nil {
		var ret string
		return ret
	}
	return *o.ServerAllowQueryCache
}

// GetServerAllowQueryCacheOk returns a tuple with the ServerAllowQueryCache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerAllowQueryCacheOk() (*string, bool) {
	if o == nil || o.ServerAllowQueryCache == nil {
		return nil, false
	}
	return o.ServerAllowQueryCache, true
}

// HasServerAllowQueryCache returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerAllowQueryCache() bool {
	if o != nil && o.ServerAllowQueryCache != nil {
		return true
	}

	return false
}

// SetServerAllowQueryCache gets a reference to the given string and assigns it to the ServerAllowQueryCache field.
func (o *DnsServerDataData) SetServerAllowQueryCache(v string) {
	o.ServerAllowQueryCache = &v
}

// GetServerAllowRecursion returns the ServerAllowRecursion field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerAllowRecursion() string {
	if o == nil || o.ServerAllowRecursion == nil {
		var ret string
		return ret
	}
	return *o.ServerAllowRecursion
}

// GetServerAllowRecursionOk returns a tuple with the ServerAllowRecursion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerAllowRecursionOk() (*string, bool) {
	if o == nil || o.ServerAllowRecursion == nil {
		return nil, false
	}
	return o.ServerAllowRecursion, true
}

// HasServerAllowRecursion returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerAllowRecursion() bool {
	if o != nil && o.ServerAllowRecursion != nil {
		return true
	}

	return false
}

// SetServerAllowRecursion gets a reference to the given string and assigns it to the ServerAllowRecursion field.
func (o *DnsServerDataData) SetServerAllowRecursion(v string) {
	o.ServerAllowRecursion = &v
}

// GetServerAllowTransfer returns the ServerAllowTransfer field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerAllowTransfer() string {
	if o == nil || o.ServerAllowTransfer == nil {
		var ret string
		return ret
	}
	return *o.ServerAllowTransfer
}

// GetServerAllowTransferOk returns a tuple with the ServerAllowTransfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerAllowTransferOk() (*string, bool) {
	if o == nil || o.ServerAllowTransfer == nil {
		return nil, false
	}
	return o.ServerAllowTransfer, true
}

// HasServerAllowTransfer returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerAllowTransfer() bool {
	if o != nil && o.ServerAllowTransfer != nil {
		return true
	}

	return false
}

// SetServerAllowTransfer gets a reference to the given string and assigns it to the ServerAllowTransfer field.
func (o *DnsServerDataData) SetServerAllowTransfer(v string) {
	o.ServerAllowTransfer = &v
}

// GetServerAlsoNotify returns the ServerAlsoNotify field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerAlsoNotify() string {
	if o == nil || o.ServerAlsoNotify == nil {
		var ret string
		return ret
	}
	return *o.ServerAlsoNotify
}

// GetServerAlsoNotifyOk returns a tuple with the ServerAlsoNotify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerAlsoNotifyOk() (*string, bool) {
	if o == nil || o.ServerAlsoNotify == nil {
		return nil, false
	}
	return o.ServerAlsoNotify, true
}

// HasServerAlsoNotify returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerAlsoNotify() bool {
	if o != nil && o.ServerAlsoNotify != nil {
		return true
	}

	return false
}

// SetServerAlsoNotify gets a reference to the given string and assigns it to the ServerAlsoNotify field.
func (o *DnsServerDataData) SetServerAlsoNotify(v string) {
	o.ServerAlsoNotify = &v
}

// GetServerClassName returns the ServerClassName field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerClassName() string {
	if o == nil || o.ServerClassName == nil {
		var ret string
		return ret
	}
	return *o.ServerClassName
}

// GetServerClassNameOk returns a tuple with the ServerClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerClassNameOk() (*string, bool) {
	if o == nil || o.ServerClassName == nil {
		return nil, false
	}
	return o.ServerClassName, true
}

// HasServerClassName returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerClassName() bool {
	if o != nil && o.ServerClassName != nil {
		return true
	}

	return false
}

// SetServerClassName gets a reference to the given string and assigns it to the ServerClassName field.
func (o *DnsServerDataData) SetServerClassName(v string) {
	o.ServerClassName = &v
}

// GetServerClassParameters returns the ServerClassParameters field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerClassParameters() []ApiClassParameterOutputEntry {
	if o == nil || o.ServerClassParameters == nil {
		var ret []ApiClassParameterOutputEntry
		return ret
	}
	return *o.ServerClassParameters
}

// GetServerClassParametersOk returns a tuple with the ServerClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerClassParametersOk() (*[]ApiClassParameterOutputEntry, bool) {
	if o == nil || o.ServerClassParameters == nil {
		return nil, false
	}
	return o.ServerClassParameters, true
}

// HasServerClassParameters returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerClassParameters() bool {
	if o != nil && o.ServerClassParameters != nil {
		return true
	}

	return false
}

// SetServerClassParameters gets a reference to the given []ApiClassParameterOutputEntry and assigns it to the ServerClassParameters field.
func (o *DnsServerDataData) SetServerClassParameters(v []ApiClassParameterOutputEntry) {
	o.ServerClassParameters = &v
}

// GetServerCloud returns the ServerCloud field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerCloud() string {
	if o == nil || o.ServerCloud == nil {
		var ret string
		return ret
	}
	return *o.ServerCloud
}

// GetServerCloudOk returns a tuple with the ServerCloud field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerCloudOk() (*string, bool) {
	if o == nil || o.ServerCloud == nil {
		return nil, false
	}
	return o.ServerCloud, true
}

// HasServerCloud returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerCloud() bool {
	if o != nil && o.ServerCloud != nil {
		return true
	}

	return false
}

// SetServerCloud gets a reference to the given string and assigns it to the ServerCloud field.
func (o *DnsServerDataData) SetServerCloud(v string) {
	o.ServerCloud = &v
}

// GetServerComment returns the ServerComment field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerComment() string {
	if o == nil || o.ServerComment == nil {
		var ret string
		return ret
	}
	return *o.ServerComment
}

// GetServerCommentOk returns a tuple with the ServerComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerCommentOk() (*string, bool) {
	if o == nil || o.ServerComment == nil {
		return nil, false
	}
	return o.ServerComment, true
}

// HasServerComment returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerComment() bool {
	if o != nil && o.ServerComment != nil {
		return true
	}

	return false
}

// SetServerComment gets a reference to the given string and assigns it to the ServerComment field.
func (o *DnsServerDataData) SetServerComment(v string) {
	o.ServerComment = &v
}

// GetServerForceHybrid returns the ServerForceHybrid field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerForceHybrid() string {
	if o == nil || o.ServerForceHybrid == nil {
		var ret string
		return ret
	}
	return *o.ServerForceHybrid
}

// GetServerForceHybridOk returns a tuple with the ServerForceHybrid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerForceHybridOk() (*string, bool) {
	if o == nil || o.ServerForceHybrid == nil {
		return nil, false
	}
	return o.ServerForceHybrid, true
}

// HasServerForceHybrid returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerForceHybrid() bool {
	if o != nil && o.ServerForceHybrid != nil {
		return true
	}

	return false
}

// SetServerForceHybrid gets a reference to the given string and assigns it to the ServerForceHybrid field.
func (o *DnsServerDataData) SetServerForceHybrid(v string) {
	o.ServerForceHybrid = &v
}

// GetServerForward returns the ServerForward field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerForward() string {
	if o == nil || o.ServerForward == nil {
		var ret string
		return ret
	}
	return *o.ServerForward
}

// GetServerForwardOk returns a tuple with the ServerForward field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerForwardOk() (*string, bool) {
	if o == nil || o.ServerForward == nil {
		return nil, false
	}
	return o.ServerForward, true
}

// HasServerForward returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerForward() bool {
	if o != nil && o.ServerForward != nil {
		return true
	}

	return false
}

// SetServerForward gets a reference to the given string and assigns it to the ServerForward field.
func (o *DnsServerDataData) SetServerForward(v string) {
	o.ServerForward = &v
}

// GetServerForwarders returns the ServerForwarders field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerForwarders() string {
	if o == nil || o.ServerForwarders == nil {
		var ret string
		return ret
	}
	return *o.ServerForwarders
}

// GetServerForwardersOk returns a tuple with the ServerForwarders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerForwardersOk() (*string, bool) {
	if o == nil || o.ServerForwarders == nil {
		return nil, false
	}
	return o.ServerForwarders, true
}

// HasServerForwarders returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerForwarders() bool {
	if o != nil && o.ServerForwarders != nil {
		return true
	}

	return false
}

// SetServerForwarders gets a reference to the given string and assigns it to the ServerForwarders field.
func (o *DnsServerDataData) SetServerForwarders(v string) {
	o.ServerForwarders = &v
}

// GetServerHybrid returns the ServerHybrid field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerHybrid() string {
	if o == nil || o.ServerHybrid == nil {
		var ret string
		return ret
	}
	return *o.ServerHybrid
}

// GetServerHybridOk returns a tuple with the ServerHybrid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerHybridOk() (*string, bool) {
	if o == nil || o.ServerHybrid == nil {
		return nil, false
	}
	return o.ServerHybrid, true
}

// HasServerHybrid returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerHybrid() bool {
	if o != nil && o.ServerHybrid != nil {
		return true
	}

	return false
}

// SetServerHybrid gets a reference to the given string and assigns it to the ServerHybrid field.
func (o *DnsServerDataData) SetServerHybrid(v string) {
	o.ServerHybrid = &v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerId() string {
	if o == nil || o.ServerId == nil {
		var ret string
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerIdOk() (*string, bool) {
	if o == nil || o.ServerId == nil {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerId() bool {
	if o != nil && o.ServerId != nil {
		return true
	}

	return false
}

// SetServerId gets a reference to the given string and assigns it to the ServerId field.
func (o *DnsServerDataData) SetServerId(v string) {
	o.ServerId = &v
}

// GetServerKeyName returns the ServerKeyName field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerKeyName() string {
	if o == nil || o.ServerKeyName == nil {
		var ret string
		return ret
	}
	return *o.ServerKeyName
}

// GetServerKeyNameOk returns a tuple with the ServerKeyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerKeyNameOk() (*string, bool) {
	if o == nil || o.ServerKeyName == nil {
		return nil, false
	}
	return o.ServerKeyName, true
}

// HasServerKeyName returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerKeyName() bool {
	if o != nil && o.ServerKeyName != nil {
		return true
	}

	return false
}

// SetServerKeyName gets a reference to the given string and assigns it to the ServerKeyName field.
func (o *DnsServerDataData) SetServerKeyName(v string) {
	o.ServerKeyName = &v
}

// GetServerKeyProto returns the ServerKeyProto field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerKeyProto() string {
	if o == nil || o.ServerKeyProto == nil {
		var ret string
		return ret
	}
	return *o.ServerKeyProto
}

// GetServerKeyProtoOk returns a tuple with the ServerKeyProto field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerKeyProtoOk() (*string, bool) {
	if o == nil || o.ServerKeyProto == nil {
		return nil, false
	}
	return o.ServerKeyProto, true
}

// HasServerKeyProto returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerKeyProto() bool {
	if o != nil && o.ServerKeyProto != nil {
		return true
	}

	return false
}

// SetServerKeyProto gets a reference to the given string and assigns it to the ServerKeyProto field.
func (o *DnsServerDataData) SetServerKeyProto(v string) {
	o.ServerKeyProto = &v
}

// GetServerKeyValue returns the ServerKeyValue field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerKeyValue() string {
	if o == nil || o.ServerKeyValue == nil {
		var ret string
		return ret
	}
	return *o.ServerKeyValue
}

// GetServerKeyValueOk returns a tuple with the ServerKeyValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerKeyValueOk() (*string, bool) {
	if o == nil || o.ServerKeyValue == nil {
		return nil, false
	}
	return o.ServerKeyValue, true
}

// HasServerKeyValue returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerKeyValue() bool {
	if o != nil && o.ServerKeyValue != nil {
		return true
	}

	return false
}

// SetServerKeyValue gets a reference to the given string and assigns it to the ServerKeyValue field.
func (o *DnsServerDataData) SetServerKeyValue(v string) {
	o.ServerKeyValue = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerName() string {
	if o == nil || o.ServerName == nil {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerNameOk() (*string, bool) {
	if o == nil || o.ServerName == nil {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerName() bool {
	if o != nil && o.ServerName != nil {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *DnsServerDataData) SetServerName(v string) {
	o.ServerName = &v
}

// GetServerNotify returns the ServerNotify field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerNotify() string {
	if o == nil || o.ServerNotify == nil {
		var ret string
		return ret
	}
	return *o.ServerNotify
}

// GetServerNotifyOk returns a tuple with the ServerNotify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerNotifyOk() (*string, bool) {
	if o == nil || o.ServerNotify == nil {
		return nil, false
	}
	return o.ServerNotify, true
}

// HasServerNotify returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerNotify() bool {
	if o != nil && o.ServerNotify != nil {
		return true
	}

	return false
}

// SetServerNotify gets a reference to the given string and assigns it to the ServerNotify field.
func (o *DnsServerDataData) SetServerNotify(v string) {
	o.ServerNotify = &v
}

// GetServerRecursion returns the ServerRecursion field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerRecursion() string {
	if o == nil || o.ServerRecursion == nil {
		var ret string
		return ret
	}
	return *o.ServerRecursion
}

// GetServerRecursionOk returns a tuple with the ServerRecursion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerRecursionOk() (*string, bool) {
	if o == nil || o.ServerRecursion == nil {
		return nil, false
	}
	return o.ServerRecursion, true
}

// HasServerRecursion returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerRecursion() bool {
	if o != nil && o.ServerRecursion != nil {
		return true
	}

	return false
}

// SetServerRecursion gets a reference to the given string and assigns it to the ServerRecursion field.
func (o *DnsServerDataData) SetServerRecursion(v string) {
	o.ServerRecursion = &v
}

// GetServerRole returns the ServerRole field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerRole() string {
	if o == nil || o.ServerRole == nil {
		var ret string
		return ret
	}
	return *o.ServerRole
}

// GetServerRoleOk returns a tuple with the ServerRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerRoleOk() (*string, bool) {
	if o == nil || o.ServerRole == nil {
		return nil, false
	}
	return o.ServerRole, true
}

// HasServerRole returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerRole() bool {
	if o != nil && o.ServerRole != nil {
		return true
	}

	return false
}

// SetServerRole gets a reference to the given string and assigns it to the ServerRole field.
func (o *DnsServerDataData) SetServerRole(v string) {
	o.ServerRole = &v
}

// GetServerState returns the ServerState field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerState() string {
	if o == nil || o.ServerState == nil {
		var ret string
		return ret
	}
	return *o.ServerState
}

// GetServerStateOk returns a tuple with the ServerState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerStateOk() (*string, bool) {
	if o == nil || o.ServerState == nil {
		return nil, false
	}
	return o.ServerState, true
}

// HasServerState returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerState() bool {
	if o != nil && o.ServerState != nil {
		return true
	}

	return false
}

// SetServerState gets a reference to the given string and assigns it to the ServerState field.
func (o *DnsServerDataData) SetServerState(v string) {
	o.ServerState = &v
}

// GetServerSynching returns the ServerSynching field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerSynching() string {
	if o == nil || o.ServerSynching == nil {
		var ret string
		return ret
	}
	return *o.ServerSynching
}

// GetServerSynchingOk returns a tuple with the ServerSynching field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerSynchingOk() (*string, bool) {
	if o == nil || o.ServerSynching == nil {
		return nil, false
	}
	return o.ServerSynching, true
}

// HasServerSynching returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerSynching() bool {
	if o != nil && o.ServerSynching != nil {
		return true
	}

	return false
}

// SetServerSynching gets a reference to the given string and assigns it to the ServerSynching field.
func (o *DnsServerDataData) SetServerSynching(v string) {
	o.ServerSynching = &v
}

// GetServerType returns the ServerType field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerType() string {
	if o == nil || o.ServerType == nil {
		var ret string
		return ret
	}
	return *o.ServerType
}

// GetServerTypeOk returns a tuple with the ServerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerTypeOk() (*string, bool) {
	if o == nil || o.ServerType == nil {
		return nil, false
	}
	return o.ServerType, true
}

// HasServerType returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerType() bool {
	if o != nil && o.ServerType != nil {
		return true
	}

	return false
}

// SetServerType gets a reference to the given string and assigns it to the ServerType field.
func (o *DnsServerDataData) SetServerType(v string) {
	o.ServerType = &v
}

// GetServerVersion returns the ServerVersion field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerVersion() string {
	if o == nil || o.ServerVersion == nil {
		var ret string
		return ret
	}
	return *o.ServerVersion
}

// GetServerVersionOk returns a tuple with the ServerVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerVersionOk() (*string, bool) {
	if o == nil || o.ServerVersion == nil {
		return nil, false
	}
	return o.ServerVersion, true
}

// HasServerVersion returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerVersion() bool {
	if o != nil && o.ServerVersion != nil {
		return true
	}

	return false
}

// SetServerVersion gets a reference to the given string and assigns it to the ServerVersion field.
func (o *DnsServerDataData) SetServerVersion(v string) {
	o.ServerVersion = &v
}

// GetServerBlastEnabled returns the ServerBlastEnabled field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerBlastEnabled() string {
	if o == nil || o.ServerBlastEnabled == nil {
		var ret string
		return ret
	}
	return *o.ServerBlastEnabled
}

// GetServerBlastEnabledOk returns a tuple with the ServerBlastEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerBlastEnabledOk() (*string, bool) {
	if o == nil || o.ServerBlastEnabled == nil {
		return nil, false
	}
	return o.ServerBlastEnabled, true
}

// HasServerBlastEnabled returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerBlastEnabled() bool {
	if o != nil && o.ServerBlastEnabled != nil {
		return true
	}

	return false
}

// SetServerBlastEnabled gets a reference to the given string and assigns it to the ServerBlastEnabled field.
func (o *DnsServerDataData) SetServerBlastEnabled(v string) {
	o.ServerBlastEnabled = &v
}

// GetServerBlastStatus returns the ServerBlastStatus field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerBlastStatus() string {
	if o == nil || o.ServerBlastStatus == nil {
		var ret string
		return ret
	}
	return *o.ServerBlastStatus
}

// GetServerBlastStatusOk returns a tuple with the ServerBlastStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerBlastStatusOk() (*string, bool) {
	if o == nil || o.ServerBlastStatus == nil {
		return nil, false
	}
	return o.ServerBlastStatus, true
}

// HasServerBlastStatus returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerBlastStatus() bool {
	if o != nil && o.ServerBlastStatus != nil {
		return true
	}

	return false
}

// SetServerBlastStatus gets a reference to the given string and assigns it to the ServerBlastStatus field.
func (o *DnsServerDataData) SetServerBlastStatus(v string) {
	o.ServerBlastStatus = &v
}

// GetServerGslbSupported returns the ServerGslbSupported field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerGslbSupported() string {
	if o == nil || o.ServerGslbSupported == nil {
		var ret string
		return ret
	}
	return *o.ServerGslbSupported
}

// GetServerGslbSupportedOk returns a tuple with the ServerGslbSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerGslbSupportedOk() (*string, bool) {
	if o == nil || o.ServerGslbSupported == nil {
		return nil, false
	}
	return o.ServerGslbSupported, true
}

// HasServerGslbSupported returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerGslbSupported() bool {
	if o != nil && o.ServerGslbSupported != nil {
		return true
	}

	return false
}

// SetServerGslbSupported gets a reference to the given string and assigns it to the ServerGslbSupported field.
func (o *DnsServerDataData) SetServerGslbSupported(v string) {
	o.ServerGslbSupported = &v
}

// GetServerGuardianGuiManagementSupported returns the ServerGuardianGuiManagementSupported field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerGuardianGuiManagementSupported() string {
	if o == nil || o.ServerGuardianGuiManagementSupported == nil {
		var ret string
		return ret
	}
	return *o.ServerGuardianGuiManagementSupported
}

// GetServerGuardianGuiManagementSupportedOk returns a tuple with the ServerGuardianGuiManagementSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerGuardianGuiManagementSupportedOk() (*string, bool) {
	if o == nil || o.ServerGuardianGuiManagementSupported == nil {
		return nil, false
	}
	return o.ServerGuardianGuiManagementSupported, true
}

// HasServerGuardianGuiManagementSupported returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerGuardianGuiManagementSupported() bool {
	if o != nil && o.ServerGuardianGuiManagementSupported != nil {
		return true
	}

	return false
}

// SetServerGuardianGuiManagementSupported gets a reference to the given string and assigns it to the ServerGuardianGuiManagementSupported field.
func (o *DnsServerDataData) SetServerGuardianGuiManagementSupported(v string) {
	o.ServerGuardianGuiManagementSupported = &v
}

// GetServerGuardianSupported returns the ServerGuardianSupported field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerGuardianSupported() string {
	if o == nil || o.ServerGuardianSupported == nil {
		var ret string
		return ret
	}
	return *o.ServerGuardianSupported
}

// GetServerGuardianSupportedOk returns a tuple with the ServerGuardianSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerGuardianSupportedOk() (*string, bool) {
	if o == nil || o.ServerGuardianSupported == nil {
		return nil, false
	}
	return o.ServerGuardianSupported, true
}

// HasServerGuardianSupported returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerGuardianSupported() bool {
	if o != nil && o.ServerGuardianSupported != nil {
		return true
	}

	return false
}

// SetServerGuardianSupported gets a reference to the given string and assigns it to the ServerGuardianSupported field.
func (o *DnsServerDataData) SetServerGuardianSupported(v string) {
	o.ServerGuardianSupported = &v
}

// GetServerDnssecValidation returns the ServerDnssecValidation field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerDnssecValidation() string {
	if o == nil || o.ServerDnssecValidation == nil {
		var ret string
		return ret
	}
	return *o.ServerDnssecValidation
}

// GetServerDnssecValidationOk returns a tuple with the ServerDnssecValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerDnssecValidationOk() (*string, bool) {
	if o == nil || o.ServerDnssecValidation == nil {
		return nil, false
	}
	return o.ServerDnssecValidation, true
}

// HasServerDnssecValidation returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerDnssecValidation() bool {
	if o != nil && o.ServerDnssecValidation != nil {
		return true
	}

	return false
}

// SetServerDnssecValidation gets a reference to the given string and assigns it to the ServerDnssecValidation field.
func (o *DnsServerDataData) SetServerDnssecValidation(v string) {
	o.ServerDnssecValidation = &v
}

// GetServerGssEnabled returns the ServerGssEnabled field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerGssEnabled() string {
	if o == nil || o.ServerGssEnabled == nil {
		var ret string
		return ret
	}
	return *o.ServerGssEnabled
}

// GetServerGssEnabledOk returns a tuple with the ServerGssEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerGssEnabledOk() (*string, bool) {
	if o == nil || o.ServerGssEnabled == nil {
		return nil, false
	}
	return o.ServerGssEnabled, true
}

// HasServerGssEnabled returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerGssEnabled() bool {
	if o != nil && o.ServerGssEnabled != nil {
		return true
	}

	return false
}

// SetServerGssEnabled gets a reference to the given string and assigns it to the ServerGssEnabled field.
func (o *DnsServerDataData) SetServerGssEnabled(v string) {
	o.ServerGssEnabled = &v
}

// GetServerGssKeytabId returns the ServerGssKeytabId field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerGssKeytabId() string {
	if o == nil || o.ServerGssKeytabId == nil {
		var ret string
		return ret
	}
	return *o.ServerGssKeytabId
}

// GetServerGssKeytabIdOk returns a tuple with the ServerGssKeytabId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerGssKeytabIdOk() (*string, bool) {
	if o == nil || o.ServerGssKeytabId == nil {
		return nil, false
	}
	return o.ServerGssKeytabId, true
}

// HasServerGssKeytabId returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerGssKeytabId() bool {
	if o != nil && o.ServerGssKeytabId != nil {
		return true
	}

	return false
}

// SetServerGssKeytabId gets a reference to the given string and assigns it to the ServerGssKeytabId field.
func (o *DnsServerDataData) SetServerGssKeytabId(v string) {
	o.ServerGssKeytabId = &v
}

// GetServerAddr returns the ServerAddr field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerAddr() string {
	if o == nil || o.ServerAddr == nil {
		var ret string
		return ret
	}
	return *o.ServerAddr
}

// GetServerAddrOk returns a tuple with the ServerAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerAddrOk() (*string, bool) {
	if o == nil || o.ServerAddr == nil {
		return nil, false
	}
	return o.ServerAddr, true
}

// HasServerAddr returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerAddr() bool {
	if o != nil && o.ServerAddr != nil {
		return true
	}

	return false
}

// SetServerAddr gets a reference to the given string and assigns it to the ServerAddr field.
func (o *DnsServerDataData) SetServerAddr(v string) {
	o.ServerAddr = &v
}

// GetServerIpmLogin returns the ServerIpmLogin field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerIpmLogin() string {
	if o == nil || o.ServerIpmLogin == nil {
		var ret string
		return ret
	}
	return *o.ServerIpmLogin
}

// GetServerIpmLoginOk returns a tuple with the ServerIpmLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerIpmLoginOk() (*string, bool) {
	if o == nil || o.ServerIpmLogin == nil {
		return nil, false
	}
	return o.ServerIpmLogin, true
}

// HasServerIpmLogin returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerIpmLogin() bool {
	if o != nil && o.ServerIpmLogin != nil {
		return true
	}

	return false
}

// SetServerIpmLogin gets a reference to the given string and assigns it to the ServerIpmLogin field.
func (o *DnsServerDataData) SetServerIpmLogin(v string) {
	o.ServerIpmLogin = &v
}

// GetServerIpmIsPackage returns the ServerIpmIsPackage field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerIpmIsPackage() string {
	if o == nil || o.ServerIpmIsPackage == nil {
		var ret string
		return ret
	}
	return *o.ServerIpmIsPackage
}

// GetServerIpmIsPackageOk returns a tuple with the ServerIpmIsPackage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerIpmIsPackageOk() (*string, bool) {
	if o == nil || o.ServerIpmIsPackage == nil {
		return nil, false
	}
	return o.ServerIpmIsPackage, true
}

// HasServerIpmIsPackage returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerIpmIsPackage() bool {
	if o != nil && o.ServerIpmIsPackage != nil {
		return true
	}

	return false
}

// SetServerIpmIsPackage gets a reference to the given string and assigns it to the ServerIpmIsPackage field.
func (o *DnsServerDataData) SetServerIpmIsPackage(v string) {
	o.ServerIpmIsPackage = &v
}

// GetServerIpmProtocol returns the ServerIpmProtocol field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerIpmProtocol() string {
	if o == nil || o.ServerIpmProtocol == nil {
		var ret string
		return ret
	}
	return *o.ServerIpmProtocol
}

// GetServerIpmProtocolOk returns a tuple with the ServerIpmProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerIpmProtocolOk() (*string, bool) {
	if o == nil || o.ServerIpmProtocol == nil {
		return nil, false
	}
	return o.ServerIpmProtocol, true
}

// HasServerIpmProtocol returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerIpmProtocol() bool {
	if o != nil && o.ServerIpmProtocol != nil {
		return true
	}

	return false
}

// SetServerIpmProtocol gets a reference to the given string and assigns it to the ServerIpmProtocol field.
func (o *DnsServerDataData) SetServerIpmProtocol(v string) {
	o.ServerIpmProtocol = &v
}

// GetServerIpmType returns the ServerIpmType field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerIpmType() string {
	if o == nil || o.ServerIpmType == nil {
		var ret string
		return ret
	}
	return *o.ServerIpmType
}

// GetServerIpmTypeOk returns a tuple with the ServerIpmType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerIpmTypeOk() (*string, bool) {
	if o == nil || o.ServerIpmType == nil {
		return nil, false
	}
	return o.ServerIpmType, true
}

// HasServerIpmType returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerIpmType() bool {
	if o != nil && o.ServerIpmType != nil {
		return true
	}

	return false
}

// SetServerIpmType gets a reference to the given string and assigns it to the ServerIpmType field.
func (o *DnsServerDataData) SetServerIpmType(v string) {
	o.ServerIpmType = &v
}

// GetServerIsolated returns the ServerIsolated field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerIsolated() string {
	if o == nil || o.ServerIsolated == nil {
		var ret string
		return ret
	}
	return *o.ServerIsolated
}

// GetServerIsolatedOk returns a tuple with the ServerIsolated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerIsolatedOk() (*string, bool) {
	if o == nil || o.ServerIsolated == nil {
		return nil, false
	}
	return o.ServerIsolated, true
}

// HasServerIsolated returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerIsolated() bool {
	if o != nil && o.ServerIsolated != nil {
		return true
	}

	return false
}

// SetServerIsolated gets a reference to the given string and assigns it to the ServerIsolated field.
func (o *DnsServerDataData) SetServerIsolated(v string) {
	o.ServerIsolated = &v
}

// GetServerLdapDomain returns the ServerLdapDomain field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerLdapDomain() string {
	if o == nil || o.ServerLdapDomain == nil {
		var ret string
		return ret
	}
	return *o.ServerLdapDomain
}

// GetServerLdapDomainOk returns a tuple with the ServerLdapDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerLdapDomainOk() (*string, bool) {
	if o == nil || o.ServerLdapDomain == nil {
		return nil, false
	}
	return o.ServerLdapDomain, true
}

// HasServerLdapDomain returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerLdapDomain() bool {
	if o != nil && o.ServerLdapDomain != nil {
		return true
	}

	return false
}

// SetServerLdapDomain gets a reference to the given string and assigns it to the ServerLdapDomain field.
func (o *DnsServerDataData) SetServerLdapDomain(v string) {
	o.ServerLdapDomain = &v
}

// GetServerLdapUser returns the ServerLdapUser field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerLdapUser() string {
	if o == nil || o.ServerLdapUser == nil {
		var ret string
		return ret
	}
	return *o.ServerLdapUser
}

// GetServerLdapUserOk returns a tuple with the ServerLdapUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerLdapUserOk() (*string, bool) {
	if o == nil || o.ServerLdapUser == nil {
		return nil, false
	}
	return o.ServerLdapUser, true
}

// HasServerLdapUser returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerLdapUser() bool {
	if o != nil && o.ServerLdapUser != nil {
		return true
	}

	return false
}

// SetServerLdapUser gets a reference to the given string and assigns it to the ServerLdapUser field.
func (o *DnsServerDataData) SetServerLdapUser(v string) {
	o.ServerLdapUser = &v
}

// GetServerMultistatus returns the ServerMultistatus field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerMultistatus() string {
	if o == nil || o.ServerMultistatus == nil {
		var ret string
		return ret
	}
	return *o.ServerMultistatus
}

// GetServerMultistatusOk returns a tuple with the ServerMultistatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerMultistatusOk() (*string, bool) {
	if o == nil || o.ServerMultistatus == nil {
		return nil, false
	}
	return o.ServerMultistatus, true
}

// HasServerMultistatus returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerMultistatus() bool {
	if o != nil && o.ServerMultistatus != nil {
		return true
	}

	return false
}

// SetServerMultistatus gets a reference to the given string and assigns it to the ServerMultistatus field.
func (o *DnsServerDataData) SetServerMultistatus(v string) {
	o.ServerMultistatus = &v
}

// GetServerQuerylogState returns the ServerQuerylogState field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerQuerylogState() string {
	if o == nil || o.ServerQuerylogState == nil {
		var ret string
		return ret
	}
	return *o.ServerQuerylogState
}

// GetServerQuerylogStateOk returns a tuple with the ServerQuerylogState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerQuerylogStateOk() (*string, bool) {
	if o == nil || o.ServerQuerylogState == nil {
		return nil, false
	}
	return o.ServerQuerylogState, true
}

// HasServerQuerylogState returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerQuerylogState() bool {
	if o != nil && o.ServerQuerylogState != nil {
		return true
	}

	return false
}

// SetServerQuerylogState gets a reference to the given string and assigns it to the ServerQuerylogState field.
func (o *DnsServerDataData) SetServerQuerylogState(v string) {
	o.ServerQuerylogState = &v
}

// GetReverseProxyConf returns the ReverseProxyConf field value if set, zero value otherwise.
func (o *DnsServerDataData) GetReverseProxyConf() string {
	if o == nil || o.ReverseProxyConf == nil {
		var ret string
		return ret
	}
	return *o.ReverseProxyConf
}

// GetReverseProxyConfOk returns a tuple with the ReverseProxyConf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetReverseProxyConfOk() (*string, bool) {
	if o == nil || o.ReverseProxyConf == nil {
		return nil, false
	}
	return o.ReverseProxyConf, true
}

// HasReverseProxyConf returns a boolean if a field has been set.
func (o *DnsServerDataData) HasReverseProxyConf() bool {
	if o != nil && o.ReverseProxyConf != nil {
		return true
	}

	return false
}

// SetReverseProxyConf gets a reference to the given string and assigns it to the ReverseProxyConf field.
func (o *DnsServerDataData) SetReverseProxyConf(v string) {
	o.ReverseProxyConf = &v
}

// GetServerSnmpId returns the ServerSnmpId field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerSnmpId() string {
	if o == nil || o.ServerSnmpId == nil {
		var ret string
		return ret
	}
	return *o.ServerSnmpId
}

// GetServerSnmpIdOk returns a tuple with the ServerSnmpId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerSnmpIdOk() (*string, bool) {
	if o == nil || o.ServerSnmpId == nil {
		return nil, false
	}
	return o.ServerSnmpId, true
}

// HasServerSnmpId returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerSnmpId() bool {
	if o != nil && o.ServerSnmpId != nil {
		return true
	}

	return false
}

// SetServerSnmpId gets a reference to the given string and assigns it to the ServerSnmpId field.
func (o *DnsServerDataData) SetServerSnmpId(v string) {
	o.ServerSnmpId = &v
}

// GetServerStatEnabled returns the ServerStatEnabled field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerStatEnabled() string {
	if o == nil || o.ServerStatEnabled == nil {
		var ret string
		return ret
	}
	return *o.ServerStatEnabled
}

// GetServerStatEnabledOk returns a tuple with the ServerStatEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerStatEnabledOk() (*string, bool) {
	if o == nil || o.ServerStatEnabled == nil {
		return nil, false
	}
	return o.ServerStatEnabled, true
}

// HasServerStatEnabled returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerStatEnabled() bool {
	if o != nil && o.ServerStatEnabled != nil {
		return true
	}

	return false
}

// SetServerStatEnabled gets a reference to the given string and assigns it to the ServerStatEnabled field.
func (o *DnsServerDataData) SetServerStatEnabled(v string) {
	o.ServerStatEnabled = &v
}

// GetServerStatNiceness returns the ServerStatNiceness field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerStatNiceness() string {
	if o == nil || o.ServerStatNiceness == nil {
		var ret string
		return ret
	}
	return *o.ServerStatNiceness
}

// GetServerStatNicenessOk returns a tuple with the ServerStatNiceness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerStatNicenessOk() (*string, bool) {
	if o == nil || o.ServerStatNiceness == nil {
		return nil, false
	}
	return o.ServerStatNiceness, true
}

// HasServerStatNiceness returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerStatNiceness() bool {
	if o != nil && o.ServerStatNiceness != nil {
		return true
	}

	return false
}

// SetServerStatNiceness gets a reference to the given string and assigns it to the ServerStatNiceness field.
func (o *DnsServerDataData) SetServerStatNiceness(v string) {
	o.ServerStatNiceness = &v
}

// GetServerStatPeriod returns the ServerStatPeriod field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerStatPeriod() string {
	if o == nil || o.ServerStatPeriod == nil {
		var ret string
		return ret
	}
	return *o.ServerStatPeriod
}

// GetServerStatPeriodOk returns a tuple with the ServerStatPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerStatPeriodOk() (*string, bool) {
	if o == nil || o.ServerStatPeriod == nil {
		return nil, false
	}
	return o.ServerStatPeriod, true
}

// HasServerStatPeriod returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerStatPeriod() bool {
	if o != nil && o.ServerStatPeriod != nil {
		return true
	}

	return false
}

// SetServerStatPeriod gets a reference to the given string and assigns it to the ServerStatPeriod field.
func (o *DnsServerDataData) SetServerStatPeriod(v string) {
	o.ServerStatPeriod = &v
}

// GetServerStatTime returns the ServerStatTime field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerStatTime() string {
	if o == nil || o.ServerStatTime == nil {
		var ret string
		return ret
	}
	return *o.ServerStatTime
}

// GetServerStatTimeOk returns a tuple with the ServerStatTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerStatTimeOk() (*string, bool) {
	if o == nil || o.ServerStatTime == nil {
		return nil, false
	}
	return o.ServerStatTime, true
}

// HasServerStatTime returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerStatTime() bool {
	if o != nil && o.ServerStatTime != nil {
		return true
	}

	return false
}

// SetServerStatTime gets a reference to the given string and assigns it to the ServerStatTime field.
func (o *DnsServerDataData) SetServerStatTime(v string) {
	o.ServerStatTime = &v
}

// GetTotalSmartMembers returns the TotalSmartMembers field value if set, zero value otherwise.
func (o *DnsServerDataData) GetTotalSmartMembers() string {
	if o == nil || o.TotalSmartMembers == nil {
		var ret string
		return ret
	}
	return *o.TotalSmartMembers
}

// GetTotalSmartMembersOk returns a tuple with the TotalSmartMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetTotalSmartMembersOk() (*string, bool) {
	if o == nil || o.TotalSmartMembers == nil {
		return nil, false
	}
	return o.TotalSmartMembers, true
}

// HasTotalSmartMembers returns a boolean if a field has been set.
func (o *DnsServerDataData) HasTotalSmartMembers() bool {
	if o != nil && o.TotalSmartMembers != nil {
		return true
	}

	return false
}

// SetTotalSmartMembers gets a reference to the given string and assigns it to the TotalSmartMembers field.
func (o *DnsServerDataData) SetTotalSmartMembers(v string) {
	o.TotalSmartMembers = &v
}

// GetSmartArch returns the SmartArch field value if set, zero value otherwise.
func (o *DnsServerDataData) GetSmartArch() string {
	if o == nil || o.SmartArch == nil {
		var ret string
		return ret
	}
	return *o.SmartArch
}

// GetSmartArchOk returns a tuple with the SmartArch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetSmartArchOk() (*string, bool) {
	if o == nil || o.SmartArch == nil {
		return nil, false
	}
	return o.SmartArch, true
}

// HasSmartArch returns a boolean if a field has been set.
func (o *DnsServerDataData) HasSmartArch() bool {
	if o != nil && o.SmartArch != nil {
		return true
	}

	return false
}

// SetSmartArch gets a reference to the given string and assigns it to the SmartArch field.
func (o *DnsServerDataData) SetSmartArch(v string) {
	o.SmartArch = &v
}

// GetSmartMembersName returns the SmartMembersName field value if set, zero value otherwise.
func (o *DnsServerDataData) GetSmartMembersName() string {
	if o == nil || o.SmartMembersName == nil {
		var ret string
		return ret
	}
	return *o.SmartMembersName
}

// GetSmartMembersNameOk returns a tuple with the SmartMembersName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetSmartMembersNameOk() (*string, bool) {
	if o == nil || o.SmartMembersName == nil {
		return nil, false
	}
	return o.SmartMembersName, true
}

// HasSmartMembersName returns a boolean if a field has been set.
func (o *DnsServerDataData) HasSmartMembersName() bool {
	if o != nil && o.SmartMembersName != nil {
		return true
	}

	return false
}

// SetSmartMembersName gets a reference to the given string and assigns it to the SmartMembersName field.
func (o *DnsServerDataData) SetSmartMembersName(v string) {
	o.SmartMembersName = &v
}

// GetSmartParentArch returns the SmartParentArch field value if set, zero value otherwise.
func (o *DnsServerDataData) GetSmartParentArch() string {
	if o == nil || o.SmartParentArch == nil {
		var ret string
		return ret
	}
	return *o.SmartParentArch
}

// GetSmartParentArchOk returns a tuple with the SmartParentArch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetSmartParentArchOk() (*string, bool) {
	if o == nil || o.SmartParentArch == nil {
		return nil, false
	}
	return o.SmartParentArch, true
}

// HasSmartParentArch returns a boolean if a field has been set.
func (o *DnsServerDataData) HasSmartParentArch() bool {
	if o != nil && o.SmartParentArch != nil {
		return true
	}

	return false
}

// SetSmartParentArch gets a reference to the given string and assigns it to the SmartParentArch field.
func (o *DnsServerDataData) SetSmartParentArch(v string) {
	o.SmartParentArch = &v
}

// GetSmartParentId returns the SmartParentId field value if set, zero value otherwise.
func (o *DnsServerDataData) GetSmartParentId() string {
	if o == nil || o.SmartParentId == nil {
		var ret string
		return ret
	}
	return *o.SmartParentId
}

// GetSmartParentIdOk returns a tuple with the SmartParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetSmartParentIdOk() (*string, bool) {
	if o == nil || o.SmartParentId == nil {
		return nil, false
	}
	return o.SmartParentId, true
}

// HasSmartParentId returns a boolean if a field has been set.
func (o *DnsServerDataData) HasSmartParentId() bool {
	if o != nil && o.SmartParentId != nil {
		return true
	}

	return false
}

// SetSmartParentId gets a reference to the given string and assigns it to the SmartParentId field.
func (o *DnsServerDataData) SetSmartParentId(v string) {
	o.SmartParentId = &v
}

// GetSmartParentName returns the SmartParentName field value if set, zero value otherwise.
func (o *DnsServerDataData) GetSmartParentName() string {
	if o == nil || o.SmartParentName == nil {
		var ret string
		return ret
	}
	return *o.SmartParentName
}

// GetSmartParentNameOk returns a tuple with the SmartParentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetSmartParentNameOk() (*string, bool) {
	if o == nil || o.SmartParentName == nil {
		return nil, false
	}
	return o.SmartParentName, true
}

// HasSmartParentName returns a boolean if a field has been set.
func (o *DnsServerDataData) HasSmartParentName() bool {
	if o != nil && o.SmartParentName != nil {
		return true
	}

	return false
}

// SetSmartParentName gets a reference to the given string and assigns it to the SmartParentName field.
func (o *DnsServerDataData) SetSmartParentName(v string) {
	o.SmartParentName = &v
}

// GetSmartPublicNsList returns the SmartPublicNsList field value if set, zero value otherwise.
func (o *DnsServerDataData) GetSmartPublicNsList() string {
	if o == nil || o.SmartPublicNsList == nil {
		var ret string
		return ret
	}
	return *o.SmartPublicNsList
}

// GetSmartPublicNsListOk returns a tuple with the SmartPublicNsList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetSmartPublicNsListOk() (*string, bool) {
	if o == nil || o.SmartPublicNsList == nil {
		return nil, false
	}
	return o.SmartPublicNsList, true
}

// HasSmartPublicNsList returns a boolean if a field has been set.
func (o *DnsServerDataData) HasSmartPublicNsList() bool {
	if o != nil && o.SmartPublicNsList != nil {
		return true
	}

	return false
}

// SetSmartPublicNsList gets a reference to the given string and assigns it to the SmartPublicNsList field.
func (o *DnsServerDataData) SetSmartPublicNsList(v string) {
	o.SmartPublicNsList = &v
}

// GetServerWindnsPort returns the ServerWindnsPort field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerWindnsPort() string {
	if o == nil || o.ServerWindnsPort == nil {
		var ret string
		return ret
	}
	return *o.ServerWindnsPort
}

// GetServerWindnsPortOk returns a tuple with the ServerWindnsPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerWindnsPortOk() (*string, bool) {
	if o == nil || o.ServerWindnsPort == nil {
		return nil, false
	}
	return o.ServerWindnsPort, true
}

// HasServerWindnsPort returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerWindnsPort() bool {
	if o != nil && o.ServerWindnsPort != nil {
		return true
	}

	return false
}

// SetServerWindnsPort gets a reference to the given string and assigns it to the ServerWindnsPort field.
func (o *DnsServerDataData) SetServerWindnsPort(v string) {
	o.ServerWindnsPort = &v
}

// GetServerWindnsProtocol returns the ServerWindnsProtocol field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerWindnsProtocol() string {
	if o == nil || o.ServerWindnsProtocol == nil {
		var ret string
		return ret
	}
	return *o.ServerWindnsProtocol
}

// GetServerWindnsProtocolOk returns a tuple with the ServerWindnsProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerWindnsProtocolOk() (*string, bool) {
	if o == nil || o.ServerWindnsProtocol == nil {
		return nil, false
	}
	return o.ServerWindnsProtocol, true
}

// HasServerWindnsProtocol returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerWindnsProtocol() bool {
	if o != nil && o.ServerWindnsProtocol != nil {
		return true
	}

	return false
}

// SetServerWindnsProtocol gets a reference to the given string and assigns it to the ServerWindnsProtocol field.
func (o *DnsServerDataData) SetServerWindnsProtocol(v string) {
	o.ServerWindnsProtocol = &v
}

// GetServerWindnsUseSsl returns the ServerWindnsUseSsl field value if set, zero value otherwise.
func (o *DnsServerDataData) GetServerWindnsUseSsl() string {
	if o == nil || o.ServerWindnsUseSsl == nil {
		var ret string
		return ret
	}
	return *o.ServerWindnsUseSsl
}

// GetServerWindnsUseSslOk returns a tuple with the ServerWindnsUseSsl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsServerDataData) GetServerWindnsUseSslOk() (*string, bool) {
	if o == nil || o.ServerWindnsUseSsl == nil {
		return nil, false
	}
	return o.ServerWindnsUseSsl, true
}

// HasServerWindnsUseSsl returns a boolean if a field has been set.
func (o *DnsServerDataData) HasServerWindnsUseSsl() bool {
	if o != nil && o.ServerWindnsUseSsl != nil {
		return true
	}

	return false
}

// SetServerWindnsUseSsl gets a reference to the given string and assigns it to the ServerWindnsUseSsl field.
func (o *DnsServerDataData) SetServerWindnsUseSsl(v string) {
	o.ServerWindnsUseSsl = &v
}

func (o DnsServerDataData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AdDomain != nil {
		toSerialize["ad_domain"] = o.AdDomain
	}
	if o.AdUser != nil {
		toSerialize["ad_user"] = o.AdUser
	}
	if o.ServerAwsKeyid != nil {
		toSerialize["server_aws_keyid"] = o.ServerAwsKeyid
	}
	if o.AzGroup != nil {
		toSerialize["az_group"] = o.AzGroup
	}
	if o.AzKeyid != nil {
		toSerialize["az_keyid"] = o.AzKeyid
	}
	if o.AzSubscriptionid != nil {
		toSerialize["az_subscriptionid"] = o.AzSubscriptionid
	}
	if o.AzTenantid != nil {
		toSerialize["az_tenantid"] = o.AzTenantid
	}
	if o.ServerAllowQuery != nil {
		toSerialize["server_allow_query"] = o.ServerAllowQuery
	}
	if o.ServerAllowQueryCache != nil {
		toSerialize["server_allow_query_cache"] = o.ServerAllowQueryCache
	}
	if o.ServerAllowRecursion != nil {
		toSerialize["server_allow_recursion"] = o.ServerAllowRecursion
	}
	if o.ServerAllowTransfer != nil {
		toSerialize["server_allow_transfer"] = o.ServerAllowTransfer
	}
	if o.ServerAlsoNotify != nil {
		toSerialize["server_also_notify"] = o.ServerAlsoNotify
	}
	if o.ServerClassName != nil {
		toSerialize["server_class_name"] = o.ServerClassName
	}
	if o.ServerClassParameters != nil {
		toSerialize["server_class_parameters"] = o.ServerClassParameters
	}
	if o.ServerCloud != nil {
		toSerialize["server_cloud"] = o.ServerCloud
	}
	if o.ServerComment != nil {
		toSerialize["server_comment"] = o.ServerComment
	}
	if o.ServerForceHybrid != nil {
		toSerialize["server_force_hybrid"] = o.ServerForceHybrid
	}
	if o.ServerForward != nil {
		toSerialize["server_forward"] = o.ServerForward
	}
	if o.ServerForwarders != nil {
		toSerialize["server_forwarders"] = o.ServerForwarders
	}
	if o.ServerHybrid != nil {
		toSerialize["server_hybrid"] = o.ServerHybrid
	}
	if o.ServerId != nil {
		toSerialize["server_id"] = o.ServerId
	}
	if o.ServerKeyName != nil {
		toSerialize["server_key_name"] = o.ServerKeyName
	}
	if o.ServerKeyProto != nil {
		toSerialize["server_key_proto"] = o.ServerKeyProto
	}
	if o.ServerKeyValue != nil {
		toSerialize["server_key_value"] = o.ServerKeyValue
	}
	if o.ServerName != nil {
		toSerialize["server_name"] = o.ServerName
	}
	if o.ServerNotify != nil {
		toSerialize["server_notify"] = o.ServerNotify
	}
	if o.ServerRecursion != nil {
		toSerialize["server_recursion"] = o.ServerRecursion
	}
	if o.ServerRole != nil {
		toSerialize["server_role"] = o.ServerRole
	}
	if o.ServerState != nil {
		toSerialize["server_state"] = o.ServerState
	}
	if o.ServerSynching != nil {
		toSerialize["server_synching"] = o.ServerSynching
	}
	if o.ServerType != nil {
		toSerialize["server_type"] = o.ServerType
	}
	if o.ServerVersion != nil {
		toSerialize["server_version"] = o.ServerVersion
	}
	if o.ServerBlastEnabled != nil {
		toSerialize["server_blast_enabled"] = o.ServerBlastEnabled
	}
	if o.ServerBlastStatus != nil {
		toSerialize["server_blast_status"] = o.ServerBlastStatus
	}
	if o.ServerGslbSupported != nil {
		toSerialize["server_gslb_supported"] = o.ServerGslbSupported
	}
	if o.ServerGuardianGuiManagementSupported != nil {
		toSerialize["server_guardian_gui_management_supported"] = o.ServerGuardianGuiManagementSupported
	}
	if o.ServerGuardianSupported != nil {
		toSerialize["server_guardian_supported"] = o.ServerGuardianSupported
	}
	if o.ServerDnssecValidation != nil {
		toSerialize["server_dnssec_validation"] = o.ServerDnssecValidation
	}
	if o.ServerGssEnabled != nil {
		toSerialize["server_gss_enabled"] = o.ServerGssEnabled
	}
	if o.ServerGssKeytabId != nil {
		toSerialize["server_gss_keytab_id"] = o.ServerGssKeytabId
	}
	if o.ServerAddr != nil {
		toSerialize["server_addr"] = o.ServerAddr
	}
	if o.ServerIpmLogin != nil {
		toSerialize["server_ipm_login"] = o.ServerIpmLogin
	}
	if o.ServerIpmIsPackage != nil {
		toSerialize["server_ipm_is_package"] = o.ServerIpmIsPackage
	}
	if o.ServerIpmProtocol != nil {
		toSerialize["server_ipm_protocol"] = o.ServerIpmProtocol
	}
	if o.ServerIpmType != nil {
		toSerialize["server_ipm_type"] = o.ServerIpmType
	}
	if o.ServerIsolated != nil {
		toSerialize["server_isolated"] = o.ServerIsolated
	}
	if o.ServerLdapDomain != nil {
		toSerialize["server_ldap_domain"] = o.ServerLdapDomain
	}
	if o.ServerLdapUser != nil {
		toSerialize["server_ldap_user"] = o.ServerLdapUser
	}
	if o.ServerMultistatus != nil {
		toSerialize["server_multistatus"] = o.ServerMultistatus
	}
	if o.ServerQuerylogState != nil {
		toSerialize["server_querylog_state"] = o.ServerQuerylogState
	}
	if o.ReverseProxyConf != nil {
		toSerialize["reverse_proxy_conf"] = o.ReverseProxyConf
	}
	if o.ServerSnmpId != nil {
		toSerialize["server_snmp_id"] = o.ServerSnmpId
	}
	if o.ServerStatEnabled != nil {
		toSerialize["server_stat_enabled"] = o.ServerStatEnabled
	}
	if o.ServerStatNiceness != nil {
		toSerialize["server_stat_niceness"] = o.ServerStatNiceness
	}
	if o.ServerStatPeriod != nil {
		toSerialize["server_stat_period"] = o.ServerStatPeriod
	}
	if o.ServerStatTime != nil {
		toSerialize["server_stat_time"] = o.ServerStatTime
	}
	if o.TotalSmartMembers != nil {
		toSerialize["total_smart_members"] = o.TotalSmartMembers
	}
	if o.SmartArch != nil {
		toSerialize["smart_arch"] = o.SmartArch
	}
	if o.SmartMembersName != nil {
		toSerialize["smart_members_name"] = o.SmartMembersName
	}
	if o.SmartParentArch != nil {
		toSerialize["smart_parent_arch"] = o.SmartParentArch
	}
	if o.SmartParentId != nil {
		toSerialize["smart_parent_id"] = o.SmartParentId
	}
	if o.SmartParentName != nil {
		toSerialize["smart_parent_name"] = o.SmartParentName
	}
	if o.SmartPublicNsList != nil {
		toSerialize["smart_public_ns_list"] = o.SmartPublicNsList
	}
	if o.ServerWindnsPort != nil {
		toSerialize["server_windns_port"] = o.ServerWindnsPort
	}
	if o.ServerWindnsProtocol != nil {
		toSerialize["server_windns_protocol"] = o.ServerWindnsProtocol
	}
	if o.ServerWindnsUseSsl != nil {
		toSerialize["server_windns_use_ssl"] = o.ServerWindnsUseSsl
	}
	return json.Marshal(toSerialize)
}

type NullableDnsServerDataData struct {
	value *DnsServerDataData
	isSet bool
}

func (v NullableDnsServerDataData) Get() *DnsServerDataData {
	return v.value
}

func (v *NullableDnsServerDataData) Set(val *DnsServerDataData) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsServerDataData) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsServerDataData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsServerDataData(val *DnsServerDataData) *NullableDnsServerDataData {
	return &NullableDnsServerDataData{value: val, isSet: true}
}

func (v NullableDnsServerDataData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsServerDataData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


