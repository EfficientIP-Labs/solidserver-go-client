/*
SOLIDserver API

OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2024 EfficientIP</p><p><em>All specifications and information regarding the products in this document are subject to change without notice and should not be construed as a commitment by EfficientIP. EfficientIP assumes no responsibility or liability for any mistakes or inaccuracies that may appear in this document. All statements and recommendations in this document are believed to be accurate but are presented without warranty. Users must take full responsibility for their application of any product.</em></p><p><em>This document aims at detailing EfficientIP proprietary solutions. As our solutions rely on several third-party products, created by other companies or organizations, it may redirect readers to third-party websites and documentation for further information. In such a case, EfficientIP cannot be liable or expected to provide said information on products they do maintain or created.</em></p><p>Generated (Friday 4th of October 2024 03:41:11 PM)</p>

API version: 2.0
Contact: support-api@efficientip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// checks if the DnsViewEditInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DnsViewEditInput{}

// DnsViewEditInput struct for DnsViewEditInput
type DnsViewEditInput struct {
	// The database identifier (ID) of the DNS server, a unique numeric key value automatically incremented when you add a DNS server. Use the ID to specify the DNS server of your choice.
	ServerId *int32 `json:"server_id,omitempty"`
	// The name of the DNS server.
	ServerName *string `json:"server_name,omitempty"`
	// The database identifier (ID) of the DNS view, a unique numeric key value automatically incremented when you add a DNS view. Use the ID to specify the DNS view of your choice.
	ViewId *int32 `json:"view_id,omitempty"`
	// The name of the DNS view, each DNS view must have a unique name.
	ViewName *string `json:"view_name,omitempty"`
	// The IP address of the DNS server.
	ServerHostaddr *string `json:"server_hostaddr,omitempty"`
	// The ACL values associated with the allow-query configuration of the DNS view, as follows: <b>&lt;value1&gt;;&lt;value2&gt;;... </b>. Values may include IP and network addresses, the name of TSIG keys and ACLs, preceded by <b>!</b> if the access is denied.
	ViewAllowQuery *string `json:"view_allow_query,omitempty"`
	// The ACL values associated with the allow-recursion configuration of the DNS view, as follows: <b>&lt;value1&gt;;&lt;value2&gt;;... </b>. Values may include IP and network addresses, the name of TSIG keys and ACLs, preceded by <b>!</b> if the access is denied.
	ViewAllowRecursion *string `json:"view_allow_recursion,omitempty"`
	// The ACL values associated with the allow-transfer configuration of the DNS view, as follows: <b>&lt;value1&gt;;&lt;value2&gt;;... </b>. Values may include IP and network addresses, the name of TSIG keys and ACLs, preceded by <b>!</b> if the access is denied.
	ViewAllowTransfer *string `json:"view_allow_transfer,omitempty"`
	// The ACL values associated with the match clients configuration of the DNS view, as follows: <b>&lt;value1&gt;;&lt;value2&gt;;...</b> . Values may include IP and network addresses, the name of TSIG keys and ACLs, preceded by <b>!</b> if the access is denied.
	ViewMatchClients *string `json:"view_match_clients,omitempty"`
	// The ACL values associated with the match destination configuration of the DNS view, as follows: <b>&lt;value1&gt;;&lt;value2&gt;;...</b> . Values may include IP and network addresses, the name of TSIG keys and ACLs, preceded by <b>!</b> if the access is denied.
	ViewMatchTo *string `json:"view_match_to,omitempty"`
	// The level of the DNS view, where <b>0</b> represents the highest level in the views hierarchy. The parameters <b>dnsview_match_client</b> and <b>view_match_to</b> of each view in a server are reviewed following this order.
	ViewOrder *int32 `json:"view_order,omitempty"`
	// The recursion status of the DNS view:<table><caption>view_recursion possible values</caption><br/><thead><tr><th>Status</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >no</td><td >The view only provides iterative query behavior - normally resulting in a referral. If the answer to the query already exists in the cache it will be returned whatever the value of this statement.</td></tr><tr><td >yes</td><td >The view always provides recursive query behavior if requested by the client.</td></tr></tbody></table></p><br/>
	ViewRecursion *string `json:"view_recursion,omitempty"`
	// class parameters you want to delete from the object
	ClassParametersToDelete []string `json:"class_parameters_to_delete,omitempty"`
	// The name of the class to apply to the object you are editing. You must specify the class file directory, e.g. <b>my_directory/my_class.class</b> . You cannot use the classes <b>global</b> and <b>default</b>, they are reserved by the system.
	ViewClassName *string `json:"view_class_name,omitempty"`
	// class parameters in json format
	ViewClassParameters []ApiClassParameterInputEntry `json:"view_class_parameters,omitempty"`
	// A way to bypass <b>(accept) </b>any enabled rule that would return warning messages. If the service returns an error message, you cannot bypass the enabled rules.
	Warnings *string `json:"warnings,omitempty"`
}

// NewDnsViewEditInput instantiates a new DnsViewEditInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnsViewEditInput() *DnsViewEditInput {
	this := DnsViewEditInput{}
	return &this
}

// NewDnsViewEditInputWithDefaults instantiates a new DnsViewEditInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsViewEditInputWithDefaults() *DnsViewEditInput {
	this := DnsViewEditInput{}
	return &this
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *DnsViewEditInput) GetServerId() int32 {
	if o == nil || IsNil(o.ServerId) {
		var ret int32
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsViewEditInput) GetServerIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ServerId) {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *DnsViewEditInput) HasServerId() bool {
	if o != nil && !IsNil(o.ServerId) {
		return true
	}

	return false
}

// SetServerId gets a reference to the given int32 and assigns it to the ServerId field.
func (o *DnsViewEditInput) SetServerId(v int32) {
	o.ServerId = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *DnsViewEditInput) GetServerName() string {
	if o == nil || IsNil(o.ServerName) {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsViewEditInput) GetServerNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServerName) {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *DnsViewEditInput) HasServerName() bool {
	if o != nil && !IsNil(o.ServerName) {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *DnsViewEditInput) SetServerName(v string) {
	o.ServerName = &v
}

// GetViewId returns the ViewId field value if set, zero value otherwise.
func (o *DnsViewEditInput) GetViewId() int32 {
	if o == nil || IsNil(o.ViewId) {
		var ret int32
		return ret
	}
	return *o.ViewId
}

// GetViewIdOk returns a tuple with the ViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsViewEditInput) GetViewIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ViewId) {
		return nil, false
	}
	return o.ViewId, true
}

// HasViewId returns a boolean if a field has been set.
func (o *DnsViewEditInput) HasViewId() bool {
	if o != nil && !IsNil(o.ViewId) {
		return true
	}

	return false
}

// SetViewId gets a reference to the given int32 and assigns it to the ViewId field.
func (o *DnsViewEditInput) SetViewId(v int32) {
	o.ViewId = &v
}

// GetViewName returns the ViewName field value if set, zero value otherwise.
func (o *DnsViewEditInput) GetViewName() string {
	if o == nil || IsNil(o.ViewName) {
		var ret string
		return ret
	}
	return *o.ViewName
}

// GetViewNameOk returns a tuple with the ViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsViewEditInput) GetViewNameOk() (*string, bool) {
	if o == nil || IsNil(o.ViewName) {
		return nil, false
	}
	return o.ViewName, true
}

// HasViewName returns a boolean if a field has been set.
func (o *DnsViewEditInput) HasViewName() bool {
	if o != nil && !IsNil(o.ViewName) {
		return true
	}

	return false
}

// SetViewName gets a reference to the given string and assigns it to the ViewName field.
func (o *DnsViewEditInput) SetViewName(v string) {
	o.ViewName = &v
}

// GetServerHostaddr returns the ServerHostaddr field value if set, zero value otherwise.
func (o *DnsViewEditInput) GetServerHostaddr() string {
	if o == nil || IsNil(o.ServerHostaddr) {
		var ret string
		return ret
	}
	return *o.ServerHostaddr
}

// GetServerHostaddrOk returns a tuple with the ServerHostaddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsViewEditInput) GetServerHostaddrOk() (*string, bool) {
	if o == nil || IsNil(o.ServerHostaddr) {
		return nil, false
	}
	return o.ServerHostaddr, true
}

// HasServerHostaddr returns a boolean if a field has been set.
func (o *DnsViewEditInput) HasServerHostaddr() bool {
	if o != nil && !IsNil(o.ServerHostaddr) {
		return true
	}

	return false
}

// SetServerHostaddr gets a reference to the given string and assigns it to the ServerHostaddr field.
func (o *DnsViewEditInput) SetServerHostaddr(v string) {
	o.ServerHostaddr = &v
}

// GetViewAllowQuery returns the ViewAllowQuery field value if set, zero value otherwise.
func (o *DnsViewEditInput) GetViewAllowQuery() string {
	if o == nil || IsNil(o.ViewAllowQuery) {
		var ret string
		return ret
	}
	return *o.ViewAllowQuery
}

// GetViewAllowQueryOk returns a tuple with the ViewAllowQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsViewEditInput) GetViewAllowQueryOk() (*string, bool) {
	if o == nil || IsNil(o.ViewAllowQuery) {
		return nil, false
	}
	return o.ViewAllowQuery, true
}

// HasViewAllowQuery returns a boolean if a field has been set.
func (o *DnsViewEditInput) HasViewAllowQuery() bool {
	if o != nil && !IsNil(o.ViewAllowQuery) {
		return true
	}

	return false
}

// SetViewAllowQuery gets a reference to the given string and assigns it to the ViewAllowQuery field.
func (o *DnsViewEditInput) SetViewAllowQuery(v string) {
	o.ViewAllowQuery = &v
}

// GetViewAllowRecursion returns the ViewAllowRecursion field value if set, zero value otherwise.
func (o *DnsViewEditInput) GetViewAllowRecursion() string {
	if o == nil || IsNil(o.ViewAllowRecursion) {
		var ret string
		return ret
	}
	return *o.ViewAllowRecursion
}

// GetViewAllowRecursionOk returns a tuple with the ViewAllowRecursion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsViewEditInput) GetViewAllowRecursionOk() (*string, bool) {
	if o == nil || IsNil(o.ViewAllowRecursion) {
		return nil, false
	}
	return o.ViewAllowRecursion, true
}

// HasViewAllowRecursion returns a boolean if a field has been set.
func (o *DnsViewEditInput) HasViewAllowRecursion() bool {
	if o != nil && !IsNil(o.ViewAllowRecursion) {
		return true
	}

	return false
}

// SetViewAllowRecursion gets a reference to the given string and assigns it to the ViewAllowRecursion field.
func (o *DnsViewEditInput) SetViewAllowRecursion(v string) {
	o.ViewAllowRecursion = &v
}

// GetViewAllowTransfer returns the ViewAllowTransfer field value if set, zero value otherwise.
func (o *DnsViewEditInput) GetViewAllowTransfer() string {
	if o == nil || IsNil(o.ViewAllowTransfer) {
		var ret string
		return ret
	}
	return *o.ViewAllowTransfer
}

// GetViewAllowTransferOk returns a tuple with the ViewAllowTransfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsViewEditInput) GetViewAllowTransferOk() (*string, bool) {
	if o == nil || IsNil(o.ViewAllowTransfer) {
		return nil, false
	}
	return o.ViewAllowTransfer, true
}

// HasViewAllowTransfer returns a boolean if a field has been set.
func (o *DnsViewEditInput) HasViewAllowTransfer() bool {
	if o != nil && !IsNil(o.ViewAllowTransfer) {
		return true
	}

	return false
}

// SetViewAllowTransfer gets a reference to the given string and assigns it to the ViewAllowTransfer field.
func (o *DnsViewEditInput) SetViewAllowTransfer(v string) {
	o.ViewAllowTransfer = &v
}

// GetViewMatchClients returns the ViewMatchClients field value if set, zero value otherwise.
func (o *DnsViewEditInput) GetViewMatchClients() string {
	if o == nil || IsNil(o.ViewMatchClients) {
		var ret string
		return ret
	}
	return *o.ViewMatchClients
}

// GetViewMatchClientsOk returns a tuple with the ViewMatchClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsViewEditInput) GetViewMatchClientsOk() (*string, bool) {
	if o == nil || IsNil(o.ViewMatchClients) {
		return nil, false
	}
	return o.ViewMatchClients, true
}

// HasViewMatchClients returns a boolean if a field has been set.
func (o *DnsViewEditInput) HasViewMatchClients() bool {
	if o != nil && !IsNil(o.ViewMatchClients) {
		return true
	}

	return false
}

// SetViewMatchClients gets a reference to the given string and assigns it to the ViewMatchClients field.
func (o *DnsViewEditInput) SetViewMatchClients(v string) {
	o.ViewMatchClients = &v
}

// GetViewMatchTo returns the ViewMatchTo field value if set, zero value otherwise.
func (o *DnsViewEditInput) GetViewMatchTo() string {
	if o == nil || IsNil(o.ViewMatchTo) {
		var ret string
		return ret
	}
	return *o.ViewMatchTo
}

// GetViewMatchToOk returns a tuple with the ViewMatchTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsViewEditInput) GetViewMatchToOk() (*string, bool) {
	if o == nil || IsNil(o.ViewMatchTo) {
		return nil, false
	}
	return o.ViewMatchTo, true
}

// HasViewMatchTo returns a boolean if a field has been set.
func (o *DnsViewEditInput) HasViewMatchTo() bool {
	if o != nil && !IsNil(o.ViewMatchTo) {
		return true
	}

	return false
}

// SetViewMatchTo gets a reference to the given string and assigns it to the ViewMatchTo field.
func (o *DnsViewEditInput) SetViewMatchTo(v string) {
	o.ViewMatchTo = &v
}

// GetViewOrder returns the ViewOrder field value if set, zero value otherwise.
func (o *DnsViewEditInput) GetViewOrder() int32 {
	if o == nil || IsNil(o.ViewOrder) {
		var ret int32
		return ret
	}
	return *o.ViewOrder
}

// GetViewOrderOk returns a tuple with the ViewOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsViewEditInput) GetViewOrderOk() (*int32, bool) {
	if o == nil || IsNil(o.ViewOrder) {
		return nil, false
	}
	return o.ViewOrder, true
}

// HasViewOrder returns a boolean if a field has been set.
func (o *DnsViewEditInput) HasViewOrder() bool {
	if o != nil && !IsNil(o.ViewOrder) {
		return true
	}

	return false
}

// SetViewOrder gets a reference to the given int32 and assigns it to the ViewOrder field.
func (o *DnsViewEditInput) SetViewOrder(v int32) {
	o.ViewOrder = &v
}

// GetViewRecursion returns the ViewRecursion field value if set, zero value otherwise.
func (o *DnsViewEditInput) GetViewRecursion() string {
	if o == nil || IsNil(o.ViewRecursion) {
		var ret string
		return ret
	}
	return *o.ViewRecursion
}

// GetViewRecursionOk returns a tuple with the ViewRecursion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsViewEditInput) GetViewRecursionOk() (*string, bool) {
	if o == nil || IsNil(o.ViewRecursion) {
		return nil, false
	}
	return o.ViewRecursion, true
}

// HasViewRecursion returns a boolean if a field has been set.
func (o *DnsViewEditInput) HasViewRecursion() bool {
	if o != nil && !IsNil(o.ViewRecursion) {
		return true
	}

	return false
}

// SetViewRecursion gets a reference to the given string and assigns it to the ViewRecursion field.
func (o *DnsViewEditInput) SetViewRecursion(v string) {
	o.ViewRecursion = &v
}

// GetClassParametersToDelete returns the ClassParametersToDelete field value if set, zero value otherwise.
func (o *DnsViewEditInput) GetClassParametersToDelete() []string {
	if o == nil || IsNil(o.ClassParametersToDelete) {
		var ret []string
		return ret
	}
	return o.ClassParametersToDelete
}

// GetClassParametersToDeleteOk returns a tuple with the ClassParametersToDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsViewEditInput) GetClassParametersToDeleteOk() ([]string, bool) {
	if o == nil || IsNil(o.ClassParametersToDelete) {
		return nil, false
	}
	return o.ClassParametersToDelete, true
}

// HasClassParametersToDelete returns a boolean if a field has been set.
func (o *DnsViewEditInput) HasClassParametersToDelete() bool {
	if o != nil && !IsNil(o.ClassParametersToDelete) {
		return true
	}

	return false
}

// SetClassParametersToDelete gets a reference to the given []string and assigns it to the ClassParametersToDelete field.
func (o *DnsViewEditInput) SetClassParametersToDelete(v []string) {
	o.ClassParametersToDelete = v
}

// GetViewClassName returns the ViewClassName field value if set, zero value otherwise.
func (o *DnsViewEditInput) GetViewClassName() string {
	if o == nil || IsNil(o.ViewClassName) {
		var ret string
		return ret
	}
	return *o.ViewClassName
}

// GetViewClassNameOk returns a tuple with the ViewClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsViewEditInput) GetViewClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.ViewClassName) {
		return nil, false
	}
	return o.ViewClassName, true
}

// HasViewClassName returns a boolean if a field has been set.
func (o *DnsViewEditInput) HasViewClassName() bool {
	if o != nil && !IsNil(o.ViewClassName) {
		return true
	}

	return false
}

// SetViewClassName gets a reference to the given string and assigns it to the ViewClassName field.
func (o *DnsViewEditInput) SetViewClassName(v string) {
	o.ViewClassName = &v
}

// GetViewClassParameters returns the ViewClassParameters field value if set, zero value otherwise.
func (o *DnsViewEditInput) GetViewClassParameters() []ApiClassParameterInputEntry {
	if o == nil || IsNil(o.ViewClassParameters) {
		var ret []ApiClassParameterInputEntry
		return ret
	}
	return o.ViewClassParameters
}

// GetViewClassParametersOk returns a tuple with the ViewClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsViewEditInput) GetViewClassParametersOk() ([]ApiClassParameterInputEntry, bool) {
	if o == nil || IsNil(o.ViewClassParameters) {
		return nil, false
	}
	return o.ViewClassParameters, true
}

// HasViewClassParameters returns a boolean if a field has been set.
func (o *DnsViewEditInput) HasViewClassParameters() bool {
	if o != nil && !IsNil(o.ViewClassParameters) {
		return true
	}

	return false
}

// SetViewClassParameters gets a reference to the given []ApiClassParameterInputEntry and assigns it to the ViewClassParameters field.
func (o *DnsViewEditInput) SetViewClassParameters(v []ApiClassParameterInputEntry) {
	o.ViewClassParameters = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *DnsViewEditInput) GetWarnings() string {
	if o == nil || IsNil(o.Warnings) {
		var ret string
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsViewEditInput) GetWarningsOk() (*string, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *DnsViewEditInput) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given string and assigns it to the Warnings field.
func (o *DnsViewEditInput) SetWarnings(v string) {
	o.Warnings = &v
}

func (o DnsViewEditInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DnsViewEditInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ServerId) {
		toSerialize["server_id"] = o.ServerId
	}
	if !IsNil(o.ServerName) {
		toSerialize["server_name"] = o.ServerName
	}
	if !IsNil(o.ViewId) {
		toSerialize["view_id"] = o.ViewId
	}
	if !IsNil(o.ViewName) {
		toSerialize["view_name"] = o.ViewName
	}
	if !IsNil(o.ServerHostaddr) {
		toSerialize["server_hostaddr"] = o.ServerHostaddr
	}
	if !IsNil(o.ViewAllowQuery) {
		toSerialize["view_allow_query"] = o.ViewAllowQuery
	}
	if !IsNil(o.ViewAllowRecursion) {
		toSerialize["view_allow_recursion"] = o.ViewAllowRecursion
	}
	if !IsNil(o.ViewAllowTransfer) {
		toSerialize["view_allow_transfer"] = o.ViewAllowTransfer
	}
	if !IsNil(o.ViewMatchClients) {
		toSerialize["view_match_clients"] = o.ViewMatchClients
	}
	if !IsNil(o.ViewMatchTo) {
		toSerialize["view_match_to"] = o.ViewMatchTo
	}
	if !IsNil(o.ViewOrder) {
		toSerialize["view_order"] = o.ViewOrder
	}
	if !IsNil(o.ViewRecursion) {
		toSerialize["view_recursion"] = o.ViewRecursion
	}
	if !IsNil(o.ClassParametersToDelete) {
		toSerialize["class_parameters_to_delete"] = o.ClassParametersToDelete
	}
	if !IsNil(o.ViewClassName) {
		toSerialize["view_class_name"] = o.ViewClassName
	}
	if !IsNil(o.ViewClassParameters) {
		toSerialize["view_class_parameters"] = o.ViewClassParameters
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableDnsViewEditInput struct {
	value *DnsViewEditInput
	isSet bool
}

func (v NullableDnsViewEditInput) Get() *DnsViewEditInput {
	return v.value
}

func (v *NullableDnsViewEditInput) Set(val *DnsViewEditInput) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsViewEditInput) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsViewEditInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsViewEditInput(val *DnsViewEditInput) *NullableDnsViewEditInput {
	return &NullableDnsViewEditInput{value: val, isSet: true}
}

func (v NullableDnsViewEditInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsViewEditInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
