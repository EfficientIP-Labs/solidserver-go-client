/*
SOLIDserver API

OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2024 EfficientIP</p><p><em>All specifications and information regarding the products in this document are subject to change without notice and should not be construed as a commitment by EfficientIP. EfficientIP assumes no responsibility or liability for any mistakes or inaccuracies that may appear in this document. All statements and recommendations in this document are believed to be accurate but are presented without warranty. Users must take full responsibility for their application of any product.</em></p><p><em>This document aims at detailing EfficientIP proprietary solutions. As our solutions rely on several third-party products, created by other companies or organizations, it may redirect readers to third-party websites and documentation for further information. In such a case, EfficientIP cannot be liable or expected to provide said information on products they do maintain or created.</em></p><p>Generated (Friday 4th of October 2024 03:41:11 PM)</p>

API version: 2.0
Contact: support-api@efficientip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// checks if the DnsZoneparamEditInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DnsZoneparamEditInput{}

// DnsZoneparamEditInput struct for DnsZoneparamEditInput
type DnsZoneparamEditInput struct {
	// The database identifier (ID) of the DNS zone, a unique numeric key value automatically incremented when you add a DNS zone. Use the ID to specify the DNS zone of your choice.
	ZoneId *int32 `json:"zone_id,omitempty"`
	// The name of the DNS option you want to add, edit or remove from the zone. You can only set one option at a time.<ul><li> To add or edit an option: specify its name in the parameter <b>zoneparam_key</b>, as follows <b>zoneparam_key=&lt;option-name&gt;</b>, and then specify its value in the parameter <b>zoneparam_value</b>.<br/></li><li> To remove an option, specify its name in the parameter <b>zoneparam_key</b> and leave the parameter <b>zoneparam_value</b> empty.<br/></li></ul>To set several options, specify as many parameters (<b>zoneparam_key</b> and <b>zoneparam_value</b>) as you need.
	ZoneparamKey *string `json:"zoneparam_key,omitempty"`
	// A way to determine is the DNS zone option is an array (<b>1</b>).
	ZoneparamIsArray *int32 `json:"zoneparam_is_array,omitempty"`
	// The value of the DNS option specified in the input <b>zoneparam_key</b>.<ul><li> To add or edit an option value, specify its name in the parameter <b>zoneparam_key</b> and set its value as follows: <b>zoneparam_value=&lt;option-value&gt;</b> .<br/></li><li> To remove an option value, specify its name in the parameter <b>zoneparam_key</b> and leave <b>zoneparam_value</b> empty: <b>zoneparam_value=</b> .<br/></li></ul>
	ZoneparamValue *string `json:"zoneparam_value,omitempty"`
}

// NewDnsZoneparamEditInput instantiates a new DnsZoneparamEditInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnsZoneparamEditInput() *DnsZoneparamEditInput {
	this := DnsZoneparamEditInput{}
	return &this
}

// NewDnsZoneparamEditInputWithDefaults instantiates a new DnsZoneparamEditInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsZoneparamEditInputWithDefaults() *DnsZoneparamEditInput {
	this := DnsZoneparamEditInput{}
	return &this
}

// GetZoneId returns the ZoneId field value if set, zero value otherwise.
func (o *DnsZoneparamEditInput) GetZoneId() int32 {
	if o == nil || IsNil(o.ZoneId) {
		var ret int32
		return ret
	}
	return *o.ZoneId
}

// GetZoneIdOk returns a tuple with the ZoneId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneparamEditInput) GetZoneIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ZoneId) {
		return nil, false
	}
	return o.ZoneId, true
}

// HasZoneId returns a boolean if a field has been set.
func (o *DnsZoneparamEditInput) HasZoneId() bool {
	if o != nil && !IsNil(o.ZoneId) {
		return true
	}

	return false
}

// SetZoneId gets a reference to the given int32 and assigns it to the ZoneId field.
func (o *DnsZoneparamEditInput) SetZoneId(v int32) {
	o.ZoneId = &v
}

// GetZoneparamKey returns the ZoneparamKey field value if set, zero value otherwise.
func (o *DnsZoneparamEditInput) GetZoneparamKey() string {
	if o == nil || IsNil(o.ZoneparamKey) {
		var ret string
		return ret
	}
	return *o.ZoneparamKey
}

// GetZoneparamKeyOk returns a tuple with the ZoneparamKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneparamEditInput) GetZoneparamKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneparamKey) {
		return nil, false
	}
	return o.ZoneparamKey, true
}

// HasZoneparamKey returns a boolean if a field has been set.
func (o *DnsZoneparamEditInput) HasZoneparamKey() bool {
	if o != nil && !IsNil(o.ZoneparamKey) {
		return true
	}

	return false
}

// SetZoneparamKey gets a reference to the given string and assigns it to the ZoneparamKey field.
func (o *DnsZoneparamEditInput) SetZoneparamKey(v string) {
	o.ZoneparamKey = &v
}

// GetZoneparamIsArray returns the ZoneparamIsArray field value if set, zero value otherwise.
func (o *DnsZoneparamEditInput) GetZoneparamIsArray() int32 {
	if o == nil || IsNil(o.ZoneparamIsArray) {
		var ret int32
		return ret
	}
	return *o.ZoneparamIsArray
}

// GetZoneparamIsArrayOk returns a tuple with the ZoneparamIsArray field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneparamEditInput) GetZoneparamIsArrayOk() (*int32, bool) {
	if o == nil || IsNil(o.ZoneparamIsArray) {
		return nil, false
	}
	return o.ZoneparamIsArray, true
}

// HasZoneparamIsArray returns a boolean if a field has been set.
func (o *DnsZoneparamEditInput) HasZoneparamIsArray() bool {
	if o != nil && !IsNil(o.ZoneparamIsArray) {
		return true
	}

	return false
}

// SetZoneparamIsArray gets a reference to the given int32 and assigns it to the ZoneparamIsArray field.
func (o *DnsZoneparamEditInput) SetZoneparamIsArray(v int32) {
	o.ZoneparamIsArray = &v
}

// GetZoneparamValue returns the ZoneparamValue field value if set, zero value otherwise.
func (o *DnsZoneparamEditInput) GetZoneparamValue() string {
	if o == nil || IsNil(o.ZoneparamValue) {
		var ret string
		return ret
	}
	return *o.ZoneparamValue
}

// GetZoneparamValueOk returns a tuple with the ZoneparamValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneparamEditInput) GetZoneparamValueOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneparamValue) {
		return nil, false
	}
	return o.ZoneparamValue, true
}

// HasZoneparamValue returns a boolean if a field has been set.
func (o *DnsZoneparamEditInput) HasZoneparamValue() bool {
	if o != nil && !IsNil(o.ZoneparamValue) {
		return true
	}

	return false
}

// SetZoneparamValue gets a reference to the given string and assigns it to the ZoneparamValue field.
func (o *DnsZoneparamEditInput) SetZoneparamValue(v string) {
	o.ZoneparamValue = &v
}

func (o DnsZoneparamEditInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DnsZoneparamEditInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ZoneId) {
		toSerialize["zone_id"] = o.ZoneId
	}
	if !IsNil(o.ZoneparamKey) {
		toSerialize["zoneparam_key"] = o.ZoneparamKey
	}
	if !IsNil(o.ZoneparamIsArray) {
		toSerialize["zoneparam_is_array"] = o.ZoneparamIsArray
	}
	if !IsNil(o.ZoneparamValue) {
		toSerialize["zoneparam_value"] = o.ZoneparamValue
	}
	return toSerialize, nil
}

type NullableDnsZoneparamEditInput struct {
	value *DnsZoneparamEditInput
	isSet bool
}

func (v NullableDnsZoneparamEditInput) Get() *DnsZoneparamEditInput {
	return v.value
}

func (v *NullableDnsZoneparamEditInput) Set(val *DnsZoneparamEditInput) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsZoneparamEditInput) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsZoneparamEditInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsZoneparamEditInput(val *DnsZoneparamEditInput) *NullableDnsZoneparamEditInput {
	return &NullableDnsZoneparamEditInput{value: val, isSet: true}
}

func (v NullableDnsZoneparamEditInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsZoneparamEditInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
