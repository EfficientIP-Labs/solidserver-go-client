/*
SOLIDserver API

OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2024 EfficientIP</p><p><em>All specifications and information regarding the products in this document are subject to change without notice and should not be construed as a commitment by EfficientIP. EfficientIP assumes no responsibility or liability for any mistakes or inaccuracies that may appear in this document. All statements and recommendations in this document are believed to be accurate but are presented without warranty. Users must take full responsibility for their application of any product.</em></p><p><em>This document aims at detailing EfficientIP proprietary solutions. As our solutions rely on several third-party products, created by other companies or organizations, it may redirect readers to third-party websites and documentation for further information. In such a case, EfficientIP cannot be liable or expected to provide said information on products they do maintain or created.</em></p><p>Generated (Friday 4th of October 2024 03:41:11 PM)</p>

API version: 2.0
Contact: support-api@efficientip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// checks if the DataInnerDhcpLeaseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataInnerDhcpLeaseData{}

// DataInnerDhcpLeaseData struct for DataInnerDhcpLeaseData
type DataInnerDhcpLeaseData struct {
	// The role of the server the object belongs to in the cluster, either <b>active (M)</b>, <b>passive (B)</b> or <b>N/A (#)</b>.
	ServerClusterRole *string `json:"server_cluster_role,omitempty"`
	// The name of the class applied to the DHCPv4 server the object belongs to, it can be preceded by the class directory.
	ServerClassName *string `json:"server_class_name,omitempty"`
	// The database identifier (ID) of the DHCPv4 server the object belongs to.
	ServerId *string `json:"server_id,omitempty"`
	// The name of the DHCPv4 server the object belongs to.
	ServerName *string `json:"server_name,omitempty"`
	// The type of the DHCPv4 server the object belongs to: <table><caption>server_type possible values</caption><br/><thead><tr><th>Type</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >ipm</td><td >EfficientIP or EfficientIP Package server</td></tr><tr><td >msrpc</td><td >Microsoft Windows DHCP server</td></tr><tr><td >vdhcp</td><td >EfficientIP DHCPv4 smart architecture</td></tr></tbody></table></p><br/>
	ServerType *string `json:"server_type,omitempty"`
	// The version details of the DHCPv4 server the object belongs to.
	ServerVersion *string `json:"server_version,omitempty"`
	// The IP address associated with the DHCPv4 lease.
	LeaseAddr *string `json:"lease_addr,omitempty"`
	// The circuit identifier (ID) of the relay agent associated with the DHCPv4 lease.
	LeaseCircuitId *string `json:"lease_circuit_id,omitempty"`
	// The client identifier (ID) of the client associated with the DHCPv4 lease.
	LeaseClientIdent *string `json:"lease_client_ident,omitempty"`
	// The name of the client associated with the DHCPv4 lease.
	LeaseClientname *string `json:"lease_clientname,omitempty"`
	// The domain name associated with the DHCPv4 lease.
	LeaseDomain *string `json:"lease_domain,omitempty"`
	// The expiration time of the lease, in decimal UNIX date format.
	LeaseEndTime *string `json:"lease_end_time,omitempty"`
	// The operating system details of the client associated with the DHCPv4 lease.
	LeaseFingerbankOs *string `json:"lease_fingerbank_os,omitempty"`
	// The first time the DHCPv4 lease has been attributed to the client, in decimal UNIX date format.
	LeaseFirstTime *string `json:"lease_first_time,omitempty"`
	// The gateway IP address of the relay agent of the DHCPv4 lease.
	LeaseGiaddr *string `json:"lease_giaddr,omitempty"`
	// The database identifier (ID) of the DHCPv4 lease.
	LeaseId *string `json:"lease_id,omitempty"`
	// The IP address associated with the DHCPv4 lease, in hexadecimal format.
	LeaseAddressAddr *string `json:"lease_address_addr,omitempty"`
	// The MAC address associated with the IPv4 lease.
	LeaseMacAddr *string `json:"lease_mac_addr,omitempty"`
	// The name of the DHCPv4 lease.
	LeaseName *string `json:"lease_name,omitempty"`
	// The duration time (time to live) of the DHCPv4 lease, in seconds.
	LeasePeriod *string `json:"lease_period,omitempty"`
	// The remote identifier (ID) of the relay agent associated with the DHCPv4 lease.
	LeaseRemoteId *string `json:"lease_remote_id,omitempty"`
	// The last time the DHCPv4 lease has been attributed to the client, in decimal UNIX date format.
	LeaseTime *string `json:"lease_time,omitempty"`
	// The vendor class identifier (ID) of the client associated with the DHCPv4 lease.
	LeaseVendorId *string `json:"lease_vendor_id,omitempty"`
	// The name of the class applied to the DHCPv4 range the object belongs to, it can be preceded by the class directory.
	RangeClassName *string `json:"range_class_name,omitempty"`
	// The class parameters applied to the DHCPv4 range the object belongs to.
	RangeClassParameters []ApiClassParameterOutputEntry `json:"range_class_parameters,omitempty"`
	// The last IP address of the DHCPv4 range the lease belongs to.
	RangeEndAddr *string `json:"range_end_addr,omitempty"`
	// Internal use. Not documented.
	RangeFailoverName *string `json:"range_failover_name,omitempty"`
	// The database identifier (ID) of the DHCPv4 range the object belongs to.
	RangeId *string `json:"range_id,omitempty"`
	// The start and end IP address of the DHCPv4 range the object belongs to, <b>range_start_addr</b> and <b>range_end_addr</b>, as follows: <b>&lt;start-ip&gt;-&lt;end-ip&gt;</b>.
	RangeName *string `json:"range_name,omitempty"`
	// The first IP address of the DHCPv4 range the lease belongs to.
	RangeStartAddr *string `json:"range_start_addr,omitempty"`
	// The name of the class applied to the DHCPv4 scope the object belongs to, it can be preceded by the class directory.
	ScopeClassName *string `json:"scope_class_name,omitempty"`
	// The database identifier (ID) of the DHCPv4 scope the object belongs to.
	ScopeId *string `json:"scope_id,omitempty"`
	// The name of the DHCPv4 scope the object belongs to.
	ScopeName *string `json:"scope_name,omitempty"`
	// The first IP address of the DHCPv4 scope the object belongs to.
	ScopeNetAddr *string `json:"scope_net_addr,omitempty"`
	// The number of IP addresses the DHCPv4 scope the object belongs to contains.
	ScopeSize *string `json:"scope_size,omitempty"`
	// The database identifier (ID) of the DHCPv4 shared network the object belongs to.
	SharednetworkId *string `json:"sharednetwork_id,omitempty"`
	// The name of the DHCPv4 shared network the object belongs to.
	SharednetworkName *string `json:"sharednetwork_name,omitempty"`
	// The human readable version of the parameter <b>server_addr</b> or <b>server_addr6</b>.
	ServerHostaddr *string `json:"server_hostaddr,omitempty"`
	// The Management IP address of the DHCPv4 server the object belongs to, the IPv6 address configured when adding the server, in hexadecimal format.
	ServerAddr6 *string `json:"server_addr6,omitempty"`
	// The Management IP address of the DHCPv4 server the object belongs to, the IPv4 address configured when adding the server, in hexadecimal format.
	ServerAddr *string `json:"server_addr,omitempty"`
	// The vendor details of the client associated with the DHCPv4 lease.
	LeaseMacVendor *string `json:"lease_mac_vendor,omitempty"`
	// The Multi-status information is displayed as follows: <i>&lt;number-of-instances&gt;@&lt;message-number&gt;@&lt;multi-status-severity&gt;@&lt;module&gt;</i>. The different severity levels are:<br><b>Multi-status severity levels</b>    <table border=1>        <thead>        <tr >            <td><b>Message number</b></td>            <td><b>Severity</b></td>            <td><b>Description</b></td>        </tr>        </thead>        <tbody>        <tr  valign=middle>            <td>0 - 16</td>            <td>Emergency</td>            <td>The object configuration prevents the system from running properly. Action is required.</td>        </tr>        <tr  valign=middle>            <td>17 - 33</td>            <td>Critical</td>            <td>The object configuration is in critical conditions. Immediate action is recommended.</td>        </tr>        <tr  valign=middle>            <td>34 - 50</td>            <td>Error</td>            <td>The object configuration failed at some level. Action is recommended.</td>        </tr>        <tr  valign=middle>            <td>51 - 66</td>            <td>Warning</td>            <td>The object configuration triggers error messages if no action is taken. Action to be taken at your discretion.</td>        </tr>        <tr  valign=middle>            <td>67 - 83</td>            <td>Notice</td>            <td>The object configuration is normal but undergoing events that might trigger errors. No immediate action required.</td>        </tr>        <tr  valign=middle>            <td>84 - 100</td>            <td>Informational</td>            <td>The object configuration is normal, operational messages (might inform you about potential incompatibilities with other modules, etc). No action required.</td>        </tr>        </tbody></table>
	LeaseMultistatus *string `json:"lease_multistatus,omitempty"`
	// The list of parameters requested with the DHCPv4 lease returned by the server, integers separated by a comma.
	ParameterRequestList *string `json:"parameter_request_list,omitempty"`
	// The percentage of time the lease has really been in use.
	Percent *string `json:"percent,omitempty"`
	// The time left to the lease before it expires, in seconds.
	TimeToExpire *string `json:"time_to_expire,omitempty"`
	// The database identifier (ID) of the DHCPv4 smart architecture managing the DHCPv4 server the object belongs to. <b>0</b> indicates that the server the object belongs to is not managed by a smart architecture or is a smart architecture itself.
	SmartParentId *string `json:"smart_parent_id,omitempty"`
	// The name of the DHCPv4 smart architecture managing the DHCPv4 server the object belongs to. <b>#</b> indicates that the server is not managed by a smart architecture or is a smart architecture itself.
	SmartParentName *string `json:"smart_parent_name,omitempty"`
}

// NewDataInnerDhcpLeaseData instantiates a new DataInnerDhcpLeaseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataInnerDhcpLeaseData() *DataInnerDhcpLeaseData {
	this := DataInnerDhcpLeaseData{}
	return &this
}

// NewDataInnerDhcpLeaseDataWithDefaults instantiates a new DataInnerDhcpLeaseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataInnerDhcpLeaseDataWithDefaults() *DataInnerDhcpLeaseData {
	this := DataInnerDhcpLeaseData{}
	return &this
}

// GetServerClusterRole returns the ServerClusterRole field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetServerClusterRole() string {
	if o == nil || IsNil(o.ServerClusterRole) {
		var ret string
		return ret
	}
	return *o.ServerClusterRole
}

// GetServerClusterRoleOk returns a tuple with the ServerClusterRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetServerClusterRoleOk() (*string, bool) {
	if o == nil || IsNil(o.ServerClusterRole) {
		return nil, false
	}
	return o.ServerClusterRole, true
}

// HasServerClusterRole returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasServerClusterRole() bool {
	if o != nil && !IsNil(o.ServerClusterRole) {
		return true
	}

	return false
}

// SetServerClusterRole gets a reference to the given string and assigns it to the ServerClusterRole field.
func (o *DataInnerDhcpLeaseData) SetServerClusterRole(v string) {
	o.ServerClusterRole = &v
}

// GetServerClassName returns the ServerClassName field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetServerClassName() string {
	if o == nil || IsNil(o.ServerClassName) {
		var ret string
		return ret
	}
	return *o.ServerClassName
}

// GetServerClassNameOk returns a tuple with the ServerClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetServerClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServerClassName) {
		return nil, false
	}
	return o.ServerClassName, true
}

// HasServerClassName returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasServerClassName() bool {
	if o != nil && !IsNil(o.ServerClassName) {
		return true
	}

	return false
}

// SetServerClassName gets a reference to the given string and assigns it to the ServerClassName field.
func (o *DataInnerDhcpLeaseData) SetServerClassName(v string) {
	o.ServerClassName = &v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetServerId() string {
	if o == nil || IsNil(o.ServerId) {
		var ret string
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetServerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServerId) {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasServerId() bool {
	if o != nil && !IsNil(o.ServerId) {
		return true
	}

	return false
}

// SetServerId gets a reference to the given string and assigns it to the ServerId field.
func (o *DataInnerDhcpLeaseData) SetServerId(v string) {
	o.ServerId = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetServerName() string {
	if o == nil || IsNil(o.ServerName) {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetServerNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServerName) {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasServerName() bool {
	if o != nil && !IsNil(o.ServerName) {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *DataInnerDhcpLeaseData) SetServerName(v string) {
	o.ServerName = &v
}

// GetServerType returns the ServerType field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetServerType() string {
	if o == nil || IsNil(o.ServerType) {
		var ret string
		return ret
	}
	return *o.ServerType
}

// GetServerTypeOk returns a tuple with the ServerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetServerTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ServerType) {
		return nil, false
	}
	return o.ServerType, true
}

// HasServerType returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasServerType() bool {
	if o != nil && !IsNil(o.ServerType) {
		return true
	}

	return false
}

// SetServerType gets a reference to the given string and assigns it to the ServerType field.
func (o *DataInnerDhcpLeaseData) SetServerType(v string) {
	o.ServerType = &v
}

// GetServerVersion returns the ServerVersion field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetServerVersion() string {
	if o == nil || IsNil(o.ServerVersion) {
		var ret string
		return ret
	}
	return *o.ServerVersion
}

// GetServerVersionOk returns a tuple with the ServerVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetServerVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ServerVersion) {
		return nil, false
	}
	return o.ServerVersion, true
}

// HasServerVersion returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasServerVersion() bool {
	if o != nil && !IsNil(o.ServerVersion) {
		return true
	}

	return false
}

// SetServerVersion gets a reference to the given string and assigns it to the ServerVersion field.
func (o *DataInnerDhcpLeaseData) SetServerVersion(v string) {
	o.ServerVersion = &v
}

// GetLeaseAddr returns the LeaseAddr field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetLeaseAddr() string {
	if o == nil || IsNil(o.LeaseAddr) {
		var ret string
		return ret
	}
	return *o.LeaseAddr
}

// GetLeaseAddrOk returns a tuple with the LeaseAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetLeaseAddrOk() (*string, bool) {
	if o == nil || IsNil(o.LeaseAddr) {
		return nil, false
	}
	return o.LeaseAddr, true
}

// HasLeaseAddr returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasLeaseAddr() bool {
	if o != nil && !IsNil(o.LeaseAddr) {
		return true
	}

	return false
}

// SetLeaseAddr gets a reference to the given string and assigns it to the LeaseAddr field.
func (o *DataInnerDhcpLeaseData) SetLeaseAddr(v string) {
	o.LeaseAddr = &v
}

// GetLeaseCircuitId returns the LeaseCircuitId field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetLeaseCircuitId() string {
	if o == nil || IsNil(o.LeaseCircuitId) {
		var ret string
		return ret
	}
	return *o.LeaseCircuitId
}

// GetLeaseCircuitIdOk returns a tuple with the LeaseCircuitId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetLeaseCircuitIdOk() (*string, bool) {
	if o == nil || IsNil(o.LeaseCircuitId) {
		return nil, false
	}
	return o.LeaseCircuitId, true
}

// HasLeaseCircuitId returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasLeaseCircuitId() bool {
	if o != nil && !IsNil(o.LeaseCircuitId) {
		return true
	}

	return false
}

// SetLeaseCircuitId gets a reference to the given string and assigns it to the LeaseCircuitId field.
func (o *DataInnerDhcpLeaseData) SetLeaseCircuitId(v string) {
	o.LeaseCircuitId = &v
}

// GetLeaseClientIdent returns the LeaseClientIdent field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetLeaseClientIdent() string {
	if o == nil || IsNil(o.LeaseClientIdent) {
		var ret string
		return ret
	}
	return *o.LeaseClientIdent
}

// GetLeaseClientIdentOk returns a tuple with the LeaseClientIdent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetLeaseClientIdentOk() (*string, bool) {
	if o == nil || IsNil(o.LeaseClientIdent) {
		return nil, false
	}
	return o.LeaseClientIdent, true
}

// HasLeaseClientIdent returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasLeaseClientIdent() bool {
	if o != nil && !IsNil(o.LeaseClientIdent) {
		return true
	}

	return false
}

// SetLeaseClientIdent gets a reference to the given string and assigns it to the LeaseClientIdent field.
func (o *DataInnerDhcpLeaseData) SetLeaseClientIdent(v string) {
	o.LeaseClientIdent = &v
}

// GetLeaseClientname returns the LeaseClientname field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetLeaseClientname() string {
	if o == nil || IsNil(o.LeaseClientname) {
		var ret string
		return ret
	}
	return *o.LeaseClientname
}

// GetLeaseClientnameOk returns a tuple with the LeaseClientname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetLeaseClientnameOk() (*string, bool) {
	if o == nil || IsNil(o.LeaseClientname) {
		return nil, false
	}
	return o.LeaseClientname, true
}

// HasLeaseClientname returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasLeaseClientname() bool {
	if o != nil && !IsNil(o.LeaseClientname) {
		return true
	}

	return false
}

// SetLeaseClientname gets a reference to the given string and assigns it to the LeaseClientname field.
func (o *DataInnerDhcpLeaseData) SetLeaseClientname(v string) {
	o.LeaseClientname = &v
}

// GetLeaseDomain returns the LeaseDomain field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetLeaseDomain() string {
	if o == nil || IsNil(o.LeaseDomain) {
		var ret string
		return ret
	}
	return *o.LeaseDomain
}

// GetLeaseDomainOk returns a tuple with the LeaseDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetLeaseDomainOk() (*string, bool) {
	if o == nil || IsNil(o.LeaseDomain) {
		return nil, false
	}
	return o.LeaseDomain, true
}

// HasLeaseDomain returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasLeaseDomain() bool {
	if o != nil && !IsNil(o.LeaseDomain) {
		return true
	}

	return false
}

// SetLeaseDomain gets a reference to the given string and assigns it to the LeaseDomain field.
func (o *DataInnerDhcpLeaseData) SetLeaseDomain(v string) {
	o.LeaseDomain = &v
}

// GetLeaseEndTime returns the LeaseEndTime field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetLeaseEndTime() string {
	if o == nil || IsNil(o.LeaseEndTime) {
		var ret string
		return ret
	}
	return *o.LeaseEndTime
}

// GetLeaseEndTimeOk returns a tuple with the LeaseEndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetLeaseEndTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LeaseEndTime) {
		return nil, false
	}
	return o.LeaseEndTime, true
}

// HasLeaseEndTime returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasLeaseEndTime() bool {
	if o != nil && !IsNil(o.LeaseEndTime) {
		return true
	}

	return false
}

// SetLeaseEndTime gets a reference to the given string and assigns it to the LeaseEndTime field.
func (o *DataInnerDhcpLeaseData) SetLeaseEndTime(v string) {
	o.LeaseEndTime = &v
}

// GetLeaseFingerbankOs returns the LeaseFingerbankOs field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetLeaseFingerbankOs() string {
	if o == nil || IsNil(o.LeaseFingerbankOs) {
		var ret string
		return ret
	}
	return *o.LeaseFingerbankOs
}

// GetLeaseFingerbankOsOk returns a tuple with the LeaseFingerbankOs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetLeaseFingerbankOsOk() (*string, bool) {
	if o == nil || IsNil(o.LeaseFingerbankOs) {
		return nil, false
	}
	return o.LeaseFingerbankOs, true
}

// HasLeaseFingerbankOs returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasLeaseFingerbankOs() bool {
	if o != nil && !IsNil(o.LeaseFingerbankOs) {
		return true
	}

	return false
}

// SetLeaseFingerbankOs gets a reference to the given string and assigns it to the LeaseFingerbankOs field.
func (o *DataInnerDhcpLeaseData) SetLeaseFingerbankOs(v string) {
	o.LeaseFingerbankOs = &v
}

// GetLeaseFirstTime returns the LeaseFirstTime field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetLeaseFirstTime() string {
	if o == nil || IsNil(o.LeaseFirstTime) {
		var ret string
		return ret
	}
	return *o.LeaseFirstTime
}

// GetLeaseFirstTimeOk returns a tuple with the LeaseFirstTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetLeaseFirstTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LeaseFirstTime) {
		return nil, false
	}
	return o.LeaseFirstTime, true
}

// HasLeaseFirstTime returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasLeaseFirstTime() bool {
	if o != nil && !IsNil(o.LeaseFirstTime) {
		return true
	}

	return false
}

// SetLeaseFirstTime gets a reference to the given string and assigns it to the LeaseFirstTime field.
func (o *DataInnerDhcpLeaseData) SetLeaseFirstTime(v string) {
	o.LeaseFirstTime = &v
}

// GetLeaseGiaddr returns the LeaseGiaddr field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetLeaseGiaddr() string {
	if o == nil || IsNil(o.LeaseGiaddr) {
		var ret string
		return ret
	}
	return *o.LeaseGiaddr
}

// GetLeaseGiaddrOk returns a tuple with the LeaseGiaddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetLeaseGiaddrOk() (*string, bool) {
	if o == nil || IsNil(o.LeaseGiaddr) {
		return nil, false
	}
	return o.LeaseGiaddr, true
}

// HasLeaseGiaddr returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasLeaseGiaddr() bool {
	if o != nil && !IsNil(o.LeaseGiaddr) {
		return true
	}

	return false
}

// SetLeaseGiaddr gets a reference to the given string and assigns it to the LeaseGiaddr field.
func (o *DataInnerDhcpLeaseData) SetLeaseGiaddr(v string) {
	o.LeaseGiaddr = &v
}

// GetLeaseId returns the LeaseId field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetLeaseId() string {
	if o == nil || IsNil(o.LeaseId) {
		var ret string
		return ret
	}
	return *o.LeaseId
}

// GetLeaseIdOk returns a tuple with the LeaseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetLeaseIdOk() (*string, bool) {
	if o == nil || IsNil(o.LeaseId) {
		return nil, false
	}
	return o.LeaseId, true
}

// HasLeaseId returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasLeaseId() bool {
	if o != nil && !IsNil(o.LeaseId) {
		return true
	}

	return false
}

// SetLeaseId gets a reference to the given string and assigns it to the LeaseId field.
func (o *DataInnerDhcpLeaseData) SetLeaseId(v string) {
	o.LeaseId = &v
}

// GetLeaseAddressAddr returns the LeaseAddressAddr field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetLeaseAddressAddr() string {
	if o == nil || IsNil(o.LeaseAddressAddr) {
		var ret string
		return ret
	}
	return *o.LeaseAddressAddr
}

// GetLeaseAddressAddrOk returns a tuple with the LeaseAddressAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetLeaseAddressAddrOk() (*string, bool) {
	if o == nil || IsNil(o.LeaseAddressAddr) {
		return nil, false
	}
	return o.LeaseAddressAddr, true
}

// HasLeaseAddressAddr returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasLeaseAddressAddr() bool {
	if o != nil && !IsNil(o.LeaseAddressAddr) {
		return true
	}

	return false
}

// SetLeaseAddressAddr gets a reference to the given string and assigns it to the LeaseAddressAddr field.
func (o *DataInnerDhcpLeaseData) SetLeaseAddressAddr(v string) {
	o.LeaseAddressAddr = &v
}

// GetLeaseMacAddr returns the LeaseMacAddr field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetLeaseMacAddr() string {
	if o == nil || IsNil(o.LeaseMacAddr) {
		var ret string
		return ret
	}
	return *o.LeaseMacAddr
}

// GetLeaseMacAddrOk returns a tuple with the LeaseMacAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetLeaseMacAddrOk() (*string, bool) {
	if o == nil || IsNil(o.LeaseMacAddr) {
		return nil, false
	}
	return o.LeaseMacAddr, true
}

// HasLeaseMacAddr returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasLeaseMacAddr() bool {
	if o != nil && !IsNil(o.LeaseMacAddr) {
		return true
	}

	return false
}

// SetLeaseMacAddr gets a reference to the given string and assigns it to the LeaseMacAddr field.
func (o *DataInnerDhcpLeaseData) SetLeaseMacAddr(v string) {
	o.LeaseMacAddr = &v
}

// GetLeaseName returns the LeaseName field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetLeaseName() string {
	if o == nil || IsNil(o.LeaseName) {
		var ret string
		return ret
	}
	return *o.LeaseName
}

// GetLeaseNameOk returns a tuple with the LeaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetLeaseNameOk() (*string, bool) {
	if o == nil || IsNil(o.LeaseName) {
		return nil, false
	}
	return o.LeaseName, true
}

// HasLeaseName returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasLeaseName() bool {
	if o != nil && !IsNil(o.LeaseName) {
		return true
	}

	return false
}

// SetLeaseName gets a reference to the given string and assigns it to the LeaseName field.
func (o *DataInnerDhcpLeaseData) SetLeaseName(v string) {
	o.LeaseName = &v
}

// GetLeasePeriod returns the LeasePeriod field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetLeasePeriod() string {
	if o == nil || IsNil(o.LeasePeriod) {
		var ret string
		return ret
	}
	return *o.LeasePeriod
}

// GetLeasePeriodOk returns a tuple with the LeasePeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetLeasePeriodOk() (*string, bool) {
	if o == nil || IsNil(o.LeasePeriod) {
		return nil, false
	}
	return o.LeasePeriod, true
}

// HasLeasePeriod returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasLeasePeriod() bool {
	if o != nil && !IsNil(o.LeasePeriod) {
		return true
	}

	return false
}

// SetLeasePeriod gets a reference to the given string and assigns it to the LeasePeriod field.
func (o *DataInnerDhcpLeaseData) SetLeasePeriod(v string) {
	o.LeasePeriod = &v
}

// GetLeaseRemoteId returns the LeaseRemoteId field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetLeaseRemoteId() string {
	if o == nil || IsNil(o.LeaseRemoteId) {
		var ret string
		return ret
	}
	return *o.LeaseRemoteId
}

// GetLeaseRemoteIdOk returns a tuple with the LeaseRemoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetLeaseRemoteIdOk() (*string, bool) {
	if o == nil || IsNil(o.LeaseRemoteId) {
		return nil, false
	}
	return o.LeaseRemoteId, true
}

// HasLeaseRemoteId returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasLeaseRemoteId() bool {
	if o != nil && !IsNil(o.LeaseRemoteId) {
		return true
	}

	return false
}

// SetLeaseRemoteId gets a reference to the given string and assigns it to the LeaseRemoteId field.
func (o *DataInnerDhcpLeaseData) SetLeaseRemoteId(v string) {
	o.LeaseRemoteId = &v
}

// GetLeaseTime returns the LeaseTime field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetLeaseTime() string {
	if o == nil || IsNil(o.LeaseTime) {
		var ret string
		return ret
	}
	return *o.LeaseTime
}

// GetLeaseTimeOk returns a tuple with the LeaseTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetLeaseTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LeaseTime) {
		return nil, false
	}
	return o.LeaseTime, true
}

// HasLeaseTime returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasLeaseTime() bool {
	if o != nil && !IsNil(o.LeaseTime) {
		return true
	}

	return false
}

// SetLeaseTime gets a reference to the given string and assigns it to the LeaseTime field.
func (o *DataInnerDhcpLeaseData) SetLeaseTime(v string) {
	o.LeaseTime = &v
}

// GetLeaseVendorId returns the LeaseVendorId field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetLeaseVendorId() string {
	if o == nil || IsNil(o.LeaseVendorId) {
		var ret string
		return ret
	}
	return *o.LeaseVendorId
}

// GetLeaseVendorIdOk returns a tuple with the LeaseVendorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetLeaseVendorIdOk() (*string, bool) {
	if o == nil || IsNil(o.LeaseVendorId) {
		return nil, false
	}
	return o.LeaseVendorId, true
}

// HasLeaseVendorId returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasLeaseVendorId() bool {
	if o != nil && !IsNil(o.LeaseVendorId) {
		return true
	}

	return false
}

// SetLeaseVendorId gets a reference to the given string and assigns it to the LeaseVendorId field.
func (o *DataInnerDhcpLeaseData) SetLeaseVendorId(v string) {
	o.LeaseVendorId = &v
}

// GetRangeClassName returns the RangeClassName field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetRangeClassName() string {
	if o == nil || IsNil(o.RangeClassName) {
		var ret string
		return ret
	}
	return *o.RangeClassName
}

// GetRangeClassNameOk returns a tuple with the RangeClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetRangeClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.RangeClassName) {
		return nil, false
	}
	return o.RangeClassName, true
}

// HasRangeClassName returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasRangeClassName() bool {
	if o != nil && !IsNil(o.RangeClassName) {
		return true
	}

	return false
}

// SetRangeClassName gets a reference to the given string and assigns it to the RangeClassName field.
func (o *DataInnerDhcpLeaseData) SetRangeClassName(v string) {
	o.RangeClassName = &v
}

// GetRangeClassParameters returns the RangeClassParameters field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetRangeClassParameters() []ApiClassParameterOutputEntry {
	if o == nil || IsNil(o.RangeClassParameters) {
		var ret []ApiClassParameterOutputEntry
		return ret
	}
	return o.RangeClassParameters
}

// GetRangeClassParametersOk returns a tuple with the RangeClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetRangeClassParametersOk() ([]ApiClassParameterOutputEntry, bool) {
	if o == nil || IsNil(o.RangeClassParameters) {
		return nil, false
	}
	return o.RangeClassParameters, true
}

// HasRangeClassParameters returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasRangeClassParameters() bool {
	if o != nil && !IsNil(o.RangeClassParameters) {
		return true
	}

	return false
}

// SetRangeClassParameters gets a reference to the given []ApiClassParameterOutputEntry and assigns it to the RangeClassParameters field.
func (o *DataInnerDhcpLeaseData) SetRangeClassParameters(v []ApiClassParameterOutputEntry) {
	o.RangeClassParameters = v
}

// GetRangeEndAddr returns the RangeEndAddr field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetRangeEndAddr() string {
	if o == nil || IsNil(o.RangeEndAddr) {
		var ret string
		return ret
	}
	return *o.RangeEndAddr
}

// GetRangeEndAddrOk returns a tuple with the RangeEndAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetRangeEndAddrOk() (*string, bool) {
	if o == nil || IsNil(o.RangeEndAddr) {
		return nil, false
	}
	return o.RangeEndAddr, true
}

// HasRangeEndAddr returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasRangeEndAddr() bool {
	if o != nil && !IsNil(o.RangeEndAddr) {
		return true
	}

	return false
}

// SetRangeEndAddr gets a reference to the given string and assigns it to the RangeEndAddr field.
func (o *DataInnerDhcpLeaseData) SetRangeEndAddr(v string) {
	o.RangeEndAddr = &v
}

// GetRangeFailoverName returns the RangeFailoverName field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetRangeFailoverName() string {
	if o == nil || IsNil(o.RangeFailoverName) {
		var ret string
		return ret
	}
	return *o.RangeFailoverName
}

// GetRangeFailoverNameOk returns a tuple with the RangeFailoverName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetRangeFailoverNameOk() (*string, bool) {
	if o == nil || IsNil(o.RangeFailoverName) {
		return nil, false
	}
	return o.RangeFailoverName, true
}

// HasRangeFailoverName returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasRangeFailoverName() bool {
	if o != nil && !IsNil(o.RangeFailoverName) {
		return true
	}

	return false
}

// SetRangeFailoverName gets a reference to the given string and assigns it to the RangeFailoverName field.
func (o *DataInnerDhcpLeaseData) SetRangeFailoverName(v string) {
	o.RangeFailoverName = &v
}

// GetRangeId returns the RangeId field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetRangeId() string {
	if o == nil || IsNil(o.RangeId) {
		var ret string
		return ret
	}
	return *o.RangeId
}

// GetRangeIdOk returns a tuple with the RangeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetRangeIdOk() (*string, bool) {
	if o == nil || IsNil(o.RangeId) {
		return nil, false
	}
	return o.RangeId, true
}

// HasRangeId returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasRangeId() bool {
	if o != nil && !IsNil(o.RangeId) {
		return true
	}

	return false
}

// SetRangeId gets a reference to the given string and assigns it to the RangeId field.
func (o *DataInnerDhcpLeaseData) SetRangeId(v string) {
	o.RangeId = &v
}

// GetRangeName returns the RangeName field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetRangeName() string {
	if o == nil || IsNil(o.RangeName) {
		var ret string
		return ret
	}
	return *o.RangeName
}

// GetRangeNameOk returns a tuple with the RangeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetRangeNameOk() (*string, bool) {
	if o == nil || IsNil(o.RangeName) {
		return nil, false
	}
	return o.RangeName, true
}

// HasRangeName returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasRangeName() bool {
	if o != nil && !IsNil(o.RangeName) {
		return true
	}

	return false
}

// SetRangeName gets a reference to the given string and assigns it to the RangeName field.
func (o *DataInnerDhcpLeaseData) SetRangeName(v string) {
	o.RangeName = &v
}

// GetRangeStartAddr returns the RangeStartAddr field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetRangeStartAddr() string {
	if o == nil || IsNil(o.RangeStartAddr) {
		var ret string
		return ret
	}
	return *o.RangeStartAddr
}

// GetRangeStartAddrOk returns a tuple with the RangeStartAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetRangeStartAddrOk() (*string, bool) {
	if o == nil || IsNil(o.RangeStartAddr) {
		return nil, false
	}
	return o.RangeStartAddr, true
}

// HasRangeStartAddr returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasRangeStartAddr() bool {
	if o != nil && !IsNil(o.RangeStartAddr) {
		return true
	}

	return false
}

// SetRangeStartAddr gets a reference to the given string and assigns it to the RangeStartAddr field.
func (o *DataInnerDhcpLeaseData) SetRangeStartAddr(v string) {
	o.RangeStartAddr = &v
}

// GetScopeClassName returns the ScopeClassName field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetScopeClassName() string {
	if o == nil || IsNil(o.ScopeClassName) {
		var ret string
		return ret
	}
	return *o.ScopeClassName
}

// GetScopeClassNameOk returns a tuple with the ScopeClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetScopeClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeClassName) {
		return nil, false
	}
	return o.ScopeClassName, true
}

// HasScopeClassName returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasScopeClassName() bool {
	if o != nil && !IsNil(o.ScopeClassName) {
		return true
	}

	return false
}

// SetScopeClassName gets a reference to the given string and assigns it to the ScopeClassName field.
func (o *DataInnerDhcpLeaseData) SetScopeClassName(v string) {
	o.ScopeClassName = &v
}

// GetScopeId returns the ScopeId field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetScopeId() string {
	if o == nil || IsNil(o.ScopeId) {
		var ret string
		return ret
	}
	return *o.ScopeId
}

// GetScopeIdOk returns a tuple with the ScopeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetScopeIdOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeId) {
		return nil, false
	}
	return o.ScopeId, true
}

// HasScopeId returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasScopeId() bool {
	if o != nil && !IsNil(o.ScopeId) {
		return true
	}

	return false
}

// SetScopeId gets a reference to the given string and assigns it to the ScopeId field.
func (o *DataInnerDhcpLeaseData) SetScopeId(v string) {
	o.ScopeId = &v
}

// GetScopeName returns the ScopeName field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetScopeName() string {
	if o == nil || IsNil(o.ScopeName) {
		var ret string
		return ret
	}
	return *o.ScopeName
}

// GetScopeNameOk returns a tuple with the ScopeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetScopeNameOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeName) {
		return nil, false
	}
	return o.ScopeName, true
}

// HasScopeName returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasScopeName() bool {
	if o != nil && !IsNil(o.ScopeName) {
		return true
	}

	return false
}

// SetScopeName gets a reference to the given string and assigns it to the ScopeName field.
func (o *DataInnerDhcpLeaseData) SetScopeName(v string) {
	o.ScopeName = &v
}

// GetScopeNetAddr returns the ScopeNetAddr field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetScopeNetAddr() string {
	if o == nil || IsNil(o.ScopeNetAddr) {
		var ret string
		return ret
	}
	return *o.ScopeNetAddr
}

// GetScopeNetAddrOk returns a tuple with the ScopeNetAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetScopeNetAddrOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeNetAddr) {
		return nil, false
	}
	return o.ScopeNetAddr, true
}

// HasScopeNetAddr returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasScopeNetAddr() bool {
	if o != nil && !IsNil(o.ScopeNetAddr) {
		return true
	}

	return false
}

// SetScopeNetAddr gets a reference to the given string and assigns it to the ScopeNetAddr field.
func (o *DataInnerDhcpLeaseData) SetScopeNetAddr(v string) {
	o.ScopeNetAddr = &v
}

// GetScopeSize returns the ScopeSize field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetScopeSize() string {
	if o == nil || IsNil(o.ScopeSize) {
		var ret string
		return ret
	}
	return *o.ScopeSize
}

// GetScopeSizeOk returns a tuple with the ScopeSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetScopeSizeOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeSize) {
		return nil, false
	}
	return o.ScopeSize, true
}

// HasScopeSize returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasScopeSize() bool {
	if o != nil && !IsNil(o.ScopeSize) {
		return true
	}

	return false
}

// SetScopeSize gets a reference to the given string and assigns it to the ScopeSize field.
func (o *DataInnerDhcpLeaseData) SetScopeSize(v string) {
	o.ScopeSize = &v
}

// GetSharednetworkId returns the SharednetworkId field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetSharednetworkId() string {
	if o == nil || IsNil(o.SharednetworkId) {
		var ret string
		return ret
	}
	return *o.SharednetworkId
}

// GetSharednetworkIdOk returns a tuple with the SharednetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetSharednetworkIdOk() (*string, bool) {
	if o == nil || IsNil(o.SharednetworkId) {
		return nil, false
	}
	return o.SharednetworkId, true
}

// HasSharednetworkId returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasSharednetworkId() bool {
	if o != nil && !IsNil(o.SharednetworkId) {
		return true
	}

	return false
}

// SetSharednetworkId gets a reference to the given string and assigns it to the SharednetworkId field.
func (o *DataInnerDhcpLeaseData) SetSharednetworkId(v string) {
	o.SharednetworkId = &v
}

// GetSharednetworkName returns the SharednetworkName field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetSharednetworkName() string {
	if o == nil || IsNil(o.SharednetworkName) {
		var ret string
		return ret
	}
	return *o.SharednetworkName
}

// GetSharednetworkNameOk returns a tuple with the SharednetworkName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetSharednetworkNameOk() (*string, bool) {
	if o == nil || IsNil(o.SharednetworkName) {
		return nil, false
	}
	return o.SharednetworkName, true
}

// HasSharednetworkName returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasSharednetworkName() bool {
	if o != nil && !IsNil(o.SharednetworkName) {
		return true
	}

	return false
}

// SetSharednetworkName gets a reference to the given string and assigns it to the SharednetworkName field.
func (o *DataInnerDhcpLeaseData) SetSharednetworkName(v string) {
	o.SharednetworkName = &v
}

// GetServerHostaddr returns the ServerHostaddr field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetServerHostaddr() string {
	if o == nil || IsNil(o.ServerHostaddr) {
		var ret string
		return ret
	}
	return *o.ServerHostaddr
}

// GetServerHostaddrOk returns a tuple with the ServerHostaddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetServerHostaddrOk() (*string, bool) {
	if o == nil || IsNil(o.ServerHostaddr) {
		return nil, false
	}
	return o.ServerHostaddr, true
}

// HasServerHostaddr returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasServerHostaddr() bool {
	if o != nil && !IsNil(o.ServerHostaddr) {
		return true
	}

	return false
}

// SetServerHostaddr gets a reference to the given string and assigns it to the ServerHostaddr field.
func (o *DataInnerDhcpLeaseData) SetServerHostaddr(v string) {
	o.ServerHostaddr = &v
}

// GetServerAddr6 returns the ServerAddr6 field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetServerAddr6() string {
	if o == nil || IsNil(o.ServerAddr6) {
		var ret string
		return ret
	}
	return *o.ServerAddr6
}

// GetServerAddr6Ok returns a tuple with the ServerAddr6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetServerAddr6Ok() (*string, bool) {
	if o == nil || IsNil(o.ServerAddr6) {
		return nil, false
	}
	return o.ServerAddr6, true
}

// HasServerAddr6 returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasServerAddr6() bool {
	if o != nil && !IsNil(o.ServerAddr6) {
		return true
	}

	return false
}

// SetServerAddr6 gets a reference to the given string and assigns it to the ServerAddr6 field.
func (o *DataInnerDhcpLeaseData) SetServerAddr6(v string) {
	o.ServerAddr6 = &v
}

// GetServerAddr returns the ServerAddr field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetServerAddr() string {
	if o == nil || IsNil(o.ServerAddr) {
		var ret string
		return ret
	}
	return *o.ServerAddr
}

// GetServerAddrOk returns a tuple with the ServerAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetServerAddrOk() (*string, bool) {
	if o == nil || IsNil(o.ServerAddr) {
		return nil, false
	}
	return o.ServerAddr, true
}

// HasServerAddr returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasServerAddr() bool {
	if o != nil && !IsNil(o.ServerAddr) {
		return true
	}

	return false
}

// SetServerAddr gets a reference to the given string and assigns it to the ServerAddr field.
func (o *DataInnerDhcpLeaseData) SetServerAddr(v string) {
	o.ServerAddr = &v
}

// GetLeaseMacVendor returns the LeaseMacVendor field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetLeaseMacVendor() string {
	if o == nil || IsNil(o.LeaseMacVendor) {
		var ret string
		return ret
	}
	return *o.LeaseMacVendor
}

// GetLeaseMacVendorOk returns a tuple with the LeaseMacVendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetLeaseMacVendorOk() (*string, bool) {
	if o == nil || IsNil(o.LeaseMacVendor) {
		return nil, false
	}
	return o.LeaseMacVendor, true
}

// HasLeaseMacVendor returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasLeaseMacVendor() bool {
	if o != nil && !IsNil(o.LeaseMacVendor) {
		return true
	}

	return false
}

// SetLeaseMacVendor gets a reference to the given string and assigns it to the LeaseMacVendor field.
func (o *DataInnerDhcpLeaseData) SetLeaseMacVendor(v string) {
	o.LeaseMacVendor = &v
}

// GetLeaseMultistatus returns the LeaseMultistatus field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetLeaseMultistatus() string {
	if o == nil || IsNil(o.LeaseMultistatus) {
		var ret string
		return ret
	}
	return *o.LeaseMultistatus
}

// GetLeaseMultistatusOk returns a tuple with the LeaseMultistatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetLeaseMultistatusOk() (*string, bool) {
	if o == nil || IsNil(o.LeaseMultistatus) {
		return nil, false
	}
	return o.LeaseMultistatus, true
}

// HasLeaseMultistatus returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasLeaseMultistatus() bool {
	if o != nil && !IsNil(o.LeaseMultistatus) {
		return true
	}

	return false
}

// SetLeaseMultistatus gets a reference to the given string and assigns it to the LeaseMultistatus field.
func (o *DataInnerDhcpLeaseData) SetLeaseMultistatus(v string) {
	o.LeaseMultistatus = &v
}

// GetParameterRequestList returns the ParameterRequestList field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetParameterRequestList() string {
	if o == nil || IsNil(o.ParameterRequestList) {
		var ret string
		return ret
	}
	return *o.ParameterRequestList
}

// GetParameterRequestListOk returns a tuple with the ParameterRequestList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetParameterRequestListOk() (*string, bool) {
	if o == nil || IsNil(o.ParameterRequestList) {
		return nil, false
	}
	return o.ParameterRequestList, true
}

// HasParameterRequestList returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasParameterRequestList() bool {
	if o != nil && !IsNil(o.ParameterRequestList) {
		return true
	}

	return false
}

// SetParameterRequestList gets a reference to the given string and assigns it to the ParameterRequestList field.
func (o *DataInnerDhcpLeaseData) SetParameterRequestList(v string) {
	o.ParameterRequestList = &v
}

// GetPercent returns the Percent field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetPercent() string {
	if o == nil || IsNil(o.Percent) {
		var ret string
		return ret
	}
	return *o.Percent
}

// GetPercentOk returns a tuple with the Percent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetPercentOk() (*string, bool) {
	if o == nil || IsNil(o.Percent) {
		return nil, false
	}
	return o.Percent, true
}

// HasPercent returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasPercent() bool {
	if o != nil && !IsNil(o.Percent) {
		return true
	}

	return false
}

// SetPercent gets a reference to the given string and assigns it to the Percent field.
func (o *DataInnerDhcpLeaseData) SetPercent(v string) {
	o.Percent = &v
}

// GetTimeToExpire returns the TimeToExpire field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetTimeToExpire() string {
	if o == nil || IsNil(o.TimeToExpire) {
		var ret string
		return ret
	}
	return *o.TimeToExpire
}

// GetTimeToExpireOk returns a tuple with the TimeToExpire field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetTimeToExpireOk() (*string, bool) {
	if o == nil || IsNil(o.TimeToExpire) {
		return nil, false
	}
	return o.TimeToExpire, true
}

// HasTimeToExpire returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasTimeToExpire() bool {
	if o != nil && !IsNil(o.TimeToExpire) {
		return true
	}

	return false
}

// SetTimeToExpire gets a reference to the given string and assigns it to the TimeToExpire field.
func (o *DataInnerDhcpLeaseData) SetTimeToExpire(v string) {
	o.TimeToExpire = &v
}

// GetSmartParentId returns the SmartParentId field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetSmartParentId() string {
	if o == nil || IsNil(o.SmartParentId) {
		var ret string
		return ret
	}
	return *o.SmartParentId
}

// GetSmartParentIdOk returns a tuple with the SmartParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetSmartParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.SmartParentId) {
		return nil, false
	}
	return o.SmartParentId, true
}

// HasSmartParentId returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasSmartParentId() bool {
	if o != nil && !IsNil(o.SmartParentId) {
		return true
	}

	return false
}

// SetSmartParentId gets a reference to the given string and assigns it to the SmartParentId field.
func (o *DataInnerDhcpLeaseData) SetSmartParentId(v string) {
	o.SmartParentId = &v
}

// GetSmartParentName returns the SmartParentName field value if set, zero value otherwise.
func (o *DataInnerDhcpLeaseData) GetSmartParentName() string {
	if o == nil || IsNil(o.SmartParentName) {
		var ret string
		return ret
	}
	return *o.SmartParentName
}

// GetSmartParentNameOk returns a tuple with the SmartParentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpLeaseData) GetSmartParentNameOk() (*string, bool) {
	if o == nil || IsNil(o.SmartParentName) {
		return nil, false
	}
	return o.SmartParentName, true
}

// HasSmartParentName returns a boolean if a field has been set.
func (o *DataInnerDhcpLeaseData) HasSmartParentName() bool {
	if o != nil && !IsNil(o.SmartParentName) {
		return true
	}

	return false
}

// SetSmartParentName gets a reference to the given string and assigns it to the SmartParentName field.
func (o *DataInnerDhcpLeaseData) SetSmartParentName(v string) {
	o.SmartParentName = &v
}

func (o DataInnerDhcpLeaseData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataInnerDhcpLeaseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ServerClusterRole) {
		toSerialize["server_cluster_role"] = o.ServerClusterRole
	}
	if !IsNil(o.ServerClassName) {
		toSerialize["server_class_name"] = o.ServerClassName
	}
	if !IsNil(o.ServerId) {
		toSerialize["server_id"] = o.ServerId
	}
	if !IsNil(o.ServerName) {
		toSerialize["server_name"] = o.ServerName
	}
	if !IsNil(o.ServerType) {
		toSerialize["server_type"] = o.ServerType
	}
	if !IsNil(o.ServerVersion) {
		toSerialize["server_version"] = o.ServerVersion
	}
	if !IsNil(o.LeaseAddr) {
		toSerialize["lease_addr"] = o.LeaseAddr
	}
	if !IsNil(o.LeaseCircuitId) {
		toSerialize["lease_circuit_id"] = o.LeaseCircuitId
	}
	if !IsNil(o.LeaseClientIdent) {
		toSerialize["lease_client_ident"] = o.LeaseClientIdent
	}
	if !IsNil(o.LeaseClientname) {
		toSerialize["lease_clientname"] = o.LeaseClientname
	}
	if !IsNil(o.LeaseDomain) {
		toSerialize["lease_domain"] = o.LeaseDomain
	}
	if !IsNil(o.LeaseEndTime) {
		toSerialize["lease_end_time"] = o.LeaseEndTime
	}
	if !IsNil(o.LeaseFingerbankOs) {
		toSerialize["lease_fingerbank_os"] = o.LeaseFingerbankOs
	}
	if !IsNil(o.LeaseFirstTime) {
		toSerialize["lease_first_time"] = o.LeaseFirstTime
	}
	if !IsNil(o.LeaseGiaddr) {
		toSerialize["lease_giaddr"] = o.LeaseGiaddr
	}
	if !IsNil(o.LeaseId) {
		toSerialize["lease_id"] = o.LeaseId
	}
	if !IsNil(o.LeaseAddressAddr) {
		toSerialize["lease_address_addr"] = o.LeaseAddressAddr
	}
	if !IsNil(o.LeaseMacAddr) {
		toSerialize["lease_mac_addr"] = o.LeaseMacAddr
	}
	if !IsNil(o.LeaseName) {
		toSerialize["lease_name"] = o.LeaseName
	}
	if !IsNil(o.LeasePeriod) {
		toSerialize["lease_period"] = o.LeasePeriod
	}
	if !IsNil(o.LeaseRemoteId) {
		toSerialize["lease_remote_id"] = o.LeaseRemoteId
	}
	if !IsNil(o.LeaseTime) {
		toSerialize["lease_time"] = o.LeaseTime
	}
	if !IsNil(o.LeaseVendorId) {
		toSerialize["lease_vendor_id"] = o.LeaseVendorId
	}
	if !IsNil(o.RangeClassName) {
		toSerialize["range_class_name"] = o.RangeClassName
	}
	if !IsNil(o.RangeClassParameters) {
		toSerialize["range_class_parameters"] = o.RangeClassParameters
	}
	if !IsNil(o.RangeEndAddr) {
		toSerialize["range_end_addr"] = o.RangeEndAddr
	}
	if !IsNil(o.RangeFailoverName) {
		toSerialize["range_failover_name"] = o.RangeFailoverName
	}
	if !IsNil(o.RangeId) {
		toSerialize["range_id"] = o.RangeId
	}
	if !IsNil(o.RangeName) {
		toSerialize["range_name"] = o.RangeName
	}
	if !IsNil(o.RangeStartAddr) {
		toSerialize["range_start_addr"] = o.RangeStartAddr
	}
	if !IsNil(o.ScopeClassName) {
		toSerialize["scope_class_name"] = o.ScopeClassName
	}
	if !IsNil(o.ScopeId) {
		toSerialize["scope_id"] = o.ScopeId
	}
	if !IsNil(o.ScopeName) {
		toSerialize["scope_name"] = o.ScopeName
	}
	if !IsNil(o.ScopeNetAddr) {
		toSerialize["scope_net_addr"] = o.ScopeNetAddr
	}
	if !IsNil(o.ScopeSize) {
		toSerialize["scope_size"] = o.ScopeSize
	}
	if !IsNil(o.SharednetworkId) {
		toSerialize["sharednetwork_id"] = o.SharednetworkId
	}
	if !IsNil(o.SharednetworkName) {
		toSerialize["sharednetwork_name"] = o.SharednetworkName
	}
	if !IsNil(o.ServerHostaddr) {
		toSerialize["server_hostaddr"] = o.ServerHostaddr
	}
	if !IsNil(o.ServerAddr6) {
		toSerialize["server_addr6"] = o.ServerAddr6
	}
	if !IsNil(o.ServerAddr) {
		toSerialize["server_addr"] = o.ServerAddr
	}
	if !IsNil(o.LeaseMacVendor) {
		toSerialize["lease_mac_vendor"] = o.LeaseMacVendor
	}
	if !IsNil(o.LeaseMultistatus) {
		toSerialize["lease_multistatus"] = o.LeaseMultistatus
	}
	if !IsNil(o.ParameterRequestList) {
		toSerialize["parameter_request_list"] = o.ParameterRequestList
	}
	if !IsNil(o.Percent) {
		toSerialize["percent"] = o.Percent
	}
	if !IsNil(o.TimeToExpire) {
		toSerialize["time_to_expire"] = o.TimeToExpire
	}
	if !IsNil(o.SmartParentId) {
		toSerialize["smart_parent_id"] = o.SmartParentId
	}
	if !IsNil(o.SmartParentName) {
		toSerialize["smart_parent_name"] = o.SmartParentName
	}
	return toSerialize, nil
}

type NullableDataInnerDhcpLeaseData struct {
	value *DataInnerDhcpLeaseData
	isSet bool
}

func (v NullableDataInnerDhcpLeaseData) Get() *DataInnerDhcpLeaseData {
	return v.value
}

func (v *NullableDataInnerDhcpLeaseData) Set(val *DataInnerDhcpLeaseData) {
	v.value = val
	v.isSet = true
}

func (v NullableDataInnerDhcpLeaseData) IsSet() bool {
	return v.isSet
}

func (v *NullableDataInnerDhcpLeaseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataInnerDhcpLeaseData(val *DataInnerDhcpLeaseData) *NullableDataInnerDhcpLeaseData {
	return &NullableDataInnerDhcpLeaseData{value: val, isSet: true}
}

func (v NullableDataInnerDhcpLeaseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataInnerDhcpLeaseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
