/*
SOLIDserver API

OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2024 EfficientIP</p><p><em>All specifications and information regarding the products in this document are subject to change without notice and should not be construed as a commitment by EfficientIP. EfficientIP assumes no responsibility or liability for any mistakes or inaccuracies that may appear in this document. All statements and recommendations in this document are believed to be accurate but are presented without warranty. Users must take full responsibility for their application of any product.</em></p><p><em>This document aims at detailing EfficientIP proprietary solutions. As our solutions rely on several third-party products, created by other companies or organizations, it may redirect readers to third-party websites and documentation for further information. In such a case, EfficientIP cannot be liable or expected to provide said information on products they do maintain or created.</em></p><p>Generated (Friday 4th of October 2024 03:41:11 PM)</p>

API version: 2.0
Contact: support-api@efficientip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// checks if the IpamPoolAddInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpamPoolAddInput{}

// IpamPoolAddInput struct for IpamPoolAddInput
type IpamPoolAddInput struct {
	// The last IP address of the pool.
	PoolEndIpAddr *string `json:"pool_end_ip_addr,omitempty"`
	// The size of the pool, the number of IP addresses it contains.
	PoolSize *int32 `json:"pool_size,omitempty"`
	// The database identifier (ID) of the space, a unique numeric key value automatically incremented when you add a space. Use the ID to specify the space of your choice.
	SpaceId *int32 `json:"space_id,omitempty"`
	// The name of the space.
	SpaceName *string `json:"space_name,omitempty"`
	// The first IP address of the pool.
	PoolStartIpAddr *string `json:"pool_start_ip_addr,omitempty"`
	// The database identifier (ID) of the IPv4 network, a unique numeric key value automatically incremented when you add an IPv4 network. Use the ID to specify the IPv4 network of your choice.
	NetworkId *int32 `json:"network_id,omitempty"`
	// The name of the IPv4 pool, each IPv4 pool must have a unique name.
	PoolName *string `json:"pool_name,omitempty"`
	// The reservation status of the IPv4 pool. If set 1, the IP addresses it contains cannot be assigned.
	PoolReadOnly *int32 `json:"pool_read_only,omitempty"`
	// class parameters you want to delete from the object
	ClassParametersToDelete []string `json:"class_parameters_to_delete,omitempty"`
	// The name of the class to apply to the object you are adding. You must specify the class file directory, e.g. <b>my_directory/my_class.class</b> . You cannot use the classes <b>global</b> and <b>default</b>, they are reserved by the system.
	PoolClassName *string `json:"pool_class_name,omitempty"`
	// class parameters in json format
	PoolClassParameters []ApiClassParameterInputEntry `json:"pool_class_parameters,omitempty"`
	// A way to bypass <b>(accept) </b>any enabled rule that would return warning messages. If the service returns an error message, you cannot bypass the enabled rules.
	Warnings *string `json:"warnings,omitempty"`
}

// NewIpamPoolAddInput instantiates a new IpamPoolAddInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpamPoolAddInput() *IpamPoolAddInput {
	this := IpamPoolAddInput{}
	return &this
}

// NewIpamPoolAddInputWithDefaults instantiates a new IpamPoolAddInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpamPoolAddInputWithDefaults() *IpamPoolAddInput {
	this := IpamPoolAddInput{}
	return &this
}

// GetPoolEndIpAddr returns the PoolEndIpAddr field value if set, zero value otherwise.
func (o *IpamPoolAddInput) GetPoolEndIpAddr() string {
	if o == nil || IsNil(o.PoolEndIpAddr) {
		var ret string
		return ret
	}
	return *o.PoolEndIpAddr
}

// GetPoolEndIpAddrOk returns a tuple with the PoolEndIpAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamPoolAddInput) GetPoolEndIpAddrOk() (*string, bool) {
	if o == nil || IsNil(o.PoolEndIpAddr) {
		return nil, false
	}
	return o.PoolEndIpAddr, true
}

// HasPoolEndIpAddr returns a boolean if a field has been set.
func (o *IpamPoolAddInput) HasPoolEndIpAddr() bool {
	if o != nil && !IsNil(o.PoolEndIpAddr) {
		return true
	}

	return false
}

// SetPoolEndIpAddr gets a reference to the given string and assigns it to the PoolEndIpAddr field.
func (o *IpamPoolAddInput) SetPoolEndIpAddr(v string) {
	o.PoolEndIpAddr = &v
}

// GetPoolSize returns the PoolSize field value if set, zero value otherwise.
func (o *IpamPoolAddInput) GetPoolSize() int32 {
	if o == nil || IsNil(o.PoolSize) {
		var ret int32
		return ret
	}
	return *o.PoolSize
}

// GetPoolSizeOk returns a tuple with the PoolSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamPoolAddInput) GetPoolSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.PoolSize) {
		return nil, false
	}
	return o.PoolSize, true
}

// HasPoolSize returns a boolean if a field has been set.
func (o *IpamPoolAddInput) HasPoolSize() bool {
	if o != nil && !IsNil(o.PoolSize) {
		return true
	}

	return false
}

// SetPoolSize gets a reference to the given int32 and assigns it to the PoolSize field.
func (o *IpamPoolAddInput) SetPoolSize(v int32) {
	o.PoolSize = &v
}

// GetSpaceId returns the SpaceId field value if set, zero value otherwise.
func (o *IpamPoolAddInput) GetSpaceId() int32 {
	if o == nil || IsNil(o.SpaceId) {
		var ret int32
		return ret
	}
	return *o.SpaceId
}

// GetSpaceIdOk returns a tuple with the SpaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamPoolAddInput) GetSpaceIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SpaceId) {
		return nil, false
	}
	return o.SpaceId, true
}

// HasSpaceId returns a boolean if a field has been set.
func (o *IpamPoolAddInput) HasSpaceId() bool {
	if o != nil && !IsNil(o.SpaceId) {
		return true
	}

	return false
}

// SetSpaceId gets a reference to the given int32 and assigns it to the SpaceId field.
func (o *IpamPoolAddInput) SetSpaceId(v int32) {
	o.SpaceId = &v
}

// GetSpaceName returns the SpaceName field value if set, zero value otherwise.
func (o *IpamPoolAddInput) GetSpaceName() string {
	if o == nil || IsNil(o.SpaceName) {
		var ret string
		return ret
	}
	return *o.SpaceName
}

// GetSpaceNameOk returns a tuple with the SpaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamPoolAddInput) GetSpaceNameOk() (*string, bool) {
	if o == nil || IsNil(o.SpaceName) {
		return nil, false
	}
	return o.SpaceName, true
}

// HasSpaceName returns a boolean if a field has been set.
func (o *IpamPoolAddInput) HasSpaceName() bool {
	if o != nil && !IsNil(o.SpaceName) {
		return true
	}

	return false
}

// SetSpaceName gets a reference to the given string and assigns it to the SpaceName field.
func (o *IpamPoolAddInput) SetSpaceName(v string) {
	o.SpaceName = &v
}

// GetPoolStartIpAddr returns the PoolStartIpAddr field value if set, zero value otherwise.
func (o *IpamPoolAddInput) GetPoolStartIpAddr() string {
	if o == nil || IsNil(o.PoolStartIpAddr) {
		var ret string
		return ret
	}
	return *o.PoolStartIpAddr
}

// GetPoolStartIpAddrOk returns a tuple with the PoolStartIpAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamPoolAddInput) GetPoolStartIpAddrOk() (*string, bool) {
	if o == nil || IsNil(o.PoolStartIpAddr) {
		return nil, false
	}
	return o.PoolStartIpAddr, true
}

// HasPoolStartIpAddr returns a boolean if a field has been set.
func (o *IpamPoolAddInput) HasPoolStartIpAddr() bool {
	if o != nil && !IsNil(o.PoolStartIpAddr) {
		return true
	}

	return false
}

// SetPoolStartIpAddr gets a reference to the given string and assigns it to the PoolStartIpAddr field.
func (o *IpamPoolAddInput) SetPoolStartIpAddr(v string) {
	o.PoolStartIpAddr = &v
}

// GetNetworkId returns the NetworkId field value if set, zero value otherwise.
func (o *IpamPoolAddInput) GetNetworkId() int32 {
	if o == nil || IsNil(o.NetworkId) {
		var ret int32
		return ret
	}
	return *o.NetworkId
}

// GetNetworkIdOk returns a tuple with the NetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamPoolAddInput) GetNetworkIdOk() (*int32, bool) {
	if o == nil || IsNil(o.NetworkId) {
		return nil, false
	}
	return o.NetworkId, true
}

// HasNetworkId returns a boolean if a field has been set.
func (o *IpamPoolAddInput) HasNetworkId() bool {
	if o != nil && !IsNil(o.NetworkId) {
		return true
	}

	return false
}

// SetNetworkId gets a reference to the given int32 and assigns it to the NetworkId field.
func (o *IpamPoolAddInput) SetNetworkId(v int32) {
	o.NetworkId = &v
}

// GetPoolName returns the PoolName field value if set, zero value otherwise.
func (o *IpamPoolAddInput) GetPoolName() string {
	if o == nil || IsNil(o.PoolName) {
		var ret string
		return ret
	}
	return *o.PoolName
}

// GetPoolNameOk returns a tuple with the PoolName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamPoolAddInput) GetPoolNameOk() (*string, bool) {
	if o == nil || IsNil(o.PoolName) {
		return nil, false
	}
	return o.PoolName, true
}

// HasPoolName returns a boolean if a field has been set.
func (o *IpamPoolAddInput) HasPoolName() bool {
	if o != nil && !IsNil(o.PoolName) {
		return true
	}

	return false
}

// SetPoolName gets a reference to the given string and assigns it to the PoolName field.
func (o *IpamPoolAddInput) SetPoolName(v string) {
	o.PoolName = &v
}

// GetPoolReadOnly returns the PoolReadOnly field value if set, zero value otherwise.
func (o *IpamPoolAddInput) GetPoolReadOnly() int32 {
	if o == nil || IsNil(o.PoolReadOnly) {
		var ret int32
		return ret
	}
	return *o.PoolReadOnly
}

// GetPoolReadOnlyOk returns a tuple with the PoolReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamPoolAddInput) GetPoolReadOnlyOk() (*int32, bool) {
	if o == nil || IsNil(o.PoolReadOnly) {
		return nil, false
	}
	return o.PoolReadOnly, true
}

// HasPoolReadOnly returns a boolean if a field has been set.
func (o *IpamPoolAddInput) HasPoolReadOnly() bool {
	if o != nil && !IsNil(o.PoolReadOnly) {
		return true
	}

	return false
}

// SetPoolReadOnly gets a reference to the given int32 and assigns it to the PoolReadOnly field.
func (o *IpamPoolAddInput) SetPoolReadOnly(v int32) {
	o.PoolReadOnly = &v
}

// GetClassParametersToDelete returns the ClassParametersToDelete field value if set, zero value otherwise.
func (o *IpamPoolAddInput) GetClassParametersToDelete() []string {
	if o == nil || IsNil(o.ClassParametersToDelete) {
		var ret []string
		return ret
	}
	return o.ClassParametersToDelete
}

// GetClassParametersToDeleteOk returns a tuple with the ClassParametersToDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamPoolAddInput) GetClassParametersToDeleteOk() ([]string, bool) {
	if o == nil || IsNil(o.ClassParametersToDelete) {
		return nil, false
	}
	return o.ClassParametersToDelete, true
}

// HasClassParametersToDelete returns a boolean if a field has been set.
func (o *IpamPoolAddInput) HasClassParametersToDelete() bool {
	if o != nil && !IsNil(o.ClassParametersToDelete) {
		return true
	}

	return false
}

// SetClassParametersToDelete gets a reference to the given []string and assigns it to the ClassParametersToDelete field.
func (o *IpamPoolAddInput) SetClassParametersToDelete(v []string) {
	o.ClassParametersToDelete = v
}

// GetPoolClassName returns the PoolClassName field value if set, zero value otherwise.
func (o *IpamPoolAddInput) GetPoolClassName() string {
	if o == nil || IsNil(o.PoolClassName) {
		var ret string
		return ret
	}
	return *o.PoolClassName
}

// GetPoolClassNameOk returns a tuple with the PoolClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamPoolAddInput) GetPoolClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.PoolClassName) {
		return nil, false
	}
	return o.PoolClassName, true
}

// HasPoolClassName returns a boolean if a field has been set.
func (o *IpamPoolAddInput) HasPoolClassName() bool {
	if o != nil && !IsNil(o.PoolClassName) {
		return true
	}

	return false
}

// SetPoolClassName gets a reference to the given string and assigns it to the PoolClassName field.
func (o *IpamPoolAddInput) SetPoolClassName(v string) {
	o.PoolClassName = &v
}

// GetPoolClassParameters returns the PoolClassParameters field value if set, zero value otherwise.
func (o *IpamPoolAddInput) GetPoolClassParameters() []ApiClassParameterInputEntry {
	if o == nil || IsNil(o.PoolClassParameters) {
		var ret []ApiClassParameterInputEntry
		return ret
	}
	return o.PoolClassParameters
}

// GetPoolClassParametersOk returns a tuple with the PoolClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamPoolAddInput) GetPoolClassParametersOk() ([]ApiClassParameterInputEntry, bool) {
	if o == nil || IsNil(o.PoolClassParameters) {
		return nil, false
	}
	return o.PoolClassParameters, true
}

// HasPoolClassParameters returns a boolean if a field has been set.
func (o *IpamPoolAddInput) HasPoolClassParameters() bool {
	if o != nil && !IsNil(o.PoolClassParameters) {
		return true
	}

	return false
}

// SetPoolClassParameters gets a reference to the given []ApiClassParameterInputEntry and assigns it to the PoolClassParameters field.
func (o *IpamPoolAddInput) SetPoolClassParameters(v []ApiClassParameterInputEntry) {
	o.PoolClassParameters = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *IpamPoolAddInput) GetWarnings() string {
	if o == nil || IsNil(o.Warnings) {
		var ret string
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamPoolAddInput) GetWarningsOk() (*string, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *IpamPoolAddInput) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given string and assigns it to the Warnings field.
func (o *IpamPoolAddInput) SetWarnings(v string) {
	o.Warnings = &v
}

func (o IpamPoolAddInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpamPoolAddInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PoolEndIpAddr) {
		toSerialize["pool_end_ip_addr"] = o.PoolEndIpAddr
	}
	if !IsNil(o.PoolSize) {
		toSerialize["pool_size"] = o.PoolSize
	}
	if !IsNil(o.SpaceId) {
		toSerialize["space_id"] = o.SpaceId
	}
	if !IsNil(o.SpaceName) {
		toSerialize["space_name"] = o.SpaceName
	}
	if !IsNil(o.PoolStartIpAddr) {
		toSerialize["pool_start_ip_addr"] = o.PoolStartIpAddr
	}
	if !IsNil(o.NetworkId) {
		toSerialize["network_id"] = o.NetworkId
	}
	if !IsNil(o.PoolName) {
		toSerialize["pool_name"] = o.PoolName
	}
	if !IsNil(o.PoolReadOnly) {
		toSerialize["pool_read_only"] = o.PoolReadOnly
	}
	if !IsNil(o.ClassParametersToDelete) {
		toSerialize["class_parameters_to_delete"] = o.ClassParametersToDelete
	}
	if !IsNil(o.PoolClassName) {
		toSerialize["pool_class_name"] = o.PoolClassName
	}
	if !IsNil(o.PoolClassParameters) {
		toSerialize["pool_class_parameters"] = o.PoolClassParameters
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableIpamPoolAddInput struct {
	value *IpamPoolAddInput
	isSet bool
}

func (v NullableIpamPoolAddInput) Get() *IpamPoolAddInput {
	return v.value
}

func (v *NullableIpamPoolAddInput) Set(val *IpamPoolAddInput) {
	v.value = val
	v.isSet = true
}

func (v NullableIpamPoolAddInput) IsSet() bool {
	return v.isSet
}

func (v *NullableIpamPoolAddInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpamPoolAddInput(val *IpamPoolAddInput) *NullableIpamPoolAddInput {
	return &NullableIpamPoolAddInput{value: val, isSet: true}
}

func (v NullableIpamPoolAddInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpamPoolAddInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
