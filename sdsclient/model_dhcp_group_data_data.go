/*
 * SOLIDserver API
 *
 * OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2021 EfficientIP</p><p><em>All specifications and information regarding the products in  this document are subject to change without notice and should not be  construed as a commitment by EfficientIP. EfficientIP assumes no  responsibility or liability for any mistakes or inaccuracies that may appear  in this document. All statements and recommendations in this document are  believed to be accurate but are presented without warranty. Users must take  full responsibility for their application of any product.</em></p><p>Generated (Monday 14th of June 2021 12:30:34 PM)</p>
 *
 * API version: 2.0
 * Contact: support-api@efficientip.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// DhcpGroupDataData struct for DhcpGroupDataData
type DhcpGroupDataData struct {
	// The delay of creation status. <b>1</b> indicates that the object is not created yet.
	GroupDelayedCreateTime *string `json:"group_delayed_create_time,omitempty"`
	// The delay of deletion status. <b>1</b> indicates that the object is not deleted yet.
	GroupDelayedDeleteTime *string `json:"group_delayed_delete_time,omitempty"`
	// The name of the class applied to the DHCPv4 server the object belongs to, it can be preceded by the class directory.
	ServerClassName *string `json:"server_class_name,omitempty"`
	// #general.output.class_parameters#
	ServerClassParameters *[]ApiClassParameterOutputEntry `json:"server_class_parameters,omitempty"`
	// The database identifier (ID) of the DHCPv4 server the object belongs to.
	ServerId *string `json:"server_id,omitempty"`
	// The name of the DHCPv4 server the object belongs to.
	ServerName *string `json:"server_name,omitempty"`
	// The type of the DHCPv4 server the object belongs to: <table><caption>dhcp_type possible values</caption><br/><thead><tr><th>Type</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >ipm</td><td >EfficientIP DHCP server or EfficientIP DHCP Package</td></tr><tr><td >msrpc</td><td >Microsoft DHCP server</td></tr><tr><td >dcs</td><td >Nominum DCS server</td></tr><tr><td >vdhcp</td><td >EfficientIP DHCP smart architecture</td></tr></tbody></table></p><br/>
	ServerType *string `json:"server_type,omitempty"`
	// The version details of the DHCPv4 server the object belongs to.
	ServerVersion *string `json:"server_version,omitempty"`
	// The name of the class applied to the DHCPv4 group, it can be preceded by the class directory.
	GroupClassName *string `json:"group_class_name,omitempty"`
	// #general.output.class_parameters#
	GroupClassParameters *[]ApiClassParameterOutputEntry `json:"group_class_parameters,omitempty"`
	// The database identifier (ID) of the DHCPv4 group.
	GroupId *string `json:"group_id,omitempty"`
	// The name of the DHCPv4 group.
	GroupName *string `json:"group_name,omitempty"`
	// The IP address of the DHCP server the object belongs to, in hexadecimal format.
	ServerAddr *string `json:"server_addr,omitempty"`
	// The Multi-status information is displayed as follows: <i>&lt;number-of-instances&gt;@&lt;message-number&gt;@&lt;multi-status-severity&gt;@&lt;module&gt;</i>. The different severity levels are:<br><b>Multi-status severity levels</b>    <table border=1>        <thead>        <tr >            <td><b>Message number</b></td>            <td><b>Severity</b></td>            <td><b>Description</b></td>        </tr>        </thead>        <tbody>        <tr  valign=middle>            <td>0 - 16</td>            <td>Emergency</td>            <td>The object configuration prevents the system from running properly. Action is required.</td>        </tr>        <tr  valign=middle>            <td>17 - 33</td>            <td>Critical</td>            <td>The object configuration is in critical conditions. Immediate action is recommended.</td>        </tr>        <tr  valign=middle>            <td>34 - 50</td>            <td>Error</td>            <td>The object configuration failed at some level. Action is recommended.</td>        </tr>        <tr  valign=middle>            <td>51 - 66</td>            <td>Warning</td>            <td>The object configuration triggers error messages if no action is taken. Action to be taken at your discretion.</td>        </tr>        <tr  valign=middle>            <td>67 - 83</td>            <td>Notice</td>            <td>The object configuration is normal but undergoing events that might trigger errors. No immediate action required.</td>        </tr>        <tr  valign=middle>            <td>84 - 100</td>            <td>Informational</td>            <td>The object configuration is normal, operational messages (might inform you about potential incompatibilities with other modules, etc). No action required.</td>        </tr>        </tbody></table>
	GroupMultistatus *string `json:"group_multistatus,omitempty"`
	// The database identifier (ID) of the DHCPv4 smart architecture managing the DHCPv4 server the object belongs to. <b>0</b> indicates that the server the object belongs to is not managed by a smart architecture or is a smart architecture itself.
	SmartParentId *string `json:"smart_parent_id,omitempty"`
	// The name of the DHCPv4 smart architecture managing the DHCPv4 server the object belongs to. <b>#</b> indicates that the server is not managed by a smart architecture or is a smart architecture itself.
	SmartParentName *string `json:"smart_parent_name,omitempty"`
}

// NewDhcpGroupDataData instantiates a new DhcpGroupDataData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDhcpGroupDataData() *DhcpGroupDataData {
	this := DhcpGroupDataData{}
	return &this
}

// NewDhcpGroupDataDataWithDefaults instantiates a new DhcpGroupDataData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDhcpGroupDataDataWithDefaults() *DhcpGroupDataData {
	this := DhcpGroupDataData{}
	return &this
}

// GetGroupDelayedCreateTime returns the GroupDelayedCreateTime field value if set, zero value otherwise.
func (o *DhcpGroupDataData) GetGroupDelayedCreateTime() string {
	if o == nil || o.GroupDelayedCreateTime == nil {
		var ret string
		return ret
	}
	return *o.GroupDelayedCreateTime
}

// GetGroupDelayedCreateTimeOk returns a tuple with the GroupDelayedCreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpGroupDataData) GetGroupDelayedCreateTimeOk() (*string, bool) {
	if o == nil || o.GroupDelayedCreateTime == nil {
		return nil, false
	}
	return o.GroupDelayedCreateTime, true
}

// HasGroupDelayedCreateTime returns a boolean if a field has been set.
func (o *DhcpGroupDataData) HasGroupDelayedCreateTime() bool {
	if o != nil && o.GroupDelayedCreateTime != nil {
		return true
	}

	return false
}

// SetGroupDelayedCreateTime gets a reference to the given string and assigns it to the GroupDelayedCreateTime field.
func (o *DhcpGroupDataData) SetGroupDelayedCreateTime(v string) {
	o.GroupDelayedCreateTime = &v
}

// GetGroupDelayedDeleteTime returns the GroupDelayedDeleteTime field value if set, zero value otherwise.
func (o *DhcpGroupDataData) GetGroupDelayedDeleteTime() string {
	if o == nil || o.GroupDelayedDeleteTime == nil {
		var ret string
		return ret
	}
	return *o.GroupDelayedDeleteTime
}

// GetGroupDelayedDeleteTimeOk returns a tuple with the GroupDelayedDeleteTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpGroupDataData) GetGroupDelayedDeleteTimeOk() (*string, bool) {
	if o == nil || o.GroupDelayedDeleteTime == nil {
		return nil, false
	}
	return o.GroupDelayedDeleteTime, true
}

// HasGroupDelayedDeleteTime returns a boolean if a field has been set.
func (o *DhcpGroupDataData) HasGroupDelayedDeleteTime() bool {
	if o != nil && o.GroupDelayedDeleteTime != nil {
		return true
	}

	return false
}

// SetGroupDelayedDeleteTime gets a reference to the given string and assigns it to the GroupDelayedDeleteTime field.
func (o *DhcpGroupDataData) SetGroupDelayedDeleteTime(v string) {
	o.GroupDelayedDeleteTime = &v
}

// GetServerClassName returns the ServerClassName field value if set, zero value otherwise.
func (o *DhcpGroupDataData) GetServerClassName() string {
	if o == nil || o.ServerClassName == nil {
		var ret string
		return ret
	}
	return *o.ServerClassName
}

// GetServerClassNameOk returns a tuple with the ServerClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpGroupDataData) GetServerClassNameOk() (*string, bool) {
	if o == nil || o.ServerClassName == nil {
		return nil, false
	}
	return o.ServerClassName, true
}

// HasServerClassName returns a boolean if a field has been set.
func (o *DhcpGroupDataData) HasServerClassName() bool {
	if o != nil && o.ServerClassName != nil {
		return true
	}

	return false
}

// SetServerClassName gets a reference to the given string and assigns it to the ServerClassName field.
func (o *DhcpGroupDataData) SetServerClassName(v string) {
	o.ServerClassName = &v
}

// GetServerClassParameters returns the ServerClassParameters field value if set, zero value otherwise.
func (o *DhcpGroupDataData) GetServerClassParameters() []ApiClassParameterOutputEntry {
	if o == nil || o.ServerClassParameters == nil {
		var ret []ApiClassParameterOutputEntry
		return ret
	}
	return *o.ServerClassParameters
}

// GetServerClassParametersOk returns a tuple with the ServerClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpGroupDataData) GetServerClassParametersOk() (*[]ApiClassParameterOutputEntry, bool) {
	if o == nil || o.ServerClassParameters == nil {
		return nil, false
	}
	return o.ServerClassParameters, true
}

// HasServerClassParameters returns a boolean if a field has been set.
func (o *DhcpGroupDataData) HasServerClassParameters() bool {
	if o != nil && o.ServerClassParameters != nil {
		return true
	}

	return false
}

// SetServerClassParameters gets a reference to the given []ApiClassParameterOutputEntry and assigns it to the ServerClassParameters field.
func (o *DhcpGroupDataData) SetServerClassParameters(v []ApiClassParameterOutputEntry) {
	o.ServerClassParameters = &v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *DhcpGroupDataData) GetServerId() string {
	if o == nil || o.ServerId == nil {
		var ret string
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpGroupDataData) GetServerIdOk() (*string, bool) {
	if o == nil || o.ServerId == nil {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *DhcpGroupDataData) HasServerId() bool {
	if o != nil && o.ServerId != nil {
		return true
	}

	return false
}

// SetServerId gets a reference to the given string and assigns it to the ServerId field.
func (o *DhcpGroupDataData) SetServerId(v string) {
	o.ServerId = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *DhcpGroupDataData) GetServerName() string {
	if o == nil || o.ServerName == nil {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpGroupDataData) GetServerNameOk() (*string, bool) {
	if o == nil || o.ServerName == nil {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *DhcpGroupDataData) HasServerName() bool {
	if o != nil && o.ServerName != nil {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *DhcpGroupDataData) SetServerName(v string) {
	o.ServerName = &v
}

// GetServerType returns the ServerType field value if set, zero value otherwise.
func (o *DhcpGroupDataData) GetServerType() string {
	if o == nil || o.ServerType == nil {
		var ret string
		return ret
	}
	return *o.ServerType
}

// GetServerTypeOk returns a tuple with the ServerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpGroupDataData) GetServerTypeOk() (*string, bool) {
	if o == nil || o.ServerType == nil {
		return nil, false
	}
	return o.ServerType, true
}

// HasServerType returns a boolean if a field has been set.
func (o *DhcpGroupDataData) HasServerType() bool {
	if o != nil && o.ServerType != nil {
		return true
	}

	return false
}

// SetServerType gets a reference to the given string and assigns it to the ServerType field.
func (o *DhcpGroupDataData) SetServerType(v string) {
	o.ServerType = &v
}

// GetServerVersion returns the ServerVersion field value if set, zero value otherwise.
func (o *DhcpGroupDataData) GetServerVersion() string {
	if o == nil || o.ServerVersion == nil {
		var ret string
		return ret
	}
	return *o.ServerVersion
}

// GetServerVersionOk returns a tuple with the ServerVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpGroupDataData) GetServerVersionOk() (*string, bool) {
	if o == nil || o.ServerVersion == nil {
		return nil, false
	}
	return o.ServerVersion, true
}

// HasServerVersion returns a boolean if a field has been set.
func (o *DhcpGroupDataData) HasServerVersion() bool {
	if o != nil && o.ServerVersion != nil {
		return true
	}

	return false
}

// SetServerVersion gets a reference to the given string and assigns it to the ServerVersion field.
func (o *DhcpGroupDataData) SetServerVersion(v string) {
	o.ServerVersion = &v
}

// GetGroupClassName returns the GroupClassName field value if set, zero value otherwise.
func (o *DhcpGroupDataData) GetGroupClassName() string {
	if o == nil || o.GroupClassName == nil {
		var ret string
		return ret
	}
	return *o.GroupClassName
}

// GetGroupClassNameOk returns a tuple with the GroupClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpGroupDataData) GetGroupClassNameOk() (*string, bool) {
	if o == nil || o.GroupClassName == nil {
		return nil, false
	}
	return o.GroupClassName, true
}

// HasGroupClassName returns a boolean if a field has been set.
func (o *DhcpGroupDataData) HasGroupClassName() bool {
	if o != nil && o.GroupClassName != nil {
		return true
	}

	return false
}

// SetGroupClassName gets a reference to the given string and assigns it to the GroupClassName field.
func (o *DhcpGroupDataData) SetGroupClassName(v string) {
	o.GroupClassName = &v
}

// GetGroupClassParameters returns the GroupClassParameters field value if set, zero value otherwise.
func (o *DhcpGroupDataData) GetGroupClassParameters() []ApiClassParameterOutputEntry {
	if o == nil || o.GroupClassParameters == nil {
		var ret []ApiClassParameterOutputEntry
		return ret
	}
	return *o.GroupClassParameters
}

// GetGroupClassParametersOk returns a tuple with the GroupClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpGroupDataData) GetGroupClassParametersOk() (*[]ApiClassParameterOutputEntry, bool) {
	if o == nil || o.GroupClassParameters == nil {
		return nil, false
	}
	return o.GroupClassParameters, true
}

// HasGroupClassParameters returns a boolean if a field has been set.
func (o *DhcpGroupDataData) HasGroupClassParameters() bool {
	if o != nil && o.GroupClassParameters != nil {
		return true
	}

	return false
}

// SetGroupClassParameters gets a reference to the given []ApiClassParameterOutputEntry and assigns it to the GroupClassParameters field.
func (o *DhcpGroupDataData) SetGroupClassParameters(v []ApiClassParameterOutputEntry) {
	o.GroupClassParameters = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *DhcpGroupDataData) GetGroupId() string {
	if o == nil || o.GroupId == nil {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpGroupDataData) GetGroupIdOk() (*string, bool) {
	if o == nil || o.GroupId == nil {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *DhcpGroupDataData) HasGroupId() bool {
	if o != nil && o.GroupId != nil {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *DhcpGroupDataData) SetGroupId(v string) {
	o.GroupId = &v
}

// GetGroupName returns the GroupName field value if set, zero value otherwise.
func (o *DhcpGroupDataData) GetGroupName() string {
	if o == nil || o.GroupName == nil {
		var ret string
		return ret
	}
	return *o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpGroupDataData) GetGroupNameOk() (*string, bool) {
	if o == nil || o.GroupName == nil {
		return nil, false
	}
	return o.GroupName, true
}

// HasGroupName returns a boolean if a field has been set.
func (o *DhcpGroupDataData) HasGroupName() bool {
	if o != nil && o.GroupName != nil {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given string and assigns it to the GroupName field.
func (o *DhcpGroupDataData) SetGroupName(v string) {
	o.GroupName = &v
}

// GetServerAddr returns the ServerAddr field value if set, zero value otherwise.
func (o *DhcpGroupDataData) GetServerAddr() string {
	if o == nil || o.ServerAddr == nil {
		var ret string
		return ret
	}
	return *o.ServerAddr
}

// GetServerAddrOk returns a tuple with the ServerAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpGroupDataData) GetServerAddrOk() (*string, bool) {
	if o == nil || o.ServerAddr == nil {
		return nil, false
	}
	return o.ServerAddr, true
}

// HasServerAddr returns a boolean if a field has been set.
func (o *DhcpGroupDataData) HasServerAddr() bool {
	if o != nil && o.ServerAddr != nil {
		return true
	}

	return false
}

// SetServerAddr gets a reference to the given string and assigns it to the ServerAddr field.
func (o *DhcpGroupDataData) SetServerAddr(v string) {
	o.ServerAddr = &v
}

// GetGroupMultistatus returns the GroupMultistatus field value if set, zero value otherwise.
func (o *DhcpGroupDataData) GetGroupMultistatus() string {
	if o == nil || o.GroupMultistatus == nil {
		var ret string
		return ret
	}
	return *o.GroupMultistatus
}

// GetGroupMultistatusOk returns a tuple with the GroupMultistatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpGroupDataData) GetGroupMultistatusOk() (*string, bool) {
	if o == nil || o.GroupMultistatus == nil {
		return nil, false
	}
	return o.GroupMultistatus, true
}

// HasGroupMultistatus returns a boolean if a field has been set.
func (o *DhcpGroupDataData) HasGroupMultistatus() bool {
	if o != nil && o.GroupMultistatus != nil {
		return true
	}

	return false
}

// SetGroupMultistatus gets a reference to the given string and assigns it to the GroupMultistatus field.
func (o *DhcpGroupDataData) SetGroupMultistatus(v string) {
	o.GroupMultistatus = &v
}

// GetSmartParentId returns the SmartParentId field value if set, zero value otherwise.
func (o *DhcpGroupDataData) GetSmartParentId() string {
	if o == nil || o.SmartParentId == nil {
		var ret string
		return ret
	}
	return *o.SmartParentId
}

// GetSmartParentIdOk returns a tuple with the SmartParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpGroupDataData) GetSmartParentIdOk() (*string, bool) {
	if o == nil || o.SmartParentId == nil {
		return nil, false
	}
	return o.SmartParentId, true
}

// HasSmartParentId returns a boolean if a field has been set.
func (o *DhcpGroupDataData) HasSmartParentId() bool {
	if o != nil && o.SmartParentId != nil {
		return true
	}

	return false
}

// SetSmartParentId gets a reference to the given string and assigns it to the SmartParentId field.
func (o *DhcpGroupDataData) SetSmartParentId(v string) {
	o.SmartParentId = &v
}

// GetSmartParentName returns the SmartParentName field value if set, zero value otherwise.
func (o *DhcpGroupDataData) GetSmartParentName() string {
	if o == nil || o.SmartParentName == nil {
		var ret string
		return ret
	}
	return *o.SmartParentName
}

// GetSmartParentNameOk returns a tuple with the SmartParentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpGroupDataData) GetSmartParentNameOk() (*string, bool) {
	if o == nil || o.SmartParentName == nil {
		return nil, false
	}
	return o.SmartParentName, true
}

// HasSmartParentName returns a boolean if a field has been set.
func (o *DhcpGroupDataData) HasSmartParentName() bool {
	if o != nil && o.SmartParentName != nil {
		return true
	}

	return false
}

// SetSmartParentName gets a reference to the given string and assigns it to the SmartParentName field.
func (o *DhcpGroupDataData) SetSmartParentName(v string) {
	o.SmartParentName = &v
}

func (o DhcpGroupDataData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GroupDelayedCreateTime != nil {
		toSerialize["group_delayed_create_time"] = o.GroupDelayedCreateTime
	}
	if o.GroupDelayedDeleteTime != nil {
		toSerialize["group_delayed_delete_time"] = o.GroupDelayedDeleteTime
	}
	if o.ServerClassName != nil {
		toSerialize["server_class_name"] = o.ServerClassName
	}
	if o.ServerClassParameters != nil {
		toSerialize["server_class_parameters"] = o.ServerClassParameters
	}
	if o.ServerId != nil {
		toSerialize["server_id"] = o.ServerId
	}
	if o.ServerName != nil {
		toSerialize["server_name"] = o.ServerName
	}
	if o.ServerType != nil {
		toSerialize["server_type"] = o.ServerType
	}
	if o.ServerVersion != nil {
		toSerialize["server_version"] = o.ServerVersion
	}
	if o.GroupClassName != nil {
		toSerialize["group_class_name"] = o.GroupClassName
	}
	if o.GroupClassParameters != nil {
		toSerialize["group_class_parameters"] = o.GroupClassParameters
	}
	if o.GroupId != nil {
		toSerialize["group_id"] = o.GroupId
	}
	if o.GroupName != nil {
		toSerialize["group_name"] = o.GroupName
	}
	if o.ServerAddr != nil {
		toSerialize["server_addr"] = o.ServerAddr
	}
	if o.GroupMultistatus != nil {
		toSerialize["group_multistatus"] = o.GroupMultistatus
	}
	if o.SmartParentId != nil {
		toSerialize["smart_parent_id"] = o.SmartParentId
	}
	if o.SmartParentName != nil {
		toSerialize["smart_parent_name"] = o.SmartParentName
	}
	return json.Marshal(toSerialize)
}

type NullableDhcpGroupDataData struct {
	value *DhcpGroupDataData
	isSet bool
}

func (v NullableDhcpGroupDataData) Get() *DhcpGroupDataData {
	return v.value
}

func (v *NullableDhcpGroupDataData) Set(val *DhcpGroupDataData) {
	v.value = val
	v.isSet = true
}

func (v NullableDhcpGroupDataData) IsSet() bool {
	return v.isSet
}

func (v *NullableDhcpGroupDataData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDhcpGroupDataData(val *DhcpGroupDataData) *NullableDhcpGroupDataData {
	return &NullableDhcpGroupDataData{value: val, isSet: true}
}

func (v NullableDhcpGroupDataData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDhcpGroupDataData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


