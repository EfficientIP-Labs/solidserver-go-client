/*
SOLIDserver API

OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2024 EfficientIP</p><p><em>All specifications and information regarding the products in this document are subject to change without notice and should not be construed as a commitment by EfficientIP. EfficientIP assumes no responsibility or liability for any mistakes or inaccuracies that may appear in this document. All statements and recommendations in this document are believed to be accurate but are presented without warranty. Users must take full responsibility for their application of any product.</em></p><p><em>This document aims at detailing EfficientIP proprietary solutions. As our solutions rely on several third-party products, created by other companies or organizations, it may redirect readers to third-party websites and documentation for further information. In such a case, EfficientIP cannot be liable or expected to provide said information on products they do maintain or created.</em></p><p>Generated (Friday 4th of October 2024 03:41:11 PM)</p>

API version: 2.0
Contact: support-api@efficientip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// checks if the IpamAliasAddInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpamAliasAddInput{}

// IpamAliasAddInput struct for IpamAliasAddInput
type IpamAliasAddInput struct {
	// The IP address.
	AddressHostaddr *string `json:"address_hostaddr,omitempty"`
	// The database identifier (ID) of the IPv4 address, a unique numeric key value automatically incremented when you add an IPv4 address. Use the ID to specify the IPv4 address of your choice.
	AddressId *int32 `json:"address_id,omitempty"`
	// The name of the IPv4 alias.
	AliasName *string `json:"alias_name,omitempty"`
	// The database identifier (ID) of the space, a unique numeric key value automatically incremented when you add a space. Use the ID to specify the space of your choice.
	SpaceId *int32 `json:"space_id,omitempty"`
	// The name of the space.
	SpaceName *string `json:"space_name,omitempty"`
	// The type of the alias.
	AliasType *string `json:"alias_type,omitempty"`
	// A way to bypass <b>(accept) </b>any enabled rule that would return warning messages. If the service returns an error message, you cannot bypass the enabled rules.
	Warnings *string `json:"warnings,omitempty"`
}

// NewIpamAliasAddInput instantiates a new IpamAliasAddInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpamAliasAddInput() *IpamAliasAddInput {
	this := IpamAliasAddInput{}
	return &this
}

// NewIpamAliasAddInputWithDefaults instantiates a new IpamAliasAddInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpamAliasAddInputWithDefaults() *IpamAliasAddInput {
	this := IpamAliasAddInput{}
	return &this
}

// GetAddressHostaddr returns the AddressHostaddr field value if set, zero value otherwise.
func (o *IpamAliasAddInput) GetAddressHostaddr() string {
	if o == nil || IsNil(o.AddressHostaddr) {
		var ret string
		return ret
	}
	return *o.AddressHostaddr
}

// GetAddressHostaddrOk returns a tuple with the AddressHostaddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamAliasAddInput) GetAddressHostaddrOk() (*string, bool) {
	if o == nil || IsNil(o.AddressHostaddr) {
		return nil, false
	}
	return o.AddressHostaddr, true
}

// HasAddressHostaddr returns a boolean if a field has been set.
func (o *IpamAliasAddInput) HasAddressHostaddr() bool {
	if o != nil && !IsNil(o.AddressHostaddr) {
		return true
	}

	return false
}

// SetAddressHostaddr gets a reference to the given string and assigns it to the AddressHostaddr field.
func (o *IpamAliasAddInput) SetAddressHostaddr(v string) {
	o.AddressHostaddr = &v
}

// GetAddressId returns the AddressId field value if set, zero value otherwise.
func (o *IpamAliasAddInput) GetAddressId() int32 {
	if o == nil || IsNil(o.AddressId) {
		var ret int32
		return ret
	}
	return *o.AddressId
}

// GetAddressIdOk returns a tuple with the AddressId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamAliasAddInput) GetAddressIdOk() (*int32, bool) {
	if o == nil || IsNil(o.AddressId) {
		return nil, false
	}
	return o.AddressId, true
}

// HasAddressId returns a boolean if a field has been set.
func (o *IpamAliasAddInput) HasAddressId() bool {
	if o != nil && !IsNil(o.AddressId) {
		return true
	}

	return false
}

// SetAddressId gets a reference to the given int32 and assigns it to the AddressId field.
func (o *IpamAliasAddInput) SetAddressId(v int32) {
	o.AddressId = &v
}

// GetAliasName returns the AliasName field value if set, zero value otherwise.
func (o *IpamAliasAddInput) GetAliasName() string {
	if o == nil || IsNil(o.AliasName) {
		var ret string
		return ret
	}
	return *o.AliasName
}

// GetAliasNameOk returns a tuple with the AliasName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamAliasAddInput) GetAliasNameOk() (*string, bool) {
	if o == nil || IsNil(o.AliasName) {
		return nil, false
	}
	return o.AliasName, true
}

// HasAliasName returns a boolean if a field has been set.
func (o *IpamAliasAddInput) HasAliasName() bool {
	if o != nil && !IsNil(o.AliasName) {
		return true
	}

	return false
}

// SetAliasName gets a reference to the given string and assigns it to the AliasName field.
func (o *IpamAliasAddInput) SetAliasName(v string) {
	o.AliasName = &v
}

// GetSpaceId returns the SpaceId field value if set, zero value otherwise.
func (o *IpamAliasAddInput) GetSpaceId() int32 {
	if o == nil || IsNil(o.SpaceId) {
		var ret int32
		return ret
	}
	return *o.SpaceId
}

// GetSpaceIdOk returns a tuple with the SpaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamAliasAddInput) GetSpaceIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SpaceId) {
		return nil, false
	}
	return o.SpaceId, true
}

// HasSpaceId returns a boolean if a field has been set.
func (o *IpamAliasAddInput) HasSpaceId() bool {
	if o != nil && !IsNil(o.SpaceId) {
		return true
	}

	return false
}

// SetSpaceId gets a reference to the given int32 and assigns it to the SpaceId field.
func (o *IpamAliasAddInput) SetSpaceId(v int32) {
	o.SpaceId = &v
}

// GetSpaceName returns the SpaceName field value if set, zero value otherwise.
func (o *IpamAliasAddInput) GetSpaceName() string {
	if o == nil || IsNil(o.SpaceName) {
		var ret string
		return ret
	}
	return *o.SpaceName
}

// GetSpaceNameOk returns a tuple with the SpaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamAliasAddInput) GetSpaceNameOk() (*string, bool) {
	if o == nil || IsNil(o.SpaceName) {
		return nil, false
	}
	return o.SpaceName, true
}

// HasSpaceName returns a boolean if a field has been set.
func (o *IpamAliasAddInput) HasSpaceName() bool {
	if o != nil && !IsNil(o.SpaceName) {
		return true
	}

	return false
}

// SetSpaceName gets a reference to the given string and assigns it to the SpaceName field.
func (o *IpamAliasAddInput) SetSpaceName(v string) {
	o.SpaceName = &v
}

// GetAliasType returns the AliasType field value if set, zero value otherwise.
func (o *IpamAliasAddInput) GetAliasType() string {
	if o == nil || IsNil(o.AliasType) {
		var ret string
		return ret
	}
	return *o.AliasType
}

// GetAliasTypeOk returns a tuple with the AliasType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamAliasAddInput) GetAliasTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AliasType) {
		return nil, false
	}
	return o.AliasType, true
}

// HasAliasType returns a boolean if a field has been set.
func (o *IpamAliasAddInput) HasAliasType() bool {
	if o != nil && !IsNil(o.AliasType) {
		return true
	}

	return false
}

// SetAliasType gets a reference to the given string and assigns it to the AliasType field.
func (o *IpamAliasAddInput) SetAliasType(v string) {
	o.AliasType = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *IpamAliasAddInput) GetWarnings() string {
	if o == nil || IsNil(o.Warnings) {
		var ret string
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamAliasAddInput) GetWarningsOk() (*string, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *IpamAliasAddInput) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given string and assigns it to the Warnings field.
func (o *IpamAliasAddInput) SetWarnings(v string) {
	o.Warnings = &v
}

func (o IpamAliasAddInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpamAliasAddInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AddressHostaddr) {
		toSerialize["address_hostaddr"] = o.AddressHostaddr
	}
	if !IsNil(o.AddressId) {
		toSerialize["address_id"] = o.AddressId
	}
	if !IsNil(o.AliasName) {
		toSerialize["alias_name"] = o.AliasName
	}
	if !IsNil(o.SpaceId) {
		toSerialize["space_id"] = o.SpaceId
	}
	if !IsNil(o.SpaceName) {
		toSerialize["space_name"] = o.SpaceName
	}
	if !IsNil(o.AliasType) {
		toSerialize["alias_type"] = o.AliasType
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableIpamAliasAddInput struct {
	value *IpamAliasAddInput
	isSet bool
}

func (v NullableIpamAliasAddInput) Get() *IpamAliasAddInput {
	return v.value
}

func (v *NullableIpamAliasAddInput) Set(val *IpamAliasAddInput) {
	v.value = val
	v.isSet = true
}

func (v NullableIpamAliasAddInput) IsSet() bool {
	return v.isSet
}

func (v *NullableIpamAliasAddInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpamAliasAddInput(val *IpamAliasAddInput) *NullableIpamAliasAddInput {
	return &NullableIpamAliasAddInput{value: val, isSet: true}
}

func (v NullableIpamAliasAddInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpamAliasAddInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
