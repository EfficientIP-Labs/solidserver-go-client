/*
 * SOLIDserver API
 *
 * OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2021 EfficientIP</p><p><em>All specifications and information regarding the products in  this document are subject to change without notice and should not be  construed as a commitment by EfficientIP. EfficientIP assumes no  responsibility or liability for any mistakes or inaccuracies that may appear  in this document. All statements and recommendations in this document are  believed to be accurate but are presented without warranty. Users must take  full responsibility for their application of any product.</em></p><p>Generated (Monday 14th of June 2021 12:30:34 PM)</p>
 *
 * API version: 2.0
 * Contact: support-api@efficientip.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// DnsRrDataData struct for DnsRrDataData
type DnsRrDataData struct {
	// The delay of creation status. <b>1</b> indicates that the object is not created yet.
	RrDelayedCreateTime *string `json:"rr_delayed_create_time,omitempty"`
	// The delay of deletion status. <b>1</b> indicates that the object is not deleted yet.
	RrDelayedDeleteTime *string `json:"rr_delayed_delete_time,omitempty"`
	// The delay of creation/deletion status. <b>1</b> indicates that the object is not created/deleted yet.
	RrDelayedTime *string `json:"rr_delayed_time,omitempty"`
	// The name of the class applied to the DNS server the object belongs to, it can be preceded by the class directory.
	ServerClassName *string `json:"server_class_name,omitempty"`
	// Internal use. Not documented.
	ServerCloud *string `json:"server_cloud,omitempty"`
	// The description of the DNS server the object belongs to.
	ServerComment *string `json:"server_comment,omitempty"`
	// The database identifier (ID) of the DNS server the object belongs to.
	ServerId *string `json:"server_id,omitempty"`
	// The name of the DNS server the object belongs to.
	ServerName *string `json:"server_name,omitempty"`
	// The type of the DNS server the object belongs to.<table><caption>dns_type possible values</caption><br/><thead><tr><th>Type</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >ipm</td><td >EfficientIP DNS server or EfficientIP DNS Package</td></tr><tr><td >msdaemon</td><td >Agentless Microsoft DNS server</td></tr><tr><td >ans</td><td >Nominum DNS server (ANS)</td></tr><tr><td >aws</td><td >Amazon Route 53 server</td></tr><tr><td >other</td><td >Generic DNS server</td></tr><tr><td >vdns</td><td >EfficientIP DNS smart architecture</td></tr></tbody></table></p><br/>
	ServerType *string `json:"server_type,omitempty"`
	// The version details of the DNS server the object belongs to.
	ServerVersion *string `json:"server_version,omitempty"`
	// The name of the class applied to the DNS view the object belongs to, it can be preceded by the class directory.
	ViewClassName *string `json:"view_class_name,omitempty"`
	// #general.output.class_parameters#
	ViewClassParameters *[]ApiClassParameterOutputEntry `json:"view_class_parameters,omitempty"`
	// The database identifier (ID) of the DNS view the object belongs to.
	ViewId *string `json:"view_id,omitempty"`
	// The name of the DNS view the object belongs to.
	ViewName *string `json:"view_name,omitempty"`
	// The name of the class applied to the DNS zone the object belongs to, it can be preceded by the class directory.
	ZoneClassName *string `json:"zone_class_name,omitempty"`
	// The IP address(es) of the forwarder(s) associated with the DNS zone the resource record belongs to. It lists the DNS servers to which any unknown query on this zone should be sent, as follows: <b>&lt;ip_address1&gt;;&lt;ip_address2&gt;;...</b> .
	ZoneForwarders *string `json:"zone_forwarders,omitempty"`
	// The database identifier (ID) of the DNS zone the object belongs to.
	ZoneId *string `json:"zone_id,omitempty"`
	// A way to determine if the DNS zone the resource record belongs to provides reverse resolution (<b>1</b>) or direct/name resolution (<b>0</b>),
	ZoneIsReverse *string `json:"zone_is_reverse,omitempty"`
	// The RPZ status of the DNS zone the resource record belongs to. <b>1</b> indicates that the DNS zone the record belongs to is a Response Policy Zone.
	ZoneIsRpz *string `json:"zone_is_rpz,omitempty"`
	// For resource records in slave DNS zones, the IP address of the DNS server and, if relevant, the name of the DNS view that contain the master DNS zone, as follows: <b>&lt;ip_addr&gt;;</b> or <b>&lt;ip_addr&gt; key &lt;dnsview_name&gt;;</b> .
	ZoneMasters *string `json:"zone_masters,omitempty"`
	// The name of the DNS zone the object belongs to.
	ZoneName *string `json:"zone_name,omitempty"`
	// The name of the DNS zone the resource record belongs to, in UTF-8 format.
	ZoneNameUtf *string `json:"zone_name_utf,omitempty"`
	// The name of the space associated with the DNS zone the RR belongs to.
	ZoneSpaceName *string `json:"zone_space_name,omitempty"`
	// Internal use. Not documented.
	ZoneSortZone *string `json:"zone_sort_zone,omitempty"`
	// The type of the DNS zone the object belongs to, either <b>master</b>, <b>slave</b>, <b>forward</b>, <b>stub</b>, <b>hint</b> or <b>delegation-only</b>.
	ZoneType *string `json:"zone_type,omitempty"`
	// The Multi-status information is displayed as follows: <i>&lt;number-of-instances&gt;@&lt;message-number&gt;@&lt;multi-status-severity&gt;@&lt;module&gt;</i>. The different severity levels are:<br><b>Multi-status severity levels</b>    <table border=1>        <thead>        <tr >            <td><b>Message number</b></td>            <td><b>Severity</b></td>            <td><b>Description</b></td>        </tr>        </thead>        <tbody>        <tr  valign=middle>            <td>0 - 16</td>            <td>Emergency</td>            <td>The object configuration prevents the system from running properly. Action is required.</td>        </tr>        <tr  valign=middle>            <td>17 - 33</td>            <td>Critical</td>            <td>The object configuration is in critical conditions. Immediate action is recommended.</td>        </tr>        <tr  valign=middle>            <td>34 - 50</td>            <td>Error</td>            <td>The object configuration failed at some level. Action is recommended.</td>        </tr>        <tr  valign=middle>            <td>51 - 66</td>            <td>Warning</td>            <td>The object configuration triggers error messages if no action is taken. Action to be taken at your discretion.</td>        </tr>        <tr  valign=middle>            <td>67 - 83</td>            <td>Notice</td>            <td>The object configuration is normal but undergoing events that might trigger errors. No immediate action required.</td>        </tr>        <tr  valign=middle>            <td>84 - 100</td>            <td>Informational</td>            <td>The object configuration is normal, operational messages (might inform you about potential incompatibilities with other modules, etc). No action required.</td>        </tr>        </tbody></table>
	RrMultistatus *string `json:"rr_multistatus,omitempty"`
	// The concatenated values of the DNS resource record, as follows: <b>&lt;value1&gt;, &lt;value2&gt;, &lt;value3&gt;, &lt;value4&gt;, &lt;value5&gt;, &lt;value6&gt;, &lt;value7&gt;</b>.
	RrAllValue *string `json:"rr_all_value,omitempty"`
	// TODO:dns_rr_list.output.rr_class_name
	RrClassName *string `json:"rr_class_name,omitempty"`
	// The class parameters applied to the DNS rr the object belongs to and their value
	RrClassParameters *[]ApiClassParameterOutputEntry `json:"rr_class_parameters,omitempty"`
	// The full name of the DNS resource record.
	RrFullName *string `json:"rr_full_name,omitempty"`
	// The name of the DNS resource record in UTF-8 format.
	RrFullNameUtf *string `json:"rr_full_name_utf,omitempty"`
	// The shortname of the DNS resource record.
	RrGlue *string `json:"rr_glue,omitempty"`
	// The database identifier (ID) of the DNS resource record.
	RrId *string `json:"rr_id,omitempty"`
	// TODO:dns_rr_list.output.rr_last_update_time
	RrLastUpdateTime *string `json:"rr_last_update_time,omitempty"`
	// Internal use. Not documented.
	RrNameIp4Addr *string `json:"rr_name_ip4_addr,omitempty"`
	// Internal use. Not documented.
	RrNameAddressAddr *string `json:"rr_name_address_addr,omitempty"`
	// The type of the DNS resource record.<table><caption>rr_type possible values</caption><br/><thead><tr><th>Value</th><th>Record type description</th></tr><br/></thead><br/><tbody><tr><td >SOA</td><td >Start of Authority. Defines the zone name, an email contact and various time and refresh values applicable to the zone. It is automatically generated upon creation of a zone and cannot be added manually.</td></tr><tr><td >NS</td><td >Name Server. Defines the authoritative name server(s) for the domain (defined by the SOA record) or the subdomain. The NS record that indicates which server has authority over a zone is automatically generated upon the creation of a zone, once the server has been synchronized.</td></tr><tr><td >A</td><td >IPv4 Address. An IPv4 address for a host.</td></tr><tr><td >PTR</td><td >Pointer Record. Address Resolution, from an IP address (IPv4 or IPv6) to a host. Used in reverse mapping.</td></tr><tr><td >AAAA</td><td >IPv6 Address. An IPv6 address for a host.</td></tr><tr><td >CNAME</td><td >Canonical Name. An alias name for a host.</td></tr><tr><td >MX</td><td >Mail Exchange. The mail server/exchanger that services this zone.</td></tr><tr><td >SRV</td><td >Services record. Defines services available in the zone, for example, LDAP, HTTP, etc...</td></tr><tr><td >DNAME</td><td >Delegation of Reverse Names. Delegation of reverse addresses primarily in IPv6. (Deprecated, use the CNAME RR instead)</td></tr><tr><td >TXT</td><td >Text. Information associated with a name.</td></tr><tr><td >DS</td><td >Delegation Signer, a DNSSEC related RR used to verify the validity of the ZSK of a subdomain.</td></tr><tr><td >DNSKEY</td><td >DNS Key. It contains the public cryptographic key used to sign the zone with DNSSEC.</td></tr><tr><td >65534</td><td >A private type record automatically added to the zone once it is signed with DNSSEC.</td></tr><tr><td >HINFO</td><td >System Information. Information about a host: hardware type and operating system description.</td></tr><tr><td >MINFO</td><td >Mailbox mail list Information. Defines the mail administrator for a mail list and optionally a mailbox to receive error messages relating to the mail list.</td></tr><tr><td >AFSDB</td><td >AFS Database. Location of the AFS servers.</td></tr><tr><td >WKS</td><td >Well-Known Service. Defines the services and protocols supported by a host. (Deprecated, use the SRV RR instead)</td></tr><tr><td >NAPTR</td><td >Naming Authority Pointer Record. General purpose definition of rule set to be used by applications e.g. VoIP.</td></tr><tr><td >NSAP</td><td >Network Service Access Point. Defines record (equivalent of an A record) maps a host name to an endpoint address.</td></tr></tbody></table></p><br/>
	RrType *string `json:"rr_type,omitempty"`
	// Internal use. Not documented.
	RrValueIp4Addr *string `json:"rr_value_ip4_addr,omitempty"`
	// Internal use. Not documented.
	RrValueAddressAddr *string `json:"rr_value_address_addr,omitempty"`
	// The time to live of the DNS resource record, in seconds.
	RrTtl *string `json:"rr_ttl,omitempty"`
	// The first or only value required for the DNS resource record, as detailed in the service description.
	RrValue1 *string `json:"rr_value1,omitempty"`
	// The second value of the DNS resource record, depending on its type, as detailed in the service description.
	RrValue2 *string `json:"rr_value2,omitempty"`
	// The third value of the DNS resource record, depending on its type, as detailed in the service description.
	RrValue3 *string `json:"rr_value3,omitempty"`
	// The fourth value of the DNS resource record, depending on its type, as detailed in the service description.
	RrValue4 *string `json:"rr_value4,omitempty"`
	// The fifth value of the DNS resource record, depending on its type, as detailed in the service description.
	RrValue5 *string `json:"rr_value5,omitempty"`
	// The sixth value of the DNS resource record, depending on its type, as detailed in the service description.
	RrValue6 *string `json:"rr_value6,omitempty"`
	// The seventh value of the DNS resource record, depending on its type, as detailed in the service description.
	RrValue7 *string `json:"rr_value7,omitempty"`
	// The database identifier (ID) of the DNS smart architecture managing the DNS server the object belongs to. <b>0</b> indicates that the server the object belongs to is not managed by a smart architecture or is a smart architecture itself.
	SmartParentId *string `json:"smart_parent_id,omitempty"`
	// The name of the DNS smart architecture managing the DNS server the object belongs to. <b>#</b> indicates that the server the object belongs to is not managed by a smart architecture or is a smart architecture itself.
	SmartParentName *string `json:"smart_parent_name,omitempty"`
}

// NewDnsRrDataData instantiates a new DnsRrDataData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnsRrDataData() *DnsRrDataData {
	this := DnsRrDataData{}
	return &this
}

// NewDnsRrDataDataWithDefaults instantiates a new DnsRrDataData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsRrDataDataWithDefaults() *DnsRrDataData {
	this := DnsRrDataData{}
	return &this
}

// GetRrDelayedCreateTime returns the RrDelayedCreateTime field value if set, zero value otherwise.
func (o *DnsRrDataData) GetRrDelayedCreateTime() string {
	if o == nil || o.RrDelayedCreateTime == nil {
		var ret string
		return ret
	}
	return *o.RrDelayedCreateTime
}

// GetRrDelayedCreateTimeOk returns a tuple with the RrDelayedCreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetRrDelayedCreateTimeOk() (*string, bool) {
	if o == nil || o.RrDelayedCreateTime == nil {
		return nil, false
	}
	return o.RrDelayedCreateTime, true
}

// HasRrDelayedCreateTime returns a boolean if a field has been set.
func (o *DnsRrDataData) HasRrDelayedCreateTime() bool {
	if o != nil && o.RrDelayedCreateTime != nil {
		return true
	}

	return false
}

// SetRrDelayedCreateTime gets a reference to the given string and assigns it to the RrDelayedCreateTime field.
func (o *DnsRrDataData) SetRrDelayedCreateTime(v string) {
	o.RrDelayedCreateTime = &v
}

// GetRrDelayedDeleteTime returns the RrDelayedDeleteTime field value if set, zero value otherwise.
func (o *DnsRrDataData) GetRrDelayedDeleteTime() string {
	if o == nil || o.RrDelayedDeleteTime == nil {
		var ret string
		return ret
	}
	return *o.RrDelayedDeleteTime
}

// GetRrDelayedDeleteTimeOk returns a tuple with the RrDelayedDeleteTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetRrDelayedDeleteTimeOk() (*string, bool) {
	if o == nil || o.RrDelayedDeleteTime == nil {
		return nil, false
	}
	return o.RrDelayedDeleteTime, true
}

// HasRrDelayedDeleteTime returns a boolean if a field has been set.
func (o *DnsRrDataData) HasRrDelayedDeleteTime() bool {
	if o != nil && o.RrDelayedDeleteTime != nil {
		return true
	}

	return false
}

// SetRrDelayedDeleteTime gets a reference to the given string and assigns it to the RrDelayedDeleteTime field.
func (o *DnsRrDataData) SetRrDelayedDeleteTime(v string) {
	o.RrDelayedDeleteTime = &v
}

// GetRrDelayedTime returns the RrDelayedTime field value if set, zero value otherwise.
func (o *DnsRrDataData) GetRrDelayedTime() string {
	if o == nil || o.RrDelayedTime == nil {
		var ret string
		return ret
	}
	return *o.RrDelayedTime
}

// GetRrDelayedTimeOk returns a tuple with the RrDelayedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetRrDelayedTimeOk() (*string, bool) {
	if o == nil || o.RrDelayedTime == nil {
		return nil, false
	}
	return o.RrDelayedTime, true
}

// HasRrDelayedTime returns a boolean if a field has been set.
func (o *DnsRrDataData) HasRrDelayedTime() bool {
	if o != nil && o.RrDelayedTime != nil {
		return true
	}

	return false
}

// SetRrDelayedTime gets a reference to the given string and assigns it to the RrDelayedTime field.
func (o *DnsRrDataData) SetRrDelayedTime(v string) {
	o.RrDelayedTime = &v
}

// GetServerClassName returns the ServerClassName field value if set, zero value otherwise.
func (o *DnsRrDataData) GetServerClassName() string {
	if o == nil || o.ServerClassName == nil {
		var ret string
		return ret
	}
	return *o.ServerClassName
}

// GetServerClassNameOk returns a tuple with the ServerClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetServerClassNameOk() (*string, bool) {
	if o == nil || o.ServerClassName == nil {
		return nil, false
	}
	return o.ServerClassName, true
}

// HasServerClassName returns a boolean if a field has been set.
func (o *DnsRrDataData) HasServerClassName() bool {
	if o != nil && o.ServerClassName != nil {
		return true
	}

	return false
}

// SetServerClassName gets a reference to the given string and assigns it to the ServerClassName field.
func (o *DnsRrDataData) SetServerClassName(v string) {
	o.ServerClassName = &v
}

// GetServerCloud returns the ServerCloud field value if set, zero value otherwise.
func (o *DnsRrDataData) GetServerCloud() string {
	if o == nil || o.ServerCloud == nil {
		var ret string
		return ret
	}
	return *o.ServerCloud
}

// GetServerCloudOk returns a tuple with the ServerCloud field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetServerCloudOk() (*string, bool) {
	if o == nil || o.ServerCloud == nil {
		return nil, false
	}
	return o.ServerCloud, true
}

// HasServerCloud returns a boolean if a field has been set.
func (o *DnsRrDataData) HasServerCloud() bool {
	if o != nil && o.ServerCloud != nil {
		return true
	}

	return false
}

// SetServerCloud gets a reference to the given string and assigns it to the ServerCloud field.
func (o *DnsRrDataData) SetServerCloud(v string) {
	o.ServerCloud = &v
}

// GetServerComment returns the ServerComment field value if set, zero value otherwise.
func (o *DnsRrDataData) GetServerComment() string {
	if o == nil || o.ServerComment == nil {
		var ret string
		return ret
	}
	return *o.ServerComment
}

// GetServerCommentOk returns a tuple with the ServerComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetServerCommentOk() (*string, bool) {
	if o == nil || o.ServerComment == nil {
		return nil, false
	}
	return o.ServerComment, true
}

// HasServerComment returns a boolean if a field has been set.
func (o *DnsRrDataData) HasServerComment() bool {
	if o != nil && o.ServerComment != nil {
		return true
	}

	return false
}

// SetServerComment gets a reference to the given string and assigns it to the ServerComment field.
func (o *DnsRrDataData) SetServerComment(v string) {
	o.ServerComment = &v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *DnsRrDataData) GetServerId() string {
	if o == nil || o.ServerId == nil {
		var ret string
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetServerIdOk() (*string, bool) {
	if o == nil || o.ServerId == nil {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *DnsRrDataData) HasServerId() bool {
	if o != nil && o.ServerId != nil {
		return true
	}

	return false
}

// SetServerId gets a reference to the given string and assigns it to the ServerId field.
func (o *DnsRrDataData) SetServerId(v string) {
	o.ServerId = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *DnsRrDataData) GetServerName() string {
	if o == nil || o.ServerName == nil {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetServerNameOk() (*string, bool) {
	if o == nil || o.ServerName == nil {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *DnsRrDataData) HasServerName() bool {
	if o != nil && o.ServerName != nil {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *DnsRrDataData) SetServerName(v string) {
	o.ServerName = &v
}

// GetServerType returns the ServerType field value if set, zero value otherwise.
func (o *DnsRrDataData) GetServerType() string {
	if o == nil || o.ServerType == nil {
		var ret string
		return ret
	}
	return *o.ServerType
}

// GetServerTypeOk returns a tuple with the ServerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetServerTypeOk() (*string, bool) {
	if o == nil || o.ServerType == nil {
		return nil, false
	}
	return o.ServerType, true
}

// HasServerType returns a boolean if a field has been set.
func (o *DnsRrDataData) HasServerType() bool {
	if o != nil && o.ServerType != nil {
		return true
	}

	return false
}

// SetServerType gets a reference to the given string and assigns it to the ServerType field.
func (o *DnsRrDataData) SetServerType(v string) {
	o.ServerType = &v
}

// GetServerVersion returns the ServerVersion field value if set, zero value otherwise.
func (o *DnsRrDataData) GetServerVersion() string {
	if o == nil || o.ServerVersion == nil {
		var ret string
		return ret
	}
	return *o.ServerVersion
}

// GetServerVersionOk returns a tuple with the ServerVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetServerVersionOk() (*string, bool) {
	if o == nil || o.ServerVersion == nil {
		return nil, false
	}
	return o.ServerVersion, true
}

// HasServerVersion returns a boolean if a field has been set.
func (o *DnsRrDataData) HasServerVersion() bool {
	if o != nil && o.ServerVersion != nil {
		return true
	}

	return false
}

// SetServerVersion gets a reference to the given string and assigns it to the ServerVersion field.
func (o *DnsRrDataData) SetServerVersion(v string) {
	o.ServerVersion = &v
}

// GetViewClassName returns the ViewClassName field value if set, zero value otherwise.
func (o *DnsRrDataData) GetViewClassName() string {
	if o == nil || o.ViewClassName == nil {
		var ret string
		return ret
	}
	return *o.ViewClassName
}

// GetViewClassNameOk returns a tuple with the ViewClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetViewClassNameOk() (*string, bool) {
	if o == nil || o.ViewClassName == nil {
		return nil, false
	}
	return o.ViewClassName, true
}

// HasViewClassName returns a boolean if a field has been set.
func (o *DnsRrDataData) HasViewClassName() bool {
	if o != nil && o.ViewClassName != nil {
		return true
	}

	return false
}

// SetViewClassName gets a reference to the given string and assigns it to the ViewClassName field.
func (o *DnsRrDataData) SetViewClassName(v string) {
	o.ViewClassName = &v
}

// GetViewClassParameters returns the ViewClassParameters field value if set, zero value otherwise.
func (o *DnsRrDataData) GetViewClassParameters() []ApiClassParameterOutputEntry {
	if o == nil || o.ViewClassParameters == nil {
		var ret []ApiClassParameterOutputEntry
		return ret
	}
	return *o.ViewClassParameters
}

// GetViewClassParametersOk returns a tuple with the ViewClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetViewClassParametersOk() (*[]ApiClassParameterOutputEntry, bool) {
	if o == nil || o.ViewClassParameters == nil {
		return nil, false
	}
	return o.ViewClassParameters, true
}

// HasViewClassParameters returns a boolean if a field has been set.
func (o *DnsRrDataData) HasViewClassParameters() bool {
	if o != nil && o.ViewClassParameters != nil {
		return true
	}

	return false
}

// SetViewClassParameters gets a reference to the given []ApiClassParameterOutputEntry and assigns it to the ViewClassParameters field.
func (o *DnsRrDataData) SetViewClassParameters(v []ApiClassParameterOutputEntry) {
	o.ViewClassParameters = &v
}

// GetViewId returns the ViewId field value if set, zero value otherwise.
func (o *DnsRrDataData) GetViewId() string {
	if o == nil || o.ViewId == nil {
		var ret string
		return ret
	}
	return *o.ViewId
}

// GetViewIdOk returns a tuple with the ViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetViewIdOk() (*string, bool) {
	if o == nil || o.ViewId == nil {
		return nil, false
	}
	return o.ViewId, true
}

// HasViewId returns a boolean if a field has been set.
func (o *DnsRrDataData) HasViewId() bool {
	if o != nil && o.ViewId != nil {
		return true
	}

	return false
}

// SetViewId gets a reference to the given string and assigns it to the ViewId field.
func (o *DnsRrDataData) SetViewId(v string) {
	o.ViewId = &v
}

// GetViewName returns the ViewName field value if set, zero value otherwise.
func (o *DnsRrDataData) GetViewName() string {
	if o == nil || o.ViewName == nil {
		var ret string
		return ret
	}
	return *o.ViewName
}

// GetViewNameOk returns a tuple with the ViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetViewNameOk() (*string, bool) {
	if o == nil || o.ViewName == nil {
		return nil, false
	}
	return o.ViewName, true
}

// HasViewName returns a boolean if a field has been set.
func (o *DnsRrDataData) HasViewName() bool {
	if o != nil && o.ViewName != nil {
		return true
	}

	return false
}

// SetViewName gets a reference to the given string and assigns it to the ViewName field.
func (o *DnsRrDataData) SetViewName(v string) {
	o.ViewName = &v
}

// GetZoneClassName returns the ZoneClassName field value if set, zero value otherwise.
func (o *DnsRrDataData) GetZoneClassName() string {
	if o == nil || o.ZoneClassName == nil {
		var ret string
		return ret
	}
	return *o.ZoneClassName
}

// GetZoneClassNameOk returns a tuple with the ZoneClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetZoneClassNameOk() (*string, bool) {
	if o == nil || o.ZoneClassName == nil {
		return nil, false
	}
	return o.ZoneClassName, true
}

// HasZoneClassName returns a boolean if a field has been set.
func (o *DnsRrDataData) HasZoneClassName() bool {
	if o != nil && o.ZoneClassName != nil {
		return true
	}

	return false
}

// SetZoneClassName gets a reference to the given string and assigns it to the ZoneClassName field.
func (o *DnsRrDataData) SetZoneClassName(v string) {
	o.ZoneClassName = &v
}

// GetZoneForwarders returns the ZoneForwarders field value if set, zero value otherwise.
func (o *DnsRrDataData) GetZoneForwarders() string {
	if o == nil || o.ZoneForwarders == nil {
		var ret string
		return ret
	}
	return *o.ZoneForwarders
}

// GetZoneForwardersOk returns a tuple with the ZoneForwarders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetZoneForwardersOk() (*string, bool) {
	if o == nil || o.ZoneForwarders == nil {
		return nil, false
	}
	return o.ZoneForwarders, true
}

// HasZoneForwarders returns a boolean if a field has been set.
func (o *DnsRrDataData) HasZoneForwarders() bool {
	if o != nil && o.ZoneForwarders != nil {
		return true
	}

	return false
}

// SetZoneForwarders gets a reference to the given string and assigns it to the ZoneForwarders field.
func (o *DnsRrDataData) SetZoneForwarders(v string) {
	o.ZoneForwarders = &v
}

// GetZoneId returns the ZoneId field value if set, zero value otherwise.
func (o *DnsRrDataData) GetZoneId() string {
	if o == nil || o.ZoneId == nil {
		var ret string
		return ret
	}
	return *o.ZoneId
}

// GetZoneIdOk returns a tuple with the ZoneId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetZoneIdOk() (*string, bool) {
	if o == nil || o.ZoneId == nil {
		return nil, false
	}
	return o.ZoneId, true
}

// HasZoneId returns a boolean if a field has been set.
func (o *DnsRrDataData) HasZoneId() bool {
	if o != nil && o.ZoneId != nil {
		return true
	}

	return false
}

// SetZoneId gets a reference to the given string and assigns it to the ZoneId field.
func (o *DnsRrDataData) SetZoneId(v string) {
	o.ZoneId = &v
}

// GetZoneIsReverse returns the ZoneIsReverse field value if set, zero value otherwise.
func (o *DnsRrDataData) GetZoneIsReverse() string {
	if o == nil || o.ZoneIsReverse == nil {
		var ret string
		return ret
	}
	return *o.ZoneIsReverse
}

// GetZoneIsReverseOk returns a tuple with the ZoneIsReverse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetZoneIsReverseOk() (*string, bool) {
	if o == nil || o.ZoneIsReverse == nil {
		return nil, false
	}
	return o.ZoneIsReverse, true
}

// HasZoneIsReverse returns a boolean if a field has been set.
func (o *DnsRrDataData) HasZoneIsReverse() bool {
	if o != nil && o.ZoneIsReverse != nil {
		return true
	}

	return false
}

// SetZoneIsReverse gets a reference to the given string and assigns it to the ZoneIsReverse field.
func (o *DnsRrDataData) SetZoneIsReverse(v string) {
	o.ZoneIsReverse = &v
}

// GetZoneIsRpz returns the ZoneIsRpz field value if set, zero value otherwise.
func (o *DnsRrDataData) GetZoneIsRpz() string {
	if o == nil || o.ZoneIsRpz == nil {
		var ret string
		return ret
	}
	return *o.ZoneIsRpz
}

// GetZoneIsRpzOk returns a tuple with the ZoneIsRpz field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetZoneIsRpzOk() (*string, bool) {
	if o == nil || o.ZoneIsRpz == nil {
		return nil, false
	}
	return o.ZoneIsRpz, true
}

// HasZoneIsRpz returns a boolean if a field has been set.
func (o *DnsRrDataData) HasZoneIsRpz() bool {
	if o != nil && o.ZoneIsRpz != nil {
		return true
	}

	return false
}

// SetZoneIsRpz gets a reference to the given string and assigns it to the ZoneIsRpz field.
func (o *DnsRrDataData) SetZoneIsRpz(v string) {
	o.ZoneIsRpz = &v
}

// GetZoneMasters returns the ZoneMasters field value if set, zero value otherwise.
func (o *DnsRrDataData) GetZoneMasters() string {
	if o == nil || o.ZoneMasters == nil {
		var ret string
		return ret
	}
	return *o.ZoneMasters
}

// GetZoneMastersOk returns a tuple with the ZoneMasters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetZoneMastersOk() (*string, bool) {
	if o == nil || o.ZoneMasters == nil {
		return nil, false
	}
	return o.ZoneMasters, true
}

// HasZoneMasters returns a boolean if a field has been set.
func (o *DnsRrDataData) HasZoneMasters() bool {
	if o != nil && o.ZoneMasters != nil {
		return true
	}

	return false
}

// SetZoneMasters gets a reference to the given string and assigns it to the ZoneMasters field.
func (o *DnsRrDataData) SetZoneMasters(v string) {
	o.ZoneMasters = &v
}

// GetZoneName returns the ZoneName field value if set, zero value otherwise.
func (o *DnsRrDataData) GetZoneName() string {
	if o == nil || o.ZoneName == nil {
		var ret string
		return ret
	}
	return *o.ZoneName
}

// GetZoneNameOk returns a tuple with the ZoneName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetZoneNameOk() (*string, bool) {
	if o == nil || o.ZoneName == nil {
		return nil, false
	}
	return o.ZoneName, true
}

// HasZoneName returns a boolean if a field has been set.
func (o *DnsRrDataData) HasZoneName() bool {
	if o != nil && o.ZoneName != nil {
		return true
	}

	return false
}

// SetZoneName gets a reference to the given string and assigns it to the ZoneName field.
func (o *DnsRrDataData) SetZoneName(v string) {
	o.ZoneName = &v
}

// GetZoneNameUtf returns the ZoneNameUtf field value if set, zero value otherwise.
func (o *DnsRrDataData) GetZoneNameUtf() string {
	if o == nil || o.ZoneNameUtf == nil {
		var ret string
		return ret
	}
	return *o.ZoneNameUtf
}

// GetZoneNameUtfOk returns a tuple with the ZoneNameUtf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetZoneNameUtfOk() (*string, bool) {
	if o == nil || o.ZoneNameUtf == nil {
		return nil, false
	}
	return o.ZoneNameUtf, true
}

// HasZoneNameUtf returns a boolean if a field has been set.
func (o *DnsRrDataData) HasZoneNameUtf() bool {
	if o != nil && o.ZoneNameUtf != nil {
		return true
	}

	return false
}

// SetZoneNameUtf gets a reference to the given string and assigns it to the ZoneNameUtf field.
func (o *DnsRrDataData) SetZoneNameUtf(v string) {
	o.ZoneNameUtf = &v
}

// GetZoneSpaceName returns the ZoneSpaceName field value if set, zero value otherwise.
func (o *DnsRrDataData) GetZoneSpaceName() string {
	if o == nil || o.ZoneSpaceName == nil {
		var ret string
		return ret
	}
	return *o.ZoneSpaceName
}

// GetZoneSpaceNameOk returns a tuple with the ZoneSpaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetZoneSpaceNameOk() (*string, bool) {
	if o == nil || o.ZoneSpaceName == nil {
		return nil, false
	}
	return o.ZoneSpaceName, true
}

// HasZoneSpaceName returns a boolean if a field has been set.
func (o *DnsRrDataData) HasZoneSpaceName() bool {
	if o != nil && o.ZoneSpaceName != nil {
		return true
	}

	return false
}

// SetZoneSpaceName gets a reference to the given string and assigns it to the ZoneSpaceName field.
func (o *DnsRrDataData) SetZoneSpaceName(v string) {
	o.ZoneSpaceName = &v
}

// GetZoneSortZone returns the ZoneSortZone field value if set, zero value otherwise.
func (o *DnsRrDataData) GetZoneSortZone() string {
	if o == nil || o.ZoneSortZone == nil {
		var ret string
		return ret
	}
	return *o.ZoneSortZone
}

// GetZoneSortZoneOk returns a tuple with the ZoneSortZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetZoneSortZoneOk() (*string, bool) {
	if o == nil || o.ZoneSortZone == nil {
		return nil, false
	}
	return o.ZoneSortZone, true
}

// HasZoneSortZone returns a boolean if a field has been set.
func (o *DnsRrDataData) HasZoneSortZone() bool {
	if o != nil && o.ZoneSortZone != nil {
		return true
	}

	return false
}

// SetZoneSortZone gets a reference to the given string and assigns it to the ZoneSortZone field.
func (o *DnsRrDataData) SetZoneSortZone(v string) {
	o.ZoneSortZone = &v
}

// GetZoneType returns the ZoneType field value if set, zero value otherwise.
func (o *DnsRrDataData) GetZoneType() string {
	if o == nil || o.ZoneType == nil {
		var ret string
		return ret
	}
	return *o.ZoneType
}

// GetZoneTypeOk returns a tuple with the ZoneType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetZoneTypeOk() (*string, bool) {
	if o == nil || o.ZoneType == nil {
		return nil, false
	}
	return o.ZoneType, true
}

// HasZoneType returns a boolean if a field has been set.
func (o *DnsRrDataData) HasZoneType() bool {
	if o != nil && o.ZoneType != nil {
		return true
	}

	return false
}

// SetZoneType gets a reference to the given string and assigns it to the ZoneType field.
func (o *DnsRrDataData) SetZoneType(v string) {
	o.ZoneType = &v
}

// GetRrMultistatus returns the RrMultistatus field value if set, zero value otherwise.
func (o *DnsRrDataData) GetRrMultistatus() string {
	if o == nil || o.RrMultistatus == nil {
		var ret string
		return ret
	}
	return *o.RrMultistatus
}

// GetRrMultistatusOk returns a tuple with the RrMultistatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetRrMultistatusOk() (*string, bool) {
	if o == nil || o.RrMultistatus == nil {
		return nil, false
	}
	return o.RrMultistatus, true
}

// HasRrMultistatus returns a boolean if a field has been set.
func (o *DnsRrDataData) HasRrMultistatus() bool {
	if o != nil && o.RrMultistatus != nil {
		return true
	}

	return false
}

// SetRrMultistatus gets a reference to the given string and assigns it to the RrMultistatus field.
func (o *DnsRrDataData) SetRrMultistatus(v string) {
	o.RrMultistatus = &v
}

// GetRrAllValue returns the RrAllValue field value if set, zero value otherwise.
func (o *DnsRrDataData) GetRrAllValue() string {
	if o == nil || o.RrAllValue == nil {
		var ret string
		return ret
	}
	return *o.RrAllValue
}

// GetRrAllValueOk returns a tuple with the RrAllValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetRrAllValueOk() (*string, bool) {
	if o == nil || o.RrAllValue == nil {
		return nil, false
	}
	return o.RrAllValue, true
}

// HasRrAllValue returns a boolean if a field has been set.
func (o *DnsRrDataData) HasRrAllValue() bool {
	if o != nil && o.RrAllValue != nil {
		return true
	}

	return false
}

// SetRrAllValue gets a reference to the given string and assigns it to the RrAllValue field.
func (o *DnsRrDataData) SetRrAllValue(v string) {
	o.RrAllValue = &v
}

// GetRrClassName returns the RrClassName field value if set, zero value otherwise.
func (o *DnsRrDataData) GetRrClassName() string {
	if o == nil || o.RrClassName == nil {
		var ret string
		return ret
	}
	return *o.RrClassName
}

// GetRrClassNameOk returns a tuple with the RrClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetRrClassNameOk() (*string, bool) {
	if o == nil || o.RrClassName == nil {
		return nil, false
	}
	return o.RrClassName, true
}

// HasRrClassName returns a boolean if a field has been set.
func (o *DnsRrDataData) HasRrClassName() bool {
	if o != nil && o.RrClassName != nil {
		return true
	}

	return false
}

// SetRrClassName gets a reference to the given string and assigns it to the RrClassName field.
func (o *DnsRrDataData) SetRrClassName(v string) {
	o.RrClassName = &v
}

// GetRrClassParameters returns the RrClassParameters field value if set, zero value otherwise.
func (o *DnsRrDataData) GetRrClassParameters() []ApiClassParameterOutputEntry {
	if o == nil || o.RrClassParameters == nil {
		var ret []ApiClassParameterOutputEntry
		return ret
	}
	return *o.RrClassParameters
}

// GetRrClassParametersOk returns a tuple with the RrClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetRrClassParametersOk() (*[]ApiClassParameterOutputEntry, bool) {
	if o == nil || o.RrClassParameters == nil {
		return nil, false
	}
	return o.RrClassParameters, true
}

// HasRrClassParameters returns a boolean if a field has been set.
func (o *DnsRrDataData) HasRrClassParameters() bool {
	if o != nil && o.RrClassParameters != nil {
		return true
	}

	return false
}

// SetRrClassParameters gets a reference to the given []ApiClassParameterOutputEntry and assigns it to the RrClassParameters field.
func (o *DnsRrDataData) SetRrClassParameters(v []ApiClassParameterOutputEntry) {
	o.RrClassParameters = &v
}

// GetRrFullName returns the RrFullName field value if set, zero value otherwise.
func (o *DnsRrDataData) GetRrFullName() string {
	if o == nil || o.RrFullName == nil {
		var ret string
		return ret
	}
	return *o.RrFullName
}

// GetRrFullNameOk returns a tuple with the RrFullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetRrFullNameOk() (*string, bool) {
	if o == nil || o.RrFullName == nil {
		return nil, false
	}
	return o.RrFullName, true
}

// HasRrFullName returns a boolean if a field has been set.
func (o *DnsRrDataData) HasRrFullName() bool {
	if o != nil && o.RrFullName != nil {
		return true
	}

	return false
}

// SetRrFullName gets a reference to the given string and assigns it to the RrFullName field.
func (o *DnsRrDataData) SetRrFullName(v string) {
	o.RrFullName = &v
}

// GetRrFullNameUtf returns the RrFullNameUtf field value if set, zero value otherwise.
func (o *DnsRrDataData) GetRrFullNameUtf() string {
	if o == nil || o.RrFullNameUtf == nil {
		var ret string
		return ret
	}
	return *o.RrFullNameUtf
}

// GetRrFullNameUtfOk returns a tuple with the RrFullNameUtf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetRrFullNameUtfOk() (*string, bool) {
	if o == nil || o.RrFullNameUtf == nil {
		return nil, false
	}
	return o.RrFullNameUtf, true
}

// HasRrFullNameUtf returns a boolean if a field has been set.
func (o *DnsRrDataData) HasRrFullNameUtf() bool {
	if o != nil && o.RrFullNameUtf != nil {
		return true
	}

	return false
}

// SetRrFullNameUtf gets a reference to the given string and assigns it to the RrFullNameUtf field.
func (o *DnsRrDataData) SetRrFullNameUtf(v string) {
	o.RrFullNameUtf = &v
}

// GetRrGlue returns the RrGlue field value if set, zero value otherwise.
func (o *DnsRrDataData) GetRrGlue() string {
	if o == nil || o.RrGlue == nil {
		var ret string
		return ret
	}
	return *o.RrGlue
}

// GetRrGlueOk returns a tuple with the RrGlue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetRrGlueOk() (*string, bool) {
	if o == nil || o.RrGlue == nil {
		return nil, false
	}
	return o.RrGlue, true
}

// HasRrGlue returns a boolean if a field has been set.
func (o *DnsRrDataData) HasRrGlue() bool {
	if o != nil && o.RrGlue != nil {
		return true
	}

	return false
}

// SetRrGlue gets a reference to the given string and assigns it to the RrGlue field.
func (o *DnsRrDataData) SetRrGlue(v string) {
	o.RrGlue = &v
}

// GetRrId returns the RrId field value if set, zero value otherwise.
func (o *DnsRrDataData) GetRrId() string {
	if o == nil || o.RrId == nil {
		var ret string
		return ret
	}
	return *o.RrId
}

// GetRrIdOk returns a tuple with the RrId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetRrIdOk() (*string, bool) {
	if o == nil || o.RrId == nil {
		return nil, false
	}
	return o.RrId, true
}

// HasRrId returns a boolean if a field has been set.
func (o *DnsRrDataData) HasRrId() bool {
	if o != nil && o.RrId != nil {
		return true
	}

	return false
}

// SetRrId gets a reference to the given string and assigns it to the RrId field.
func (o *DnsRrDataData) SetRrId(v string) {
	o.RrId = &v
}

// GetRrLastUpdateTime returns the RrLastUpdateTime field value if set, zero value otherwise.
func (o *DnsRrDataData) GetRrLastUpdateTime() string {
	if o == nil || o.RrLastUpdateTime == nil {
		var ret string
		return ret
	}
	return *o.RrLastUpdateTime
}

// GetRrLastUpdateTimeOk returns a tuple with the RrLastUpdateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetRrLastUpdateTimeOk() (*string, bool) {
	if o == nil || o.RrLastUpdateTime == nil {
		return nil, false
	}
	return o.RrLastUpdateTime, true
}

// HasRrLastUpdateTime returns a boolean if a field has been set.
func (o *DnsRrDataData) HasRrLastUpdateTime() bool {
	if o != nil && o.RrLastUpdateTime != nil {
		return true
	}

	return false
}

// SetRrLastUpdateTime gets a reference to the given string and assigns it to the RrLastUpdateTime field.
func (o *DnsRrDataData) SetRrLastUpdateTime(v string) {
	o.RrLastUpdateTime = &v
}

// GetRrNameIp4Addr returns the RrNameIp4Addr field value if set, zero value otherwise.
func (o *DnsRrDataData) GetRrNameIp4Addr() string {
	if o == nil || o.RrNameIp4Addr == nil {
		var ret string
		return ret
	}
	return *o.RrNameIp4Addr
}

// GetRrNameIp4AddrOk returns a tuple with the RrNameIp4Addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetRrNameIp4AddrOk() (*string, bool) {
	if o == nil || o.RrNameIp4Addr == nil {
		return nil, false
	}
	return o.RrNameIp4Addr, true
}

// HasRrNameIp4Addr returns a boolean if a field has been set.
func (o *DnsRrDataData) HasRrNameIp4Addr() bool {
	if o != nil && o.RrNameIp4Addr != nil {
		return true
	}

	return false
}

// SetRrNameIp4Addr gets a reference to the given string and assigns it to the RrNameIp4Addr field.
func (o *DnsRrDataData) SetRrNameIp4Addr(v string) {
	o.RrNameIp4Addr = &v
}

// GetRrNameAddressAddr returns the RrNameAddressAddr field value if set, zero value otherwise.
func (o *DnsRrDataData) GetRrNameAddressAddr() string {
	if o == nil || o.RrNameAddressAddr == nil {
		var ret string
		return ret
	}
	return *o.RrNameAddressAddr
}

// GetRrNameAddressAddrOk returns a tuple with the RrNameAddressAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetRrNameAddressAddrOk() (*string, bool) {
	if o == nil || o.RrNameAddressAddr == nil {
		return nil, false
	}
	return o.RrNameAddressAddr, true
}

// HasRrNameAddressAddr returns a boolean if a field has been set.
func (o *DnsRrDataData) HasRrNameAddressAddr() bool {
	if o != nil && o.RrNameAddressAddr != nil {
		return true
	}

	return false
}

// SetRrNameAddressAddr gets a reference to the given string and assigns it to the RrNameAddressAddr field.
func (o *DnsRrDataData) SetRrNameAddressAddr(v string) {
	o.RrNameAddressAddr = &v
}

// GetRrType returns the RrType field value if set, zero value otherwise.
func (o *DnsRrDataData) GetRrType() string {
	if o == nil || o.RrType == nil {
		var ret string
		return ret
	}
	return *o.RrType
}

// GetRrTypeOk returns a tuple with the RrType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetRrTypeOk() (*string, bool) {
	if o == nil || o.RrType == nil {
		return nil, false
	}
	return o.RrType, true
}

// HasRrType returns a boolean if a field has been set.
func (o *DnsRrDataData) HasRrType() bool {
	if o != nil && o.RrType != nil {
		return true
	}

	return false
}

// SetRrType gets a reference to the given string and assigns it to the RrType field.
func (o *DnsRrDataData) SetRrType(v string) {
	o.RrType = &v
}

// GetRrValueIp4Addr returns the RrValueIp4Addr field value if set, zero value otherwise.
func (o *DnsRrDataData) GetRrValueIp4Addr() string {
	if o == nil || o.RrValueIp4Addr == nil {
		var ret string
		return ret
	}
	return *o.RrValueIp4Addr
}

// GetRrValueIp4AddrOk returns a tuple with the RrValueIp4Addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetRrValueIp4AddrOk() (*string, bool) {
	if o == nil || o.RrValueIp4Addr == nil {
		return nil, false
	}
	return o.RrValueIp4Addr, true
}

// HasRrValueIp4Addr returns a boolean if a field has been set.
func (o *DnsRrDataData) HasRrValueIp4Addr() bool {
	if o != nil && o.RrValueIp4Addr != nil {
		return true
	}

	return false
}

// SetRrValueIp4Addr gets a reference to the given string and assigns it to the RrValueIp4Addr field.
func (o *DnsRrDataData) SetRrValueIp4Addr(v string) {
	o.RrValueIp4Addr = &v
}

// GetRrValueAddressAddr returns the RrValueAddressAddr field value if set, zero value otherwise.
func (o *DnsRrDataData) GetRrValueAddressAddr() string {
	if o == nil || o.RrValueAddressAddr == nil {
		var ret string
		return ret
	}
	return *o.RrValueAddressAddr
}

// GetRrValueAddressAddrOk returns a tuple with the RrValueAddressAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetRrValueAddressAddrOk() (*string, bool) {
	if o == nil || o.RrValueAddressAddr == nil {
		return nil, false
	}
	return o.RrValueAddressAddr, true
}

// HasRrValueAddressAddr returns a boolean if a field has been set.
func (o *DnsRrDataData) HasRrValueAddressAddr() bool {
	if o != nil && o.RrValueAddressAddr != nil {
		return true
	}

	return false
}

// SetRrValueAddressAddr gets a reference to the given string and assigns it to the RrValueAddressAddr field.
func (o *DnsRrDataData) SetRrValueAddressAddr(v string) {
	o.RrValueAddressAddr = &v
}

// GetRrTtl returns the RrTtl field value if set, zero value otherwise.
func (o *DnsRrDataData) GetRrTtl() string {
	if o == nil || o.RrTtl == nil {
		var ret string
		return ret
	}
	return *o.RrTtl
}

// GetRrTtlOk returns a tuple with the RrTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetRrTtlOk() (*string, bool) {
	if o == nil || o.RrTtl == nil {
		return nil, false
	}
	return o.RrTtl, true
}

// HasRrTtl returns a boolean if a field has been set.
func (o *DnsRrDataData) HasRrTtl() bool {
	if o != nil && o.RrTtl != nil {
		return true
	}

	return false
}

// SetRrTtl gets a reference to the given string and assigns it to the RrTtl field.
func (o *DnsRrDataData) SetRrTtl(v string) {
	o.RrTtl = &v
}

// GetRrValue1 returns the RrValue1 field value if set, zero value otherwise.
func (o *DnsRrDataData) GetRrValue1() string {
	if o == nil || o.RrValue1 == nil {
		var ret string
		return ret
	}
	return *o.RrValue1
}

// GetRrValue1Ok returns a tuple with the RrValue1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetRrValue1Ok() (*string, bool) {
	if o == nil || o.RrValue1 == nil {
		return nil, false
	}
	return o.RrValue1, true
}

// HasRrValue1 returns a boolean if a field has been set.
func (o *DnsRrDataData) HasRrValue1() bool {
	if o != nil && o.RrValue1 != nil {
		return true
	}

	return false
}

// SetRrValue1 gets a reference to the given string and assigns it to the RrValue1 field.
func (o *DnsRrDataData) SetRrValue1(v string) {
	o.RrValue1 = &v
}

// GetRrValue2 returns the RrValue2 field value if set, zero value otherwise.
func (o *DnsRrDataData) GetRrValue2() string {
	if o == nil || o.RrValue2 == nil {
		var ret string
		return ret
	}
	return *o.RrValue2
}

// GetRrValue2Ok returns a tuple with the RrValue2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetRrValue2Ok() (*string, bool) {
	if o == nil || o.RrValue2 == nil {
		return nil, false
	}
	return o.RrValue2, true
}

// HasRrValue2 returns a boolean if a field has been set.
func (o *DnsRrDataData) HasRrValue2() bool {
	if o != nil && o.RrValue2 != nil {
		return true
	}

	return false
}

// SetRrValue2 gets a reference to the given string and assigns it to the RrValue2 field.
func (o *DnsRrDataData) SetRrValue2(v string) {
	o.RrValue2 = &v
}

// GetRrValue3 returns the RrValue3 field value if set, zero value otherwise.
func (o *DnsRrDataData) GetRrValue3() string {
	if o == nil || o.RrValue3 == nil {
		var ret string
		return ret
	}
	return *o.RrValue3
}

// GetRrValue3Ok returns a tuple with the RrValue3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetRrValue3Ok() (*string, bool) {
	if o == nil || o.RrValue3 == nil {
		return nil, false
	}
	return o.RrValue3, true
}

// HasRrValue3 returns a boolean if a field has been set.
func (o *DnsRrDataData) HasRrValue3() bool {
	if o != nil && o.RrValue3 != nil {
		return true
	}

	return false
}

// SetRrValue3 gets a reference to the given string and assigns it to the RrValue3 field.
func (o *DnsRrDataData) SetRrValue3(v string) {
	o.RrValue3 = &v
}

// GetRrValue4 returns the RrValue4 field value if set, zero value otherwise.
func (o *DnsRrDataData) GetRrValue4() string {
	if o == nil || o.RrValue4 == nil {
		var ret string
		return ret
	}
	return *o.RrValue4
}

// GetRrValue4Ok returns a tuple with the RrValue4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetRrValue4Ok() (*string, bool) {
	if o == nil || o.RrValue4 == nil {
		return nil, false
	}
	return o.RrValue4, true
}

// HasRrValue4 returns a boolean if a field has been set.
func (o *DnsRrDataData) HasRrValue4() bool {
	if o != nil && o.RrValue4 != nil {
		return true
	}

	return false
}

// SetRrValue4 gets a reference to the given string and assigns it to the RrValue4 field.
func (o *DnsRrDataData) SetRrValue4(v string) {
	o.RrValue4 = &v
}

// GetRrValue5 returns the RrValue5 field value if set, zero value otherwise.
func (o *DnsRrDataData) GetRrValue5() string {
	if o == nil || o.RrValue5 == nil {
		var ret string
		return ret
	}
	return *o.RrValue5
}

// GetRrValue5Ok returns a tuple with the RrValue5 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetRrValue5Ok() (*string, bool) {
	if o == nil || o.RrValue5 == nil {
		return nil, false
	}
	return o.RrValue5, true
}

// HasRrValue5 returns a boolean if a field has been set.
func (o *DnsRrDataData) HasRrValue5() bool {
	if o != nil && o.RrValue5 != nil {
		return true
	}

	return false
}

// SetRrValue5 gets a reference to the given string and assigns it to the RrValue5 field.
func (o *DnsRrDataData) SetRrValue5(v string) {
	o.RrValue5 = &v
}

// GetRrValue6 returns the RrValue6 field value if set, zero value otherwise.
func (o *DnsRrDataData) GetRrValue6() string {
	if o == nil || o.RrValue6 == nil {
		var ret string
		return ret
	}
	return *o.RrValue6
}

// GetRrValue6Ok returns a tuple with the RrValue6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetRrValue6Ok() (*string, bool) {
	if o == nil || o.RrValue6 == nil {
		return nil, false
	}
	return o.RrValue6, true
}

// HasRrValue6 returns a boolean if a field has been set.
func (o *DnsRrDataData) HasRrValue6() bool {
	if o != nil && o.RrValue6 != nil {
		return true
	}

	return false
}

// SetRrValue6 gets a reference to the given string and assigns it to the RrValue6 field.
func (o *DnsRrDataData) SetRrValue6(v string) {
	o.RrValue6 = &v
}

// GetRrValue7 returns the RrValue7 field value if set, zero value otherwise.
func (o *DnsRrDataData) GetRrValue7() string {
	if o == nil || o.RrValue7 == nil {
		var ret string
		return ret
	}
	return *o.RrValue7
}

// GetRrValue7Ok returns a tuple with the RrValue7 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetRrValue7Ok() (*string, bool) {
	if o == nil || o.RrValue7 == nil {
		return nil, false
	}
	return o.RrValue7, true
}

// HasRrValue7 returns a boolean if a field has been set.
func (o *DnsRrDataData) HasRrValue7() bool {
	if o != nil && o.RrValue7 != nil {
		return true
	}

	return false
}

// SetRrValue7 gets a reference to the given string and assigns it to the RrValue7 field.
func (o *DnsRrDataData) SetRrValue7(v string) {
	o.RrValue7 = &v
}

// GetSmartParentId returns the SmartParentId field value if set, zero value otherwise.
func (o *DnsRrDataData) GetSmartParentId() string {
	if o == nil || o.SmartParentId == nil {
		var ret string
		return ret
	}
	return *o.SmartParentId
}

// GetSmartParentIdOk returns a tuple with the SmartParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetSmartParentIdOk() (*string, bool) {
	if o == nil || o.SmartParentId == nil {
		return nil, false
	}
	return o.SmartParentId, true
}

// HasSmartParentId returns a boolean if a field has been set.
func (o *DnsRrDataData) HasSmartParentId() bool {
	if o != nil && o.SmartParentId != nil {
		return true
	}

	return false
}

// SetSmartParentId gets a reference to the given string and assigns it to the SmartParentId field.
func (o *DnsRrDataData) SetSmartParentId(v string) {
	o.SmartParentId = &v
}

// GetSmartParentName returns the SmartParentName field value if set, zero value otherwise.
func (o *DnsRrDataData) GetSmartParentName() string {
	if o == nil || o.SmartParentName == nil {
		var ret string
		return ret
	}
	return *o.SmartParentName
}

// GetSmartParentNameOk returns a tuple with the SmartParentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsRrDataData) GetSmartParentNameOk() (*string, bool) {
	if o == nil || o.SmartParentName == nil {
		return nil, false
	}
	return o.SmartParentName, true
}

// HasSmartParentName returns a boolean if a field has been set.
func (o *DnsRrDataData) HasSmartParentName() bool {
	if o != nil && o.SmartParentName != nil {
		return true
	}

	return false
}

// SetSmartParentName gets a reference to the given string and assigns it to the SmartParentName field.
func (o *DnsRrDataData) SetSmartParentName(v string) {
	o.SmartParentName = &v
}

func (o DnsRrDataData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RrDelayedCreateTime != nil {
		toSerialize["rr_delayed_create_time"] = o.RrDelayedCreateTime
	}
	if o.RrDelayedDeleteTime != nil {
		toSerialize["rr_delayed_delete_time"] = o.RrDelayedDeleteTime
	}
	if o.RrDelayedTime != nil {
		toSerialize["rr_delayed_time"] = o.RrDelayedTime
	}
	if o.ServerClassName != nil {
		toSerialize["server_class_name"] = o.ServerClassName
	}
	if o.ServerCloud != nil {
		toSerialize["server_cloud"] = o.ServerCloud
	}
	if o.ServerComment != nil {
		toSerialize["server_comment"] = o.ServerComment
	}
	if o.ServerId != nil {
		toSerialize["server_id"] = o.ServerId
	}
	if o.ServerName != nil {
		toSerialize["server_name"] = o.ServerName
	}
	if o.ServerType != nil {
		toSerialize["server_type"] = o.ServerType
	}
	if o.ServerVersion != nil {
		toSerialize["server_version"] = o.ServerVersion
	}
	if o.ViewClassName != nil {
		toSerialize["view_class_name"] = o.ViewClassName
	}
	if o.ViewClassParameters != nil {
		toSerialize["view_class_parameters"] = o.ViewClassParameters
	}
	if o.ViewId != nil {
		toSerialize["view_id"] = o.ViewId
	}
	if o.ViewName != nil {
		toSerialize["view_name"] = o.ViewName
	}
	if o.ZoneClassName != nil {
		toSerialize["zone_class_name"] = o.ZoneClassName
	}
	if o.ZoneForwarders != nil {
		toSerialize["zone_forwarders"] = o.ZoneForwarders
	}
	if o.ZoneId != nil {
		toSerialize["zone_id"] = o.ZoneId
	}
	if o.ZoneIsReverse != nil {
		toSerialize["zone_is_reverse"] = o.ZoneIsReverse
	}
	if o.ZoneIsRpz != nil {
		toSerialize["zone_is_rpz"] = o.ZoneIsRpz
	}
	if o.ZoneMasters != nil {
		toSerialize["zone_masters"] = o.ZoneMasters
	}
	if o.ZoneName != nil {
		toSerialize["zone_name"] = o.ZoneName
	}
	if o.ZoneNameUtf != nil {
		toSerialize["zone_name_utf"] = o.ZoneNameUtf
	}
	if o.ZoneSpaceName != nil {
		toSerialize["zone_space_name"] = o.ZoneSpaceName
	}
	if o.ZoneSortZone != nil {
		toSerialize["zone_sort_zone"] = o.ZoneSortZone
	}
	if o.ZoneType != nil {
		toSerialize["zone_type"] = o.ZoneType
	}
	if o.RrMultistatus != nil {
		toSerialize["rr_multistatus"] = o.RrMultistatus
	}
	if o.RrAllValue != nil {
		toSerialize["rr_all_value"] = o.RrAllValue
	}
	if o.RrClassName != nil {
		toSerialize["rr_class_name"] = o.RrClassName
	}
	if o.RrClassParameters != nil {
		toSerialize["rr_class_parameters"] = o.RrClassParameters
	}
	if o.RrFullName != nil {
		toSerialize["rr_full_name"] = o.RrFullName
	}
	if o.RrFullNameUtf != nil {
		toSerialize["rr_full_name_utf"] = o.RrFullNameUtf
	}
	if o.RrGlue != nil {
		toSerialize["rr_glue"] = o.RrGlue
	}
	if o.RrId != nil {
		toSerialize["rr_id"] = o.RrId
	}
	if o.RrLastUpdateTime != nil {
		toSerialize["rr_last_update_time"] = o.RrLastUpdateTime
	}
	if o.RrNameIp4Addr != nil {
		toSerialize["rr_name_ip4_addr"] = o.RrNameIp4Addr
	}
	if o.RrNameAddressAddr != nil {
		toSerialize["rr_name_address_addr"] = o.RrNameAddressAddr
	}
	if o.RrType != nil {
		toSerialize["rr_type"] = o.RrType
	}
	if o.RrValueIp4Addr != nil {
		toSerialize["rr_value_ip4_addr"] = o.RrValueIp4Addr
	}
	if o.RrValueAddressAddr != nil {
		toSerialize["rr_value_address_addr"] = o.RrValueAddressAddr
	}
	if o.RrTtl != nil {
		toSerialize["rr_ttl"] = o.RrTtl
	}
	if o.RrValue1 != nil {
		toSerialize["rr_value1"] = o.RrValue1
	}
	if o.RrValue2 != nil {
		toSerialize["rr_value2"] = o.RrValue2
	}
	if o.RrValue3 != nil {
		toSerialize["rr_value3"] = o.RrValue3
	}
	if o.RrValue4 != nil {
		toSerialize["rr_value4"] = o.RrValue4
	}
	if o.RrValue5 != nil {
		toSerialize["rr_value5"] = o.RrValue5
	}
	if o.RrValue6 != nil {
		toSerialize["rr_value6"] = o.RrValue6
	}
	if o.RrValue7 != nil {
		toSerialize["rr_value7"] = o.RrValue7
	}
	if o.SmartParentId != nil {
		toSerialize["smart_parent_id"] = o.SmartParentId
	}
	if o.SmartParentName != nil {
		toSerialize["smart_parent_name"] = o.SmartParentName
	}
	return json.Marshal(toSerialize)
}

type NullableDnsRrDataData struct {
	value *DnsRrDataData
	isSet bool
}

func (v NullableDnsRrDataData) Get() *DnsRrDataData {
	return v.value
}

func (v *NullableDnsRrDataData) Set(val *DnsRrDataData) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsRrDataData) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsRrDataData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsRrDataData(val *DnsRrDataData) *NullableDnsRrDataData {
	return &NullableDnsRrDataData{value: val, isSet: true}
}

func (v NullableDnsRrDataData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsRrDataData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


