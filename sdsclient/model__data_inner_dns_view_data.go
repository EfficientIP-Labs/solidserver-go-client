/*
SOLIDserver API

OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2024 EfficientIP</p><p><em>All specifications and information regarding the products in this document are subject to change without notice and should not be construed as a commitment by EfficientIP. EfficientIP assumes no responsibility or liability for any mistakes or inaccuracies that may appear in this document. All statements and recommendations in this document are believed to be accurate but are presented without warranty. Users must take full responsibility for their application of any product.</em></p><p><em>This document aims at detailing EfficientIP proprietary solutions. As our solutions rely on several third-party products, created by other companies or organizations, it may redirect readers to third-party websites and documentation for further information. In such a case, EfficientIP cannot be liable or expected to provide said information on products they do maintain or created.</em></p><p>Generated (Friday 4th of October 2024 03:41:11 PM)</p>

API version: 2.0
Contact: support-api@efficientip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// checks if the DataInnerDnsViewData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataInnerDnsViewData{}

// DataInnerDnsViewData struct for DataInnerDnsViewData
type DataInnerDnsViewData struct {
	// The delay of creation status. <b>1</b> indicates that the object is not created yet.
	ViewDelayedCreateTime *string `json:"view_delayed_create_time,omitempty"`
	// The delay of deletion status. <b>1</b> indicates that the object is not deleted yet.
	ViewDelayedDeleteTime *string `json:"view_delayed_delete_time,omitempty"`
	// The name of the class applied to the DNS server the object belongs to, it can be preceded by the class directory.
	ServerClassName *string `json:"server_class_name,omitempty"`
	// The class parameters applied to the DNS server the object belongs to.
	ServerClassParameters []ApiClassParameterOutputEntry `json:"server_class_parameters,omitempty"`
	// Internal use. Not documented.
	ServerCloud *string `json:"server_cloud,omitempty"`
	// The description of the DNS server the object belongs to.
	ServerComment *string `json:"server_comment,omitempty"`
	// The database identifier (ID) of the DNS server the object belongs to.
	ServerId *string `json:"server_id,omitempty"`
	// The name of the DNS server the object belongs to.
	ServerName *string `json:"server_name,omitempty"`
	// The type of the DNS server the object belongs to.<table><caption>server_type possible values</caption><br/><thead><tr><th>Type</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >ipm</td><td >EfficientIP or EfficientIP Package server</td></tr><tr><td >msdaemon</td><td >Microsoft Windows DNS server</td></tr><tr><td >aws</td><td >Amazon Route 53 server</td></tr><tr><td >other</td><td >Generic DNS server</td></tr><tr><td >vdns</td><td >EfficientIP DNS smart architecture</td></tr></tbody></table></p><br/>
	ServerType *string `json:"server_type,omitempty"`
	// The version details of the DNS server the object belongs to.
	ServerVersion *string `json:"server_version,omitempty"`
	// The ACL values associated with the allow-query configuration of the DNS view, as follows: <b>&lt;value1&gt;;&lt;value2&gt;;... </b>. Values may include IP and network addresses, the name of TSIG keys and ACLs, preceded by <b>!</b> if the access is denied.
	ViewAllowQuery *string `json:"view_allow_query,omitempty"`
	// The ACL values associated with the allow-recursion configuration of the DNS view, as follows: <b>&lt;value1&gt;;&lt;value2&gt;;... </b>. Values may include IP and network addresses, the name of TSIG keys and ACLs, preceded by <b>!</b> if the access is denied.
	ViewAllowRecursion *string `json:"view_allow_recursion,omitempty"`
	// The ACL values associated with the allow-transfer configuration of the DNS view, as follows: <b>&lt;value1&gt;;&lt;value2&gt;;... </b>. Values may include IP and network addresses, the name of TSIG keys and ACLs, preceded by <b>!</b> if the access is denied.
	ViewAllowTransfer *string `json:"view_allow_transfer,omitempty"`
	// The name of the class applied to the DNS view, it can be preceded by the class directory.
	ViewClassName *string `json:"view_class_name,omitempty"`
	// The class parameters applied to the DNS view.
	ViewClassParameters []ApiClassParameterOutputEntry `json:"view_class_parameters,omitempty"`
	// The database identifier (ID) of the DNS view.
	ViewId *string `json:"view_id,omitempty"`
	// The name of the DNS TSIG key associated with the DNS view.
	ViewKeyName *string `json:"view_key_name,omitempty"`
	// The ACL values associated with the match clients configuration of the DNS view, as follows: <b>&lt;value1&gt;;&lt;value2&gt;;...</b> . Values may include IP and network addresses, the name of TSIG keys and ACLs, preceded by <b>!</b> if the access is denied.
	ViewMatchClients *string `json:"view_match_clients,omitempty"`
	// The ACL values associated with the match destination configuration of the DNS view, as follows: <b>&lt;value1&gt;;&lt;value2&gt;;...</b> . Values may include IP and network addresses, the name of TSIG keys and ACLs, preceded by <b>!</b> if the access is denied.
	ViewMatchTo *string `json:"view_match_to,omitempty"`
	// The name of the DNS view.
	ViewName *string `json:"view_name,omitempty"`
	// The level of the DNS view, where <b>0</b> represents the highest level in the views hierarchy. The parameters <b>dnsview_match_client</b> and <b>view_match_to</b> of each view in a server are reviewed following this order.
	ViewOrder *string `json:"view_order,omitempty"`
	// The recursion status of the DNS view:<table><caption>view_recursion possible values</caption><br/><thead><tr><th>Status</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >no</td><td >The view only provides iterative query behavior - normally resulting in a referral. If the answer to the query already exists in the cache it will be returned whatever the value of this statement.</td></tr><tr><td >yes</td><td >The view always provides recursive query behavior if requested by the client.</td></tr></tbody></table></p><br/>
	ViewRecursion *string `json:"view_recursion,omitempty"`
	// The database identifier (ID) of the DNS GSS-TSIG keytab.
	ServerGssKeytabId *string `json:"server_gss_keytab_id,omitempty"`
	// The human readable version of the parameter <b>server_addr</b> or <b>server_addr6</b>.
	ServerHostaddr *string `json:"server_hostaddr,omitempty"`
	// The IPv6 address of the DNS server the object belongs to, in hexadecimal format.
	ServerAddr6 *string `json:"server_addr6,omitempty"`
	// The IPv4 address of the DNS server the object belongs to, in hexadecimal format.
	ServerAddr *string `json:"server_addr,omitempty"`
	// The Multi-status information is displayed as follows: <i>&lt;number-of-instances&gt;@&lt;message-number&gt;@&lt;multi-status-severity&gt;@&lt;module&gt;</i>. The different severity levels are:<br><b>Multi-status severity levels</b>    <table border=1>        <thead>        <tr >            <td><b>Message number</b></td>            <td><b>Severity</b></td>            <td><b>Description</b></td>        </tr>        </thead>        <tbody>        <tr  valign=middle>            <td>0 - 16</td>            <td>Emergency</td>            <td>The object configuration prevents the system from running properly. Action is required.</td>        </tr>        <tr  valign=middle>            <td>17 - 33</td>            <td>Critical</td>            <td>The object configuration is in critical conditions. Immediate action is recommended.</td>        </tr>        <tr  valign=middle>            <td>34 - 50</td>            <td>Error</td>            <td>The object configuration failed at some level. Action is recommended.</td>        </tr>        <tr  valign=middle>            <td>51 - 66</td>            <td>Warning</td>            <td>The object configuration triggers error messages if no action is taken. Action to be taken at your discretion.</td>        </tr>        <tr  valign=middle>            <td>67 - 83</td>            <td>Notice</td>            <td>The object configuration is normal but undergoing events that might trigger errors. No immediate action required.</td>        </tr>        <tr  valign=middle>            <td>84 - 100</td>            <td>Informational</td>            <td>The object configuration is normal, operational messages (might inform you about potential incompatibilities with other modules, etc). No action required.</td>        </tr>        </tbody></table>
	ViewMultistatus *string `json:"view_multistatus,omitempty"`
	// The database identifier (ID) of the DNS smart architecture managing the DNS server the object belongs to. <b>0</b> indicates that the server the object belongs to is not managed by a smart architecture or is a smart architecture itself.
	SmartParentId *string `json:"smart_parent_id,omitempty"`
	// The name of the DNS smart architecture managing the DNS server the object belongs to. <b>#</b> indicates that the server the object belongs to is not managed by a smart architecture or is a smart architecture itself.
	SmartParentName *string `json:"smart_parent_name,omitempty"`
}

// NewDataInnerDnsViewData instantiates a new DataInnerDnsViewData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataInnerDnsViewData() *DataInnerDnsViewData {
	this := DataInnerDnsViewData{}
	return &this
}

// NewDataInnerDnsViewDataWithDefaults instantiates a new DataInnerDnsViewData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataInnerDnsViewDataWithDefaults() *DataInnerDnsViewData {
	this := DataInnerDnsViewData{}
	return &this
}

// GetViewDelayedCreateTime returns the ViewDelayedCreateTime field value if set, zero value otherwise.
func (o *DataInnerDnsViewData) GetViewDelayedCreateTime() string {
	if o == nil || IsNil(o.ViewDelayedCreateTime) {
		var ret string
		return ret
	}
	return *o.ViewDelayedCreateTime
}

// GetViewDelayedCreateTimeOk returns a tuple with the ViewDelayedCreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsViewData) GetViewDelayedCreateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ViewDelayedCreateTime) {
		return nil, false
	}
	return o.ViewDelayedCreateTime, true
}

// HasViewDelayedCreateTime returns a boolean if a field has been set.
func (o *DataInnerDnsViewData) HasViewDelayedCreateTime() bool {
	if o != nil && !IsNil(o.ViewDelayedCreateTime) {
		return true
	}

	return false
}

// SetViewDelayedCreateTime gets a reference to the given string and assigns it to the ViewDelayedCreateTime field.
func (o *DataInnerDnsViewData) SetViewDelayedCreateTime(v string) {
	o.ViewDelayedCreateTime = &v
}

// GetViewDelayedDeleteTime returns the ViewDelayedDeleteTime field value if set, zero value otherwise.
func (o *DataInnerDnsViewData) GetViewDelayedDeleteTime() string {
	if o == nil || IsNil(o.ViewDelayedDeleteTime) {
		var ret string
		return ret
	}
	return *o.ViewDelayedDeleteTime
}

// GetViewDelayedDeleteTimeOk returns a tuple with the ViewDelayedDeleteTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsViewData) GetViewDelayedDeleteTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ViewDelayedDeleteTime) {
		return nil, false
	}
	return o.ViewDelayedDeleteTime, true
}

// HasViewDelayedDeleteTime returns a boolean if a field has been set.
func (o *DataInnerDnsViewData) HasViewDelayedDeleteTime() bool {
	if o != nil && !IsNil(o.ViewDelayedDeleteTime) {
		return true
	}

	return false
}

// SetViewDelayedDeleteTime gets a reference to the given string and assigns it to the ViewDelayedDeleteTime field.
func (o *DataInnerDnsViewData) SetViewDelayedDeleteTime(v string) {
	o.ViewDelayedDeleteTime = &v
}

// GetServerClassName returns the ServerClassName field value if set, zero value otherwise.
func (o *DataInnerDnsViewData) GetServerClassName() string {
	if o == nil || IsNil(o.ServerClassName) {
		var ret string
		return ret
	}
	return *o.ServerClassName
}

// GetServerClassNameOk returns a tuple with the ServerClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsViewData) GetServerClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServerClassName) {
		return nil, false
	}
	return o.ServerClassName, true
}

// HasServerClassName returns a boolean if a field has been set.
func (o *DataInnerDnsViewData) HasServerClassName() bool {
	if o != nil && !IsNil(o.ServerClassName) {
		return true
	}

	return false
}

// SetServerClassName gets a reference to the given string and assigns it to the ServerClassName field.
func (o *DataInnerDnsViewData) SetServerClassName(v string) {
	o.ServerClassName = &v
}

// GetServerClassParameters returns the ServerClassParameters field value if set, zero value otherwise.
func (o *DataInnerDnsViewData) GetServerClassParameters() []ApiClassParameterOutputEntry {
	if o == nil || IsNil(o.ServerClassParameters) {
		var ret []ApiClassParameterOutputEntry
		return ret
	}
	return o.ServerClassParameters
}

// GetServerClassParametersOk returns a tuple with the ServerClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsViewData) GetServerClassParametersOk() ([]ApiClassParameterOutputEntry, bool) {
	if o == nil || IsNil(o.ServerClassParameters) {
		return nil, false
	}
	return o.ServerClassParameters, true
}

// HasServerClassParameters returns a boolean if a field has been set.
func (o *DataInnerDnsViewData) HasServerClassParameters() bool {
	if o != nil && !IsNil(o.ServerClassParameters) {
		return true
	}

	return false
}

// SetServerClassParameters gets a reference to the given []ApiClassParameterOutputEntry and assigns it to the ServerClassParameters field.
func (o *DataInnerDnsViewData) SetServerClassParameters(v []ApiClassParameterOutputEntry) {
	o.ServerClassParameters = v
}

// GetServerCloud returns the ServerCloud field value if set, zero value otherwise.
func (o *DataInnerDnsViewData) GetServerCloud() string {
	if o == nil || IsNil(o.ServerCloud) {
		var ret string
		return ret
	}
	return *o.ServerCloud
}

// GetServerCloudOk returns a tuple with the ServerCloud field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsViewData) GetServerCloudOk() (*string, bool) {
	if o == nil || IsNil(o.ServerCloud) {
		return nil, false
	}
	return o.ServerCloud, true
}

// HasServerCloud returns a boolean if a field has been set.
func (o *DataInnerDnsViewData) HasServerCloud() bool {
	if o != nil && !IsNil(o.ServerCloud) {
		return true
	}

	return false
}

// SetServerCloud gets a reference to the given string and assigns it to the ServerCloud field.
func (o *DataInnerDnsViewData) SetServerCloud(v string) {
	o.ServerCloud = &v
}

// GetServerComment returns the ServerComment field value if set, zero value otherwise.
func (o *DataInnerDnsViewData) GetServerComment() string {
	if o == nil || IsNil(o.ServerComment) {
		var ret string
		return ret
	}
	return *o.ServerComment
}

// GetServerCommentOk returns a tuple with the ServerComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsViewData) GetServerCommentOk() (*string, bool) {
	if o == nil || IsNil(o.ServerComment) {
		return nil, false
	}
	return o.ServerComment, true
}

// HasServerComment returns a boolean if a field has been set.
func (o *DataInnerDnsViewData) HasServerComment() bool {
	if o != nil && !IsNil(o.ServerComment) {
		return true
	}

	return false
}

// SetServerComment gets a reference to the given string and assigns it to the ServerComment field.
func (o *DataInnerDnsViewData) SetServerComment(v string) {
	o.ServerComment = &v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *DataInnerDnsViewData) GetServerId() string {
	if o == nil || IsNil(o.ServerId) {
		var ret string
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsViewData) GetServerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServerId) {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *DataInnerDnsViewData) HasServerId() bool {
	if o != nil && !IsNil(o.ServerId) {
		return true
	}

	return false
}

// SetServerId gets a reference to the given string and assigns it to the ServerId field.
func (o *DataInnerDnsViewData) SetServerId(v string) {
	o.ServerId = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *DataInnerDnsViewData) GetServerName() string {
	if o == nil || IsNil(o.ServerName) {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsViewData) GetServerNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServerName) {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *DataInnerDnsViewData) HasServerName() bool {
	if o != nil && !IsNil(o.ServerName) {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *DataInnerDnsViewData) SetServerName(v string) {
	o.ServerName = &v
}

// GetServerType returns the ServerType field value if set, zero value otherwise.
func (o *DataInnerDnsViewData) GetServerType() string {
	if o == nil || IsNil(o.ServerType) {
		var ret string
		return ret
	}
	return *o.ServerType
}

// GetServerTypeOk returns a tuple with the ServerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsViewData) GetServerTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ServerType) {
		return nil, false
	}
	return o.ServerType, true
}

// HasServerType returns a boolean if a field has been set.
func (o *DataInnerDnsViewData) HasServerType() bool {
	if o != nil && !IsNil(o.ServerType) {
		return true
	}

	return false
}

// SetServerType gets a reference to the given string and assigns it to the ServerType field.
func (o *DataInnerDnsViewData) SetServerType(v string) {
	o.ServerType = &v
}

// GetServerVersion returns the ServerVersion field value if set, zero value otherwise.
func (o *DataInnerDnsViewData) GetServerVersion() string {
	if o == nil || IsNil(o.ServerVersion) {
		var ret string
		return ret
	}
	return *o.ServerVersion
}

// GetServerVersionOk returns a tuple with the ServerVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsViewData) GetServerVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ServerVersion) {
		return nil, false
	}
	return o.ServerVersion, true
}

// HasServerVersion returns a boolean if a field has been set.
func (o *DataInnerDnsViewData) HasServerVersion() bool {
	if o != nil && !IsNil(o.ServerVersion) {
		return true
	}

	return false
}

// SetServerVersion gets a reference to the given string and assigns it to the ServerVersion field.
func (o *DataInnerDnsViewData) SetServerVersion(v string) {
	o.ServerVersion = &v
}

// GetViewAllowQuery returns the ViewAllowQuery field value if set, zero value otherwise.
func (o *DataInnerDnsViewData) GetViewAllowQuery() string {
	if o == nil || IsNil(o.ViewAllowQuery) {
		var ret string
		return ret
	}
	return *o.ViewAllowQuery
}

// GetViewAllowQueryOk returns a tuple with the ViewAllowQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsViewData) GetViewAllowQueryOk() (*string, bool) {
	if o == nil || IsNil(o.ViewAllowQuery) {
		return nil, false
	}
	return o.ViewAllowQuery, true
}

// HasViewAllowQuery returns a boolean if a field has been set.
func (o *DataInnerDnsViewData) HasViewAllowQuery() bool {
	if o != nil && !IsNil(o.ViewAllowQuery) {
		return true
	}

	return false
}

// SetViewAllowQuery gets a reference to the given string and assigns it to the ViewAllowQuery field.
func (o *DataInnerDnsViewData) SetViewAllowQuery(v string) {
	o.ViewAllowQuery = &v
}

// GetViewAllowRecursion returns the ViewAllowRecursion field value if set, zero value otherwise.
func (o *DataInnerDnsViewData) GetViewAllowRecursion() string {
	if o == nil || IsNil(o.ViewAllowRecursion) {
		var ret string
		return ret
	}
	return *o.ViewAllowRecursion
}

// GetViewAllowRecursionOk returns a tuple with the ViewAllowRecursion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsViewData) GetViewAllowRecursionOk() (*string, bool) {
	if o == nil || IsNil(o.ViewAllowRecursion) {
		return nil, false
	}
	return o.ViewAllowRecursion, true
}

// HasViewAllowRecursion returns a boolean if a field has been set.
func (o *DataInnerDnsViewData) HasViewAllowRecursion() bool {
	if o != nil && !IsNil(o.ViewAllowRecursion) {
		return true
	}

	return false
}

// SetViewAllowRecursion gets a reference to the given string and assigns it to the ViewAllowRecursion field.
func (o *DataInnerDnsViewData) SetViewAllowRecursion(v string) {
	o.ViewAllowRecursion = &v
}

// GetViewAllowTransfer returns the ViewAllowTransfer field value if set, zero value otherwise.
func (o *DataInnerDnsViewData) GetViewAllowTransfer() string {
	if o == nil || IsNil(o.ViewAllowTransfer) {
		var ret string
		return ret
	}
	return *o.ViewAllowTransfer
}

// GetViewAllowTransferOk returns a tuple with the ViewAllowTransfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsViewData) GetViewAllowTransferOk() (*string, bool) {
	if o == nil || IsNil(o.ViewAllowTransfer) {
		return nil, false
	}
	return o.ViewAllowTransfer, true
}

// HasViewAllowTransfer returns a boolean if a field has been set.
func (o *DataInnerDnsViewData) HasViewAllowTransfer() bool {
	if o != nil && !IsNil(o.ViewAllowTransfer) {
		return true
	}

	return false
}

// SetViewAllowTransfer gets a reference to the given string and assigns it to the ViewAllowTransfer field.
func (o *DataInnerDnsViewData) SetViewAllowTransfer(v string) {
	o.ViewAllowTransfer = &v
}

// GetViewClassName returns the ViewClassName field value if set, zero value otherwise.
func (o *DataInnerDnsViewData) GetViewClassName() string {
	if o == nil || IsNil(o.ViewClassName) {
		var ret string
		return ret
	}
	return *o.ViewClassName
}

// GetViewClassNameOk returns a tuple with the ViewClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsViewData) GetViewClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.ViewClassName) {
		return nil, false
	}
	return o.ViewClassName, true
}

// HasViewClassName returns a boolean if a field has been set.
func (o *DataInnerDnsViewData) HasViewClassName() bool {
	if o != nil && !IsNil(o.ViewClassName) {
		return true
	}

	return false
}

// SetViewClassName gets a reference to the given string and assigns it to the ViewClassName field.
func (o *DataInnerDnsViewData) SetViewClassName(v string) {
	o.ViewClassName = &v
}

// GetViewClassParameters returns the ViewClassParameters field value if set, zero value otherwise.
func (o *DataInnerDnsViewData) GetViewClassParameters() []ApiClassParameterOutputEntry {
	if o == nil || IsNil(o.ViewClassParameters) {
		var ret []ApiClassParameterOutputEntry
		return ret
	}
	return o.ViewClassParameters
}

// GetViewClassParametersOk returns a tuple with the ViewClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsViewData) GetViewClassParametersOk() ([]ApiClassParameterOutputEntry, bool) {
	if o == nil || IsNil(o.ViewClassParameters) {
		return nil, false
	}
	return o.ViewClassParameters, true
}

// HasViewClassParameters returns a boolean if a field has been set.
func (o *DataInnerDnsViewData) HasViewClassParameters() bool {
	if o != nil && !IsNil(o.ViewClassParameters) {
		return true
	}

	return false
}

// SetViewClassParameters gets a reference to the given []ApiClassParameterOutputEntry and assigns it to the ViewClassParameters field.
func (o *DataInnerDnsViewData) SetViewClassParameters(v []ApiClassParameterOutputEntry) {
	o.ViewClassParameters = v
}

// GetViewId returns the ViewId field value if set, zero value otherwise.
func (o *DataInnerDnsViewData) GetViewId() string {
	if o == nil || IsNil(o.ViewId) {
		var ret string
		return ret
	}
	return *o.ViewId
}

// GetViewIdOk returns a tuple with the ViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsViewData) GetViewIdOk() (*string, bool) {
	if o == nil || IsNil(o.ViewId) {
		return nil, false
	}
	return o.ViewId, true
}

// HasViewId returns a boolean if a field has been set.
func (o *DataInnerDnsViewData) HasViewId() bool {
	if o != nil && !IsNil(o.ViewId) {
		return true
	}

	return false
}

// SetViewId gets a reference to the given string and assigns it to the ViewId field.
func (o *DataInnerDnsViewData) SetViewId(v string) {
	o.ViewId = &v
}

// GetViewKeyName returns the ViewKeyName field value if set, zero value otherwise.
func (o *DataInnerDnsViewData) GetViewKeyName() string {
	if o == nil || IsNil(o.ViewKeyName) {
		var ret string
		return ret
	}
	return *o.ViewKeyName
}

// GetViewKeyNameOk returns a tuple with the ViewKeyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsViewData) GetViewKeyNameOk() (*string, bool) {
	if o == nil || IsNil(o.ViewKeyName) {
		return nil, false
	}
	return o.ViewKeyName, true
}

// HasViewKeyName returns a boolean if a field has been set.
func (o *DataInnerDnsViewData) HasViewKeyName() bool {
	if o != nil && !IsNil(o.ViewKeyName) {
		return true
	}

	return false
}

// SetViewKeyName gets a reference to the given string and assigns it to the ViewKeyName field.
func (o *DataInnerDnsViewData) SetViewKeyName(v string) {
	o.ViewKeyName = &v
}

// GetViewMatchClients returns the ViewMatchClients field value if set, zero value otherwise.
func (o *DataInnerDnsViewData) GetViewMatchClients() string {
	if o == nil || IsNil(o.ViewMatchClients) {
		var ret string
		return ret
	}
	return *o.ViewMatchClients
}

// GetViewMatchClientsOk returns a tuple with the ViewMatchClients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsViewData) GetViewMatchClientsOk() (*string, bool) {
	if o == nil || IsNil(o.ViewMatchClients) {
		return nil, false
	}
	return o.ViewMatchClients, true
}

// HasViewMatchClients returns a boolean if a field has been set.
func (o *DataInnerDnsViewData) HasViewMatchClients() bool {
	if o != nil && !IsNil(o.ViewMatchClients) {
		return true
	}

	return false
}

// SetViewMatchClients gets a reference to the given string and assigns it to the ViewMatchClients field.
func (o *DataInnerDnsViewData) SetViewMatchClients(v string) {
	o.ViewMatchClients = &v
}

// GetViewMatchTo returns the ViewMatchTo field value if set, zero value otherwise.
func (o *DataInnerDnsViewData) GetViewMatchTo() string {
	if o == nil || IsNil(o.ViewMatchTo) {
		var ret string
		return ret
	}
	return *o.ViewMatchTo
}

// GetViewMatchToOk returns a tuple with the ViewMatchTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsViewData) GetViewMatchToOk() (*string, bool) {
	if o == nil || IsNil(o.ViewMatchTo) {
		return nil, false
	}
	return o.ViewMatchTo, true
}

// HasViewMatchTo returns a boolean if a field has been set.
func (o *DataInnerDnsViewData) HasViewMatchTo() bool {
	if o != nil && !IsNil(o.ViewMatchTo) {
		return true
	}

	return false
}

// SetViewMatchTo gets a reference to the given string and assigns it to the ViewMatchTo field.
func (o *DataInnerDnsViewData) SetViewMatchTo(v string) {
	o.ViewMatchTo = &v
}

// GetViewName returns the ViewName field value if set, zero value otherwise.
func (o *DataInnerDnsViewData) GetViewName() string {
	if o == nil || IsNil(o.ViewName) {
		var ret string
		return ret
	}
	return *o.ViewName
}

// GetViewNameOk returns a tuple with the ViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsViewData) GetViewNameOk() (*string, bool) {
	if o == nil || IsNil(o.ViewName) {
		return nil, false
	}
	return o.ViewName, true
}

// HasViewName returns a boolean if a field has been set.
func (o *DataInnerDnsViewData) HasViewName() bool {
	if o != nil && !IsNil(o.ViewName) {
		return true
	}

	return false
}

// SetViewName gets a reference to the given string and assigns it to the ViewName field.
func (o *DataInnerDnsViewData) SetViewName(v string) {
	o.ViewName = &v
}

// GetViewOrder returns the ViewOrder field value if set, zero value otherwise.
func (o *DataInnerDnsViewData) GetViewOrder() string {
	if o == nil || IsNil(o.ViewOrder) {
		var ret string
		return ret
	}
	return *o.ViewOrder
}

// GetViewOrderOk returns a tuple with the ViewOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsViewData) GetViewOrderOk() (*string, bool) {
	if o == nil || IsNil(o.ViewOrder) {
		return nil, false
	}
	return o.ViewOrder, true
}

// HasViewOrder returns a boolean if a field has been set.
func (o *DataInnerDnsViewData) HasViewOrder() bool {
	if o != nil && !IsNil(o.ViewOrder) {
		return true
	}

	return false
}

// SetViewOrder gets a reference to the given string and assigns it to the ViewOrder field.
func (o *DataInnerDnsViewData) SetViewOrder(v string) {
	o.ViewOrder = &v
}

// GetViewRecursion returns the ViewRecursion field value if set, zero value otherwise.
func (o *DataInnerDnsViewData) GetViewRecursion() string {
	if o == nil || IsNil(o.ViewRecursion) {
		var ret string
		return ret
	}
	return *o.ViewRecursion
}

// GetViewRecursionOk returns a tuple with the ViewRecursion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsViewData) GetViewRecursionOk() (*string, bool) {
	if o == nil || IsNil(o.ViewRecursion) {
		return nil, false
	}
	return o.ViewRecursion, true
}

// HasViewRecursion returns a boolean if a field has been set.
func (o *DataInnerDnsViewData) HasViewRecursion() bool {
	if o != nil && !IsNil(o.ViewRecursion) {
		return true
	}

	return false
}

// SetViewRecursion gets a reference to the given string and assigns it to the ViewRecursion field.
func (o *DataInnerDnsViewData) SetViewRecursion(v string) {
	o.ViewRecursion = &v
}

// GetServerGssKeytabId returns the ServerGssKeytabId field value if set, zero value otherwise.
func (o *DataInnerDnsViewData) GetServerGssKeytabId() string {
	if o == nil || IsNil(o.ServerGssKeytabId) {
		var ret string
		return ret
	}
	return *o.ServerGssKeytabId
}

// GetServerGssKeytabIdOk returns a tuple with the ServerGssKeytabId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsViewData) GetServerGssKeytabIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServerGssKeytabId) {
		return nil, false
	}
	return o.ServerGssKeytabId, true
}

// HasServerGssKeytabId returns a boolean if a field has been set.
func (o *DataInnerDnsViewData) HasServerGssKeytabId() bool {
	if o != nil && !IsNil(o.ServerGssKeytabId) {
		return true
	}

	return false
}

// SetServerGssKeytabId gets a reference to the given string and assigns it to the ServerGssKeytabId field.
func (o *DataInnerDnsViewData) SetServerGssKeytabId(v string) {
	o.ServerGssKeytabId = &v
}

// GetServerHostaddr returns the ServerHostaddr field value if set, zero value otherwise.
func (o *DataInnerDnsViewData) GetServerHostaddr() string {
	if o == nil || IsNil(o.ServerHostaddr) {
		var ret string
		return ret
	}
	return *o.ServerHostaddr
}

// GetServerHostaddrOk returns a tuple with the ServerHostaddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsViewData) GetServerHostaddrOk() (*string, bool) {
	if o == nil || IsNil(o.ServerHostaddr) {
		return nil, false
	}
	return o.ServerHostaddr, true
}

// HasServerHostaddr returns a boolean if a field has been set.
func (o *DataInnerDnsViewData) HasServerHostaddr() bool {
	if o != nil && !IsNil(o.ServerHostaddr) {
		return true
	}

	return false
}

// SetServerHostaddr gets a reference to the given string and assigns it to the ServerHostaddr field.
func (o *DataInnerDnsViewData) SetServerHostaddr(v string) {
	o.ServerHostaddr = &v
}

// GetServerAddr6 returns the ServerAddr6 field value if set, zero value otherwise.
func (o *DataInnerDnsViewData) GetServerAddr6() string {
	if o == nil || IsNil(o.ServerAddr6) {
		var ret string
		return ret
	}
	return *o.ServerAddr6
}

// GetServerAddr6Ok returns a tuple with the ServerAddr6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsViewData) GetServerAddr6Ok() (*string, bool) {
	if o == nil || IsNil(o.ServerAddr6) {
		return nil, false
	}
	return o.ServerAddr6, true
}

// HasServerAddr6 returns a boolean if a field has been set.
func (o *DataInnerDnsViewData) HasServerAddr6() bool {
	if o != nil && !IsNil(o.ServerAddr6) {
		return true
	}

	return false
}

// SetServerAddr6 gets a reference to the given string and assigns it to the ServerAddr6 field.
func (o *DataInnerDnsViewData) SetServerAddr6(v string) {
	o.ServerAddr6 = &v
}

// GetServerAddr returns the ServerAddr field value if set, zero value otherwise.
func (o *DataInnerDnsViewData) GetServerAddr() string {
	if o == nil || IsNil(o.ServerAddr) {
		var ret string
		return ret
	}
	return *o.ServerAddr
}

// GetServerAddrOk returns a tuple with the ServerAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsViewData) GetServerAddrOk() (*string, bool) {
	if o == nil || IsNil(o.ServerAddr) {
		return nil, false
	}
	return o.ServerAddr, true
}

// HasServerAddr returns a boolean if a field has been set.
func (o *DataInnerDnsViewData) HasServerAddr() bool {
	if o != nil && !IsNil(o.ServerAddr) {
		return true
	}

	return false
}

// SetServerAddr gets a reference to the given string and assigns it to the ServerAddr field.
func (o *DataInnerDnsViewData) SetServerAddr(v string) {
	o.ServerAddr = &v
}

// GetViewMultistatus returns the ViewMultistatus field value if set, zero value otherwise.
func (o *DataInnerDnsViewData) GetViewMultistatus() string {
	if o == nil || IsNil(o.ViewMultistatus) {
		var ret string
		return ret
	}
	return *o.ViewMultistatus
}

// GetViewMultistatusOk returns a tuple with the ViewMultistatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsViewData) GetViewMultistatusOk() (*string, bool) {
	if o == nil || IsNil(o.ViewMultistatus) {
		return nil, false
	}
	return o.ViewMultistatus, true
}

// HasViewMultistatus returns a boolean if a field has been set.
func (o *DataInnerDnsViewData) HasViewMultistatus() bool {
	if o != nil && !IsNil(o.ViewMultistatus) {
		return true
	}

	return false
}

// SetViewMultistatus gets a reference to the given string and assigns it to the ViewMultistatus field.
func (o *DataInnerDnsViewData) SetViewMultistatus(v string) {
	o.ViewMultistatus = &v
}

// GetSmartParentId returns the SmartParentId field value if set, zero value otherwise.
func (o *DataInnerDnsViewData) GetSmartParentId() string {
	if o == nil || IsNil(o.SmartParentId) {
		var ret string
		return ret
	}
	return *o.SmartParentId
}

// GetSmartParentIdOk returns a tuple with the SmartParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsViewData) GetSmartParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.SmartParentId) {
		return nil, false
	}
	return o.SmartParentId, true
}

// HasSmartParentId returns a boolean if a field has been set.
func (o *DataInnerDnsViewData) HasSmartParentId() bool {
	if o != nil && !IsNil(o.SmartParentId) {
		return true
	}

	return false
}

// SetSmartParentId gets a reference to the given string and assigns it to the SmartParentId field.
func (o *DataInnerDnsViewData) SetSmartParentId(v string) {
	o.SmartParentId = &v
}

// GetSmartParentName returns the SmartParentName field value if set, zero value otherwise.
func (o *DataInnerDnsViewData) GetSmartParentName() string {
	if o == nil || IsNil(o.SmartParentName) {
		var ret string
		return ret
	}
	return *o.SmartParentName
}

// GetSmartParentNameOk returns a tuple with the SmartParentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsViewData) GetSmartParentNameOk() (*string, bool) {
	if o == nil || IsNil(o.SmartParentName) {
		return nil, false
	}
	return o.SmartParentName, true
}

// HasSmartParentName returns a boolean if a field has been set.
func (o *DataInnerDnsViewData) HasSmartParentName() bool {
	if o != nil && !IsNil(o.SmartParentName) {
		return true
	}

	return false
}

// SetSmartParentName gets a reference to the given string and assigns it to the SmartParentName field.
func (o *DataInnerDnsViewData) SetSmartParentName(v string) {
	o.SmartParentName = &v
}

func (o DataInnerDnsViewData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataInnerDnsViewData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ViewDelayedCreateTime) {
		toSerialize["view_delayed_create_time"] = o.ViewDelayedCreateTime
	}
	if !IsNil(o.ViewDelayedDeleteTime) {
		toSerialize["view_delayed_delete_time"] = o.ViewDelayedDeleteTime
	}
	if !IsNil(o.ServerClassName) {
		toSerialize["server_class_name"] = o.ServerClassName
	}
	if !IsNil(o.ServerClassParameters) {
		toSerialize["server_class_parameters"] = o.ServerClassParameters
	}
	if !IsNil(o.ServerCloud) {
		toSerialize["server_cloud"] = o.ServerCloud
	}
	if !IsNil(o.ServerComment) {
		toSerialize["server_comment"] = o.ServerComment
	}
	if !IsNil(o.ServerId) {
		toSerialize["server_id"] = o.ServerId
	}
	if !IsNil(o.ServerName) {
		toSerialize["server_name"] = o.ServerName
	}
	if !IsNil(o.ServerType) {
		toSerialize["server_type"] = o.ServerType
	}
	if !IsNil(o.ServerVersion) {
		toSerialize["server_version"] = o.ServerVersion
	}
	if !IsNil(o.ViewAllowQuery) {
		toSerialize["view_allow_query"] = o.ViewAllowQuery
	}
	if !IsNil(o.ViewAllowRecursion) {
		toSerialize["view_allow_recursion"] = o.ViewAllowRecursion
	}
	if !IsNil(o.ViewAllowTransfer) {
		toSerialize["view_allow_transfer"] = o.ViewAllowTransfer
	}
	if !IsNil(o.ViewClassName) {
		toSerialize["view_class_name"] = o.ViewClassName
	}
	if !IsNil(o.ViewClassParameters) {
		toSerialize["view_class_parameters"] = o.ViewClassParameters
	}
	if !IsNil(o.ViewId) {
		toSerialize["view_id"] = o.ViewId
	}
	if !IsNil(o.ViewKeyName) {
		toSerialize["view_key_name"] = o.ViewKeyName
	}
	if !IsNil(o.ViewMatchClients) {
		toSerialize["view_match_clients"] = o.ViewMatchClients
	}
	if !IsNil(o.ViewMatchTo) {
		toSerialize["view_match_to"] = o.ViewMatchTo
	}
	if !IsNil(o.ViewName) {
		toSerialize["view_name"] = o.ViewName
	}
	if !IsNil(o.ViewOrder) {
		toSerialize["view_order"] = o.ViewOrder
	}
	if !IsNil(o.ViewRecursion) {
		toSerialize["view_recursion"] = o.ViewRecursion
	}
	if !IsNil(o.ServerGssKeytabId) {
		toSerialize["server_gss_keytab_id"] = o.ServerGssKeytabId
	}
	if !IsNil(o.ServerHostaddr) {
		toSerialize["server_hostaddr"] = o.ServerHostaddr
	}
	if !IsNil(o.ServerAddr6) {
		toSerialize["server_addr6"] = o.ServerAddr6
	}
	if !IsNil(o.ServerAddr) {
		toSerialize["server_addr"] = o.ServerAddr
	}
	if !IsNil(o.ViewMultistatus) {
		toSerialize["view_multistatus"] = o.ViewMultistatus
	}
	if !IsNil(o.SmartParentId) {
		toSerialize["smart_parent_id"] = o.SmartParentId
	}
	if !IsNil(o.SmartParentName) {
		toSerialize["smart_parent_name"] = o.SmartParentName
	}
	return toSerialize, nil
}

type NullableDataInnerDnsViewData struct {
	value *DataInnerDnsViewData
	isSet bool
}

func (v NullableDataInnerDnsViewData) Get() *DataInnerDnsViewData {
	return v.value
}

func (v *NullableDataInnerDnsViewData) Set(val *DataInnerDnsViewData) {
	v.value = val
	v.isSet = true
}

func (v NullableDataInnerDnsViewData) IsSet() bool {
	return v.isSet
}

func (v *NullableDataInnerDnsViewData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataInnerDnsViewData(val *DataInnerDnsViewData) *NullableDataInnerDnsViewData {
	return &NullableDataInnerDnsViewData{value: val, isSet: true}
}

func (v NullableDataInnerDnsViewData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataInnerDnsViewData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
