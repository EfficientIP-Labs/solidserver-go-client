/*
SOLIDserver API

OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2024 EfficientIP</p><p><em>All specifications and information regarding the products in this document are subject to change without notice and should not be construed as a commitment by EfficientIP. EfficientIP assumes no responsibility or liability for any mistakes or inaccuracies that may appear in this document. All statements and recommendations in this document are believed to be accurate but are presented without warranty. Users must take full responsibility for their application of any product.</em></p><p><em>This document aims at detailing EfficientIP proprietary solutions. As our solutions rely on several third-party products, created by other companies or organizations, it may redirect readers to third-party websites and documentation for further information. In such a case, EfficientIP cannot be liable or expected to provide said information on products they do maintain or created.</em></p><p>Generated (Friday 4th of October 2024 03:41:11 PM)</p>

API version: 2.0
Contact: support-api@efficientip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// checks if the VlanRangeEditInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VlanRangeEditInput{}

// VlanRangeEditInput struct for VlanRangeEditInput
type VlanRangeEditInput struct {
	// The database identifier (ID) of the VLAN domain, a unique numeric key value automatically incremented when you add a VLAN domain. Use the ID to specify the VLAN domain of your choice.
	DomainId *int32 `json:"domain_id,omitempty"`
	// The name of the VLAN domain.
	DomainName *string `json:"domain_name,omitempty"`
	// The database identifier (ID) of the VLAN range, a unique numeric key value automatically incremented when you add a VLAN range. Use the ID to specify the VLAN range of your choice.
	RangeId *int32 `json:"range_id,omitempty"`
	// The name of the VLAN range, each VLAN range must have a unique name.
	RangeName *string `json:"range_name,omitempty"`
	// The description of the VLAN range.
	RangeDescription *string `json:"range_description,omitempty"`
	// The overlapping restriction status of the VLAN range. Set it to <b>1</b> to prevent VLAN ID overlapping in the range.
	RangeDisableOverlapping *int32 `json:"range_disable_overlapping,omitempty"`
	// The VLAN identifier (ID) of an existing VLAN you want to set as the last VLAN in the VLAN range.
	RangeEndVlanId *int32 `json:"range_end_vlan_id,omitempty"`
	// The VLAN identifier (ID) of an existing VLAN you want to set as the first VLAN in the VLAN range.
	RangeStartVlanId *int32 `json:"range_start_vlan_id,omitempty"`
	// class parameters you want to delete from the object
	ClassParametersToDelete []string `json:"class_parameters_to_delete,omitempty"`
	// The name of the class to apply to the object you are editing. You must specify the class file directory, e.g. <b>my_directory/my_class.class</b> . You cannot use the classes <b>global</b> and <b>default</b>, they are reserved by the system.
	RangeClassName *string `json:"range_class_name,omitempty"`
	// class parameters in json format
	RangeClassParameters []ApiClassParameterInputEntry `json:"range_class_parameters,omitempty"`
	// A way to bypass <b>(accept) </b>any enabled rule that would return warning messages. If the service returns an error message, you cannot bypass the enabled rules.
	Warnings *string `json:"warnings,omitempty"`
}

// NewVlanRangeEditInput instantiates a new VlanRangeEditInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVlanRangeEditInput() *VlanRangeEditInput {
	this := VlanRangeEditInput{}
	return &this
}

// NewVlanRangeEditInputWithDefaults instantiates a new VlanRangeEditInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVlanRangeEditInputWithDefaults() *VlanRangeEditInput {
	this := VlanRangeEditInput{}
	return &this
}

// GetDomainId returns the DomainId field value if set, zero value otherwise.
func (o *VlanRangeEditInput) GetDomainId() int32 {
	if o == nil || IsNil(o.DomainId) {
		var ret int32
		return ret
	}
	return *o.DomainId
}

// GetDomainIdOk returns a tuple with the DomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VlanRangeEditInput) GetDomainIdOk() (*int32, bool) {
	if o == nil || IsNil(o.DomainId) {
		return nil, false
	}
	return o.DomainId, true
}

// HasDomainId returns a boolean if a field has been set.
func (o *VlanRangeEditInput) HasDomainId() bool {
	if o != nil && !IsNil(o.DomainId) {
		return true
	}

	return false
}

// SetDomainId gets a reference to the given int32 and assigns it to the DomainId field.
func (o *VlanRangeEditInput) SetDomainId(v int32) {
	o.DomainId = &v
}

// GetDomainName returns the DomainName field value if set, zero value otherwise.
func (o *VlanRangeEditInput) GetDomainName() string {
	if o == nil || IsNil(o.DomainName) {
		var ret string
		return ret
	}
	return *o.DomainName
}

// GetDomainNameOk returns a tuple with the DomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VlanRangeEditInput) GetDomainNameOk() (*string, bool) {
	if o == nil || IsNil(o.DomainName) {
		return nil, false
	}
	return o.DomainName, true
}

// HasDomainName returns a boolean if a field has been set.
func (o *VlanRangeEditInput) HasDomainName() bool {
	if o != nil && !IsNil(o.DomainName) {
		return true
	}

	return false
}

// SetDomainName gets a reference to the given string and assigns it to the DomainName field.
func (o *VlanRangeEditInput) SetDomainName(v string) {
	o.DomainName = &v
}

// GetRangeId returns the RangeId field value if set, zero value otherwise.
func (o *VlanRangeEditInput) GetRangeId() int32 {
	if o == nil || IsNil(o.RangeId) {
		var ret int32
		return ret
	}
	return *o.RangeId
}

// GetRangeIdOk returns a tuple with the RangeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VlanRangeEditInput) GetRangeIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RangeId) {
		return nil, false
	}
	return o.RangeId, true
}

// HasRangeId returns a boolean if a field has been set.
func (o *VlanRangeEditInput) HasRangeId() bool {
	if o != nil && !IsNil(o.RangeId) {
		return true
	}

	return false
}

// SetRangeId gets a reference to the given int32 and assigns it to the RangeId field.
func (o *VlanRangeEditInput) SetRangeId(v int32) {
	o.RangeId = &v
}

// GetRangeName returns the RangeName field value if set, zero value otherwise.
func (o *VlanRangeEditInput) GetRangeName() string {
	if o == nil || IsNil(o.RangeName) {
		var ret string
		return ret
	}
	return *o.RangeName
}

// GetRangeNameOk returns a tuple with the RangeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VlanRangeEditInput) GetRangeNameOk() (*string, bool) {
	if o == nil || IsNil(o.RangeName) {
		return nil, false
	}
	return o.RangeName, true
}

// HasRangeName returns a boolean if a field has been set.
func (o *VlanRangeEditInput) HasRangeName() bool {
	if o != nil && !IsNil(o.RangeName) {
		return true
	}

	return false
}

// SetRangeName gets a reference to the given string and assigns it to the RangeName field.
func (o *VlanRangeEditInput) SetRangeName(v string) {
	o.RangeName = &v
}

// GetRangeDescription returns the RangeDescription field value if set, zero value otherwise.
func (o *VlanRangeEditInput) GetRangeDescription() string {
	if o == nil || IsNil(o.RangeDescription) {
		var ret string
		return ret
	}
	return *o.RangeDescription
}

// GetRangeDescriptionOk returns a tuple with the RangeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VlanRangeEditInput) GetRangeDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.RangeDescription) {
		return nil, false
	}
	return o.RangeDescription, true
}

// HasRangeDescription returns a boolean if a field has been set.
func (o *VlanRangeEditInput) HasRangeDescription() bool {
	if o != nil && !IsNil(o.RangeDescription) {
		return true
	}

	return false
}

// SetRangeDescription gets a reference to the given string and assigns it to the RangeDescription field.
func (o *VlanRangeEditInput) SetRangeDescription(v string) {
	o.RangeDescription = &v
}

// GetRangeDisableOverlapping returns the RangeDisableOverlapping field value if set, zero value otherwise.
func (o *VlanRangeEditInput) GetRangeDisableOverlapping() int32 {
	if o == nil || IsNil(o.RangeDisableOverlapping) {
		var ret int32
		return ret
	}
	return *o.RangeDisableOverlapping
}

// GetRangeDisableOverlappingOk returns a tuple with the RangeDisableOverlapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VlanRangeEditInput) GetRangeDisableOverlappingOk() (*int32, bool) {
	if o == nil || IsNil(o.RangeDisableOverlapping) {
		return nil, false
	}
	return o.RangeDisableOverlapping, true
}

// HasRangeDisableOverlapping returns a boolean if a field has been set.
func (o *VlanRangeEditInput) HasRangeDisableOverlapping() bool {
	if o != nil && !IsNil(o.RangeDisableOverlapping) {
		return true
	}

	return false
}

// SetRangeDisableOverlapping gets a reference to the given int32 and assigns it to the RangeDisableOverlapping field.
func (o *VlanRangeEditInput) SetRangeDisableOverlapping(v int32) {
	o.RangeDisableOverlapping = &v
}

// GetRangeEndVlanId returns the RangeEndVlanId field value if set, zero value otherwise.
func (o *VlanRangeEditInput) GetRangeEndVlanId() int32 {
	if o == nil || IsNil(o.RangeEndVlanId) {
		var ret int32
		return ret
	}
	return *o.RangeEndVlanId
}

// GetRangeEndVlanIdOk returns a tuple with the RangeEndVlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VlanRangeEditInput) GetRangeEndVlanIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RangeEndVlanId) {
		return nil, false
	}
	return o.RangeEndVlanId, true
}

// HasRangeEndVlanId returns a boolean if a field has been set.
func (o *VlanRangeEditInput) HasRangeEndVlanId() bool {
	if o != nil && !IsNil(o.RangeEndVlanId) {
		return true
	}

	return false
}

// SetRangeEndVlanId gets a reference to the given int32 and assigns it to the RangeEndVlanId field.
func (o *VlanRangeEditInput) SetRangeEndVlanId(v int32) {
	o.RangeEndVlanId = &v
}

// GetRangeStartVlanId returns the RangeStartVlanId field value if set, zero value otherwise.
func (o *VlanRangeEditInput) GetRangeStartVlanId() int32 {
	if o == nil || IsNil(o.RangeStartVlanId) {
		var ret int32
		return ret
	}
	return *o.RangeStartVlanId
}

// GetRangeStartVlanIdOk returns a tuple with the RangeStartVlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VlanRangeEditInput) GetRangeStartVlanIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RangeStartVlanId) {
		return nil, false
	}
	return o.RangeStartVlanId, true
}

// HasRangeStartVlanId returns a boolean if a field has been set.
func (o *VlanRangeEditInput) HasRangeStartVlanId() bool {
	if o != nil && !IsNil(o.RangeStartVlanId) {
		return true
	}

	return false
}

// SetRangeStartVlanId gets a reference to the given int32 and assigns it to the RangeStartVlanId field.
func (o *VlanRangeEditInput) SetRangeStartVlanId(v int32) {
	o.RangeStartVlanId = &v
}

// GetClassParametersToDelete returns the ClassParametersToDelete field value if set, zero value otherwise.
func (o *VlanRangeEditInput) GetClassParametersToDelete() []string {
	if o == nil || IsNil(o.ClassParametersToDelete) {
		var ret []string
		return ret
	}
	return o.ClassParametersToDelete
}

// GetClassParametersToDeleteOk returns a tuple with the ClassParametersToDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VlanRangeEditInput) GetClassParametersToDeleteOk() ([]string, bool) {
	if o == nil || IsNil(o.ClassParametersToDelete) {
		return nil, false
	}
	return o.ClassParametersToDelete, true
}

// HasClassParametersToDelete returns a boolean if a field has been set.
func (o *VlanRangeEditInput) HasClassParametersToDelete() bool {
	if o != nil && !IsNil(o.ClassParametersToDelete) {
		return true
	}

	return false
}

// SetClassParametersToDelete gets a reference to the given []string and assigns it to the ClassParametersToDelete field.
func (o *VlanRangeEditInput) SetClassParametersToDelete(v []string) {
	o.ClassParametersToDelete = v
}

// GetRangeClassName returns the RangeClassName field value if set, zero value otherwise.
func (o *VlanRangeEditInput) GetRangeClassName() string {
	if o == nil || IsNil(o.RangeClassName) {
		var ret string
		return ret
	}
	return *o.RangeClassName
}

// GetRangeClassNameOk returns a tuple with the RangeClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VlanRangeEditInput) GetRangeClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.RangeClassName) {
		return nil, false
	}
	return o.RangeClassName, true
}

// HasRangeClassName returns a boolean if a field has been set.
func (o *VlanRangeEditInput) HasRangeClassName() bool {
	if o != nil && !IsNil(o.RangeClassName) {
		return true
	}

	return false
}

// SetRangeClassName gets a reference to the given string and assigns it to the RangeClassName field.
func (o *VlanRangeEditInput) SetRangeClassName(v string) {
	o.RangeClassName = &v
}

// GetRangeClassParameters returns the RangeClassParameters field value if set, zero value otherwise.
func (o *VlanRangeEditInput) GetRangeClassParameters() []ApiClassParameterInputEntry {
	if o == nil || IsNil(o.RangeClassParameters) {
		var ret []ApiClassParameterInputEntry
		return ret
	}
	return o.RangeClassParameters
}

// GetRangeClassParametersOk returns a tuple with the RangeClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VlanRangeEditInput) GetRangeClassParametersOk() ([]ApiClassParameterInputEntry, bool) {
	if o == nil || IsNil(o.RangeClassParameters) {
		return nil, false
	}
	return o.RangeClassParameters, true
}

// HasRangeClassParameters returns a boolean if a field has been set.
func (o *VlanRangeEditInput) HasRangeClassParameters() bool {
	if o != nil && !IsNil(o.RangeClassParameters) {
		return true
	}

	return false
}

// SetRangeClassParameters gets a reference to the given []ApiClassParameterInputEntry and assigns it to the RangeClassParameters field.
func (o *VlanRangeEditInput) SetRangeClassParameters(v []ApiClassParameterInputEntry) {
	o.RangeClassParameters = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *VlanRangeEditInput) GetWarnings() string {
	if o == nil || IsNil(o.Warnings) {
		var ret string
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VlanRangeEditInput) GetWarningsOk() (*string, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *VlanRangeEditInput) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given string and assigns it to the Warnings field.
func (o *VlanRangeEditInput) SetWarnings(v string) {
	o.Warnings = &v
}

func (o VlanRangeEditInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VlanRangeEditInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DomainId) {
		toSerialize["domain_id"] = o.DomainId
	}
	if !IsNil(o.DomainName) {
		toSerialize["domain_name"] = o.DomainName
	}
	if !IsNil(o.RangeId) {
		toSerialize["range_id"] = o.RangeId
	}
	if !IsNil(o.RangeName) {
		toSerialize["range_name"] = o.RangeName
	}
	if !IsNil(o.RangeDescription) {
		toSerialize["range_description"] = o.RangeDescription
	}
	if !IsNil(o.RangeDisableOverlapping) {
		toSerialize["range_disable_overlapping"] = o.RangeDisableOverlapping
	}
	if !IsNil(o.RangeEndVlanId) {
		toSerialize["range_end_vlan_id"] = o.RangeEndVlanId
	}
	if !IsNil(o.RangeStartVlanId) {
		toSerialize["range_start_vlan_id"] = o.RangeStartVlanId
	}
	if !IsNil(o.ClassParametersToDelete) {
		toSerialize["class_parameters_to_delete"] = o.ClassParametersToDelete
	}
	if !IsNil(o.RangeClassName) {
		toSerialize["range_class_name"] = o.RangeClassName
	}
	if !IsNil(o.RangeClassParameters) {
		toSerialize["range_class_parameters"] = o.RangeClassParameters
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableVlanRangeEditInput struct {
	value *VlanRangeEditInput
	isSet bool
}

func (v NullableVlanRangeEditInput) Get() *VlanRangeEditInput {
	return v.value
}

func (v *NullableVlanRangeEditInput) Set(val *VlanRangeEditInput) {
	v.value = val
	v.isSet = true
}

func (v NullableVlanRangeEditInput) IsSet() bool {
	return v.isSet
}

func (v *NullableVlanRangeEditInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVlanRangeEditInput(val *VlanRangeEditInput) *NullableVlanRangeEditInput {
	return &NullableVlanRangeEditInput{value: val, isSet: true}
}

func (v NullableVlanRangeEditInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVlanRangeEditInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
