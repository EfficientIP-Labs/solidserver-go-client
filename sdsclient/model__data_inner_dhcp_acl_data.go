/*
SOLIDserver API

OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2024 EfficientIP</p><p><em>All specifications and information regarding the products in this document are subject to change without notice and should not be construed as a commitment by EfficientIP. EfficientIP assumes no responsibility or liability for any mistakes or inaccuracies that may appear in this document. All statements and recommendations in this document are believed to be accurate but are presented without warranty. Users must take full responsibility for their application of any product.</em></p><p><em>This document aims at detailing EfficientIP proprietary solutions. As our solutions rely on several third-party products, created by other companies or organizations, it may redirect readers to third-party websites and documentation for further information. In such a case, EfficientIP cannot be liable or expected to provide said information on products they do maintain or created.</em></p><p>Generated (Friday 4th of October 2024 03:41:11 PM)</p>

API version: 2.0
Contact: support-api@efficientip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// checks if the DataInnerDhcpAclData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataInnerDhcpAclData{}

// DataInnerDhcpAclData struct for DataInnerDhcpAclData
type DataInnerDhcpAclData struct {
	// The role of the server the object belongs to in the cluster, either <b>active (M)</b>, <b>passive (B)</b> or <b>N/A (#)</b>.
	ServerClusterRole *string `json:"server_cluster_role,omitempty"`
	// The delay of creation status. <b>1</b> indicates that the object is not created yet.
	AclDelayedCreateTime *string `json:"acl_delayed_create_time,omitempty"`
	// The delay of deletion status. <b>1</b> indicates that the object is not deleted yet.
	AclDelayedDeleteTime *string `json:"acl_delayed_delete_time,omitempty"`
	// The database identifier (ID) of the DHCPv4 server the object belongs to.
	ServerId *string `json:"server_id,omitempty"`
	// The name of the DHCPv4 server the object belongs to.
	ServerName *string `json:"server_name,omitempty"`
	// The type of the DHCPv4 server the object belongs to: <table><caption>server_type possible values</caption><br/><thead><tr><th>Type</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >ipm</td><td >EfficientIP or EfficientIP Package server</td></tr><tr><td >msrpc</td><td >Microsoft Windows DHCP server</td></tr><tr><td >vdhcp</td><td >EfficientIP DHCPv4 smart architecture</td></tr></tbody></table></p><br/>
	ServerType *string `json:"server_type,omitempty"`
	// The database identifier (ID) of the DHCPv4 ACL.
	AclId *string `json:"acl_id,omitempty"`
	// The lease limit of the DHCPv4 ACL.
	AclLeaselimit *string `json:"acl_leaselimit,omitempty"`
	// The ACL rule associated with the DHCPv4 ACL, as follows: <b>&lt;match if (substring(option agent.remote-id,0,6) = dslam1);&gt;</b>
	AclMatch *string `json:"acl_match,omitempty"`
	// The name of the DHCPv4 ACL.
	AclName *string `json:"acl_name,omitempty"`
	// The spawning class associated with the DHCPv4 ACL.
	AclSpawnwith *string `json:"acl_spawnwith,omitempty"`
	// The statement associated with the DHCPv4 ACL.
	AclStatement *string `json:"acl_statement,omitempty"`
	// The database identifier (ID) of the DHCPv4 smart architecture managing the DHCPv4 server the object belongs to. <b>0</b> indicates that the server the object belongs to is not managed by a smart architecture or is a smart architecture itself.
	SmartParentId *string `json:"smart_parent_id,omitempty"`
}

// NewDataInnerDhcpAclData instantiates a new DataInnerDhcpAclData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataInnerDhcpAclData() *DataInnerDhcpAclData {
	this := DataInnerDhcpAclData{}
	return &this
}

// NewDataInnerDhcpAclDataWithDefaults instantiates a new DataInnerDhcpAclData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataInnerDhcpAclDataWithDefaults() *DataInnerDhcpAclData {
	this := DataInnerDhcpAclData{}
	return &this
}

// GetServerClusterRole returns the ServerClusterRole field value if set, zero value otherwise.
func (o *DataInnerDhcpAclData) GetServerClusterRole() string {
	if o == nil || IsNil(o.ServerClusterRole) {
		var ret string
		return ret
	}
	return *o.ServerClusterRole
}

// GetServerClusterRoleOk returns a tuple with the ServerClusterRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpAclData) GetServerClusterRoleOk() (*string, bool) {
	if o == nil || IsNil(o.ServerClusterRole) {
		return nil, false
	}
	return o.ServerClusterRole, true
}

// HasServerClusterRole returns a boolean if a field has been set.
func (o *DataInnerDhcpAclData) HasServerClusterRole() bool {
	if o != nil && !IsNil(o.ServerClusterRole) {
		return true
	}

	return false
}

// SetServerClusterRole gets a reference to the given string and assigns it to the ServerClusterRole field.
func (o *DataInnerDhcpAclData) SetServerClusterRole(v string) {
	o.ServerClusterRole = &v
}

// GetAclDelayedCreateTime returns the AclDelayedCreateTime field value if set, zero value otherwise.
func (o *DataInnerDhcpAclData) GetAclDelayedCreateTime() string {
	if o == nil || IsNil(o.AclDelayedCreateTime) {
		var ret string
		return ret
	}
	return *o.AclDelayedCreateTime
}

// GetAclDelayedCreateTimeOk returns a tuple with the AclDelayedCreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpAclData) GetAclDelayedCreateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.AclDelayedCreateTime) {
		return nil, false
	}
	return o.AclDelayedCreateTime, true
}

// HasAclDelayedCreateTime returns a boolean if a field has been set.
func (o *DataInnerDhcpAclData) HasAclDelayedCreateTime() bool {
	if o != nil && !IsNil(o.AclDelayedCreateTime) {
		return true
	}

	return false
}

// SetAclDelayedCreateTime gets a reference to the given string and assigns it to the AclDelayedCreateTime field.
func (o *DataInnerDhcpAclData) SetAclDelayedCreateTime(v string) {
	o.AclDelayedCreateTime = &v
}

// GetAclDelayedDeleteTime returns the AclDelayedDeleteTime field value if set, zero value otherwise.
func (o *DataInnerDhcpAclData) GetAclDelayedDeleteTime() string {
	if o == nil || IsNil(o.AclDelayedDeleteTime) {
		var ret string
		return ret
	}
	return *o.AclDelayedDeleteTime
}

// GetAclDelayedDeleteTimeOk returns a tuple with the AclDelayedDeleteTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpAclData) GetAclDelayedDeleteTimeOk() (*string, bool) {
	if o == nil || IsNil(o.AclDelayedDeleteTime) {
		return nil, false
	}
	return o.AclDelayedDeleteTime, true
}

// HasAclDelayedDeleteTime returns a boolean if a field has been set.
func (o *DataInnerDhcpAclData) HasAclDelayedDeleteTime() bool {
	if o != nil && !IsNil(o.AclDelayedDeleteTime) {
		return true
	}

	return false
}

// SetAclDelayedDeleteTime gets a reference to the given string and assigns it to the AclDelayedDeleteTime field.
func (o *DataInnerDhcpAclData) SetAclDelayedDeleteTime(v string) {
	o.AclDelayedDeleteTime = &v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *DataInnerDhcpAclData) GetServerId() string {
	if o == nil || IsNil(o.ServerId) {
		var ret string
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpAclData) GetServerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServerId) {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *DataInnerDhcpAclData) HasServerId() bool {
	if o != nil && !IsNil(o.ServerId) {
		return true
	}

	return false
}

// SetServerId gets a reference to the given string and assigns it to the ServerId field.
func (o *DataInnerDhcpAclData) SetServerId(v string) {
	o.ServerId = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *DataInnerDhcpAclData) GetServerName() string {
	if o == nil || IsNil(o.ServerName) {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpAclData) GetServerNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServerName) {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *DataInnerDhcpAclData) HasServerName() bool {
	if o != nil && !IsNil(o.ServerName) {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *DataInnerDhcpAclData) SetServerName(v string) {
	o.ServerName = &v
}

// GetServerType returns the ServerType field value if set, zero value otherwise.
func (o *DataInnerDhcpAclData) GetServerType() string {
	if o == nil || IsNil(o.ServerType) {
		var ret string
		return ret
	}
	return *o.ServerType
}

// GetServerTypeOk returns a tuple with the ServerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpAclData) GetServerTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ServerType) {
		return nil, false
	}
	return o.ServerType, true
}

// HasServerType returns a boolean if a field has been set.
func (o *DataInnerDhcpAclData) HasServerType() bool {
	if o != nil && !IsNil(o.ServerType) {
		return true
	}

	return false
}

// SetServerType gets a reference to the given string and assigns it to the ServerType field.
func (o *DataInnerDhcpAclData) SetServerType(v string) {
	o.ServerType = &v
}

// GetAclId returns the AclId field value if set, zero value otherwise.
func (o *DataInnerDhcpAclData) GetAclId() string {
	if o == nil || IsNil(o.AclId) {
		var ret string
		return ret
	}
	return *o.AclId
}

// GetAclIdOk returns a tuple with the AclId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpAclData) GetAclIdOk() (*string, bool) {
	if o == nil || IsNil(o.AclId) {
		return nil, false
	}
	return o.AclId, true
}

// HasAclId returns a boolean if a field has been set.
func (o *DataInnerDhcpAclData) HasAclId() bool {
	if o != nil && !IsNil(o.AclId) {
		return true
	}

	return false
}

// SetAclId gets a reference to the given string and assigns it to the AclId field.
func (o *DataInnerDhcpAclData) SetAclId(v string) {
	o.AclId = &v
}

// GetAclLeaselimit returns the AclLeaselimit field value if set, zero value otherwise.
func (o *DataInnerDhcpAclData) GetAclLeaselimit() string {
	if o == nil || IsNil(o.AclLeaselimit) {
		var ret string
		return ret
	}
	return *o.AclLeaselimit
}

// GetAclLeaselimitOk returns a tuple with the AclLeaselimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpAclData) GetAclLeaselimitOk() (*string, bool) {
	if o == nil || IsNil(o.AclLeaselimit) {
		return nil, false
	}
	return o.AclLeaselimit, true
}

// HasAclLeaselimit returns a boolean if a field has been set.
func (o *DataInnerDhcpAclData) HasAclLeaselimit() bool {
	if o != nil && !IsNil(o.AclLeaselimit) {
		return true
	}

	return false
}

// SetAclLeaselimit gets a reference to the given string and assigns it to the AclLeaselimit field.
func (o *DataInnerDhcpAclData) SetAclLeaselimit(v string) {
	o.AclLeaselimit = &v
}

// GetAclMatch returns the AclMatch field value if set, zero value otherwise.
func (o *DataInnerDhcpAclData) GetAclMatch() string {
	if o == nil || IsNil(o.AclMatch) {
		var ret string
		return ret
	}
	return *o.AclMatch
}

// GetAclMatchOk returns a tuple with the AclMatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpAclData) GetAclMatchOk() (*string, bool) {
	if o == nil || IsNil(o.AclMatch) {
		return nil, false
	}
	return o.AclMatch, true
}

// HasAclMatch returns a boolean if a field has been set.
func (o *DataInnerDhcpAclData) HasAclMatch() bool {
	if o != nil && !IsNil(o.AclMatch) {
		return true
	}

	return false
}

// SetAclMatch gets a reference to the given string and assigns it to the AclMatch field.
func (o *DataInnerDhcpAclData) SetAclMatch(v string) {
	o.AclMatch = &v
}

// GetAclName returns the AclName field value if set, zero value otherwise.
func (o *DataInnerDhcpAclData) GetAclName() string {
	if o == nil || IsNil(o.AclName) {
		var ret string
		return ret
	}
	return *o.AclName
}

// GetAclNameOk returns a tuple with the AclName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpAclData) GetAclNameOk() (*string, bool) {
	if o == nil || IsNil(o.AclName) {
		return nil, false
	}
	return o.AclName, true
}

// HasAclName returns a boolean if a field has been set.
func (o *DataInnerDhcpAclData) HasAclName() bool {
	if o != nil && !IsNil(o.AclName) {
		return true
	}

	return false
}

// SetAclName gets a reference to the given string and assigns it to the AclName field.
func (o *DataInnerDhcpAclData) SetAclName(v string) {
	o.AclName = &v
}

// GetAclSpawnwith returns the AclSpawnwith field value if set, zero value otherwise.
func (o *DataInnerDhcpAclData) GetAclSpawnwith() string {
	if o == nil || IsNil(o.AclSpawnwith) {
		var ret string
		return ret
	}
	return *o.AclSpawnwith
}

// GetAclSpawnwithOk returns a tuple with the AclSpawnwith field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpAclData) GetAclSpawnwithOk() (*string, bool) {
	if o == nil || IsNil(o.AclSpawnwith) {
		return nil, false
	}
	return o.AclSpawnwith, true
}

// HasAclSpawnwith returns a boolean if a field has been set.
func (o *DataInnerDhcpAclData) HasAclSpawnwith() bool {
	if o != nil && !IsNil(o.AclSpawnwith) {
		return true
	}

	return false
}

// SetAclSpawnwith gets a reference to the given string and assigns it to the AclSpawnwith field.
func (o *DataInnerDhcpAclData) SetAclSpawnwith(v string) {
	o.AclSpawnwith = &v
}

// GetAclStatement returns the AclStatement field value if set, zero value otherwise.
func (o *DataInnerDhcpAclData) GetAclStatement() string {
	if o == nil || IsNil(o.AclStatement) {
		var ret string
		return ret
	}
	return *o.AclStatement
}

// GetAclStatementOk returns a tuple with the AclStatement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpAclData) GetAclStatementOk() (*string, bool) {
	if o == nil || IsNil(o.AclStatement) {
		return nil, false
	}
	return o.AclStatement, true
}

// HasAclStatement returns a boolean if a field has been set.
func (o *DataInnerDhcpAclData) HasAclStatement() bool {
	if o != nil && !IsNil(o.AclStatement) {
		return true
	}

	return false
}

// SetAclStatement gets a reference to the given string and assigns it to the AclStatement field.
func (o *DataInnerDhcpAclData) SetAclStatement(v string) {
	o.AclStatement = &v
}

// GetSmartParentId returns the SmartParentId field value if set, zero value otherwise.
func (o *DataInnerDhcpAclData) GetSmartParentId() string {
	if o == nil || IsNil(o.SmartParentId) {
		var ret string
		return ret
	}
	return *o.SmartParentId
}

// GetSmartParentIdOk returns a tuple with the SmartParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpAclData) GetSmartParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.SmartParentId) {
		return nil, false
	}
	return o.SmartParentId, true
}

// HasSmartParentId returns a boolean if a field has been set.
func (o *DataInnerDhcpAclData) HasSmartParentId() bool {
	if o != nil && !IsNil(o.SmartParentId) {
		return true
	}

	return false
}

// SetSmartParentId gets a reference to the given string and assigns it to the SmartParentId field.
func (o *DataInnerDhcpAclData) SetSmartParentId(v string) {
	o.SmartParentId = &v
}

func (o DataInnerDhcpAclData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataInnerDhcpAclData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ServerClusterRole) {
		toSerialize["server_cluster_role"] = o.ServerClusterRole
	}
	if !IsNil(o.AclDelayedCreateTime) {
		toSerialize["acl_delayed_create_time"] = o.AclDelayedCreateTime
	}
	if !IsNil(o.AclDelayedDeleteTime) {
		toSerialize["acl_delayed_delete_time"] = o.AclDelayedDeleteTime
	}
	if !IsNil(o.ServerId) {
		toSerialize["server_id"] = o.ServerId
	}
	if !IsNil(o.ServerName) {
		toSerialize["server_name"] = o.ServerName
	}
	if !IsNil(o.ServerType) {
		toSerialize["server_type"] = o.ServerType
	}
	if !IsNil(o.AclId) {
		toSerialize["acl_id"] = o.AclId
	}
	if !IsNil(o.AclLeaselimit) {
		toSerialize["acl_leaselimit"] = o.AclLeaselimit
	}
	if !IsNil(o.AclMatch) {
		toSerialize["acl_match"] = o.AclMatch
	}
	if !IsNil(o.AclName) {
		toSerialize["acl_name"] = o.AclName
	}
	if !IsNil(o.AclSpawnwith) {
		toSerialize["acl_spawnwith"] = o.AclSpawnwith
	}
	if !IsNil(o.AclStatement) {
		toSerialize["acl_statement"] = o.AclStatement
	}
	if !IsNil(o.SmartParentId) {
		toSerialize["smart_parent_id"] = o.SmartParentId
	}
	return toSerialize, nil
}

type NullableDataInnerDhcpAclData struct {
	value *DataInnerDhcpAclData
	isSet bool
}

func (v NullableDataInnerDhcpAclData) Get() *DataInnerDhcpAclData {
	return v.value
}

func (v *NullableDataInnerDhcpAclData) Set(val *DataInnerDhcpAclData) {
	v.value = val
	v.isSet = true
}

func (v NullableDataInnerDhcpAclData) IsSet() bool {
	return v.isSet
}

func (v *NullableDataInnerDhcpAclData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataInnerDhcpAclData(val *DataInnerDhcpAclData) *NullableDataInnerDhcpAclData {
	return &NullableDataInnerDhcpAclData{value: val, isSet: true}
}

func (v NullableDataInnerDhcpAclData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataInnerDhcpAclData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
