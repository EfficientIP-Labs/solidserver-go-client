/*
SOLIDserver API

OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2024 EfficientIP</p><p><em>All specifications and information regarding the products in this document are subject to change without notice and should not be construed as a commitment by EfficientIP. EfficientIP assumes no responsibility or liability for any mistakes or inaccuracies that may appear in this document. All statements and recommendations in this document are believed to be accurate but are presented without warranty. Users must take full responsibility for their application of any product.</em></p><p><em>This document aims at detailing EfficientIP proprietary solutions. As our solutions rely on several third-party products, created by other companies or organizations, it may redirect readers to third-party websites and documentation for further information. In such a case, EfficientIP cannot be liable or expected to provide said information on products they do maintain or created.</em></p><p>Generated (Friday 4th of October 2024 03:41:11 PM)</p>

API version: 2.0
Contact: support-api@efficientip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// checks if the DataInnerDhcpRangeData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataInnerDhcpRangeData{}

// DataInnerDhcpRangeData struct for DataInnerDhcpRangeData
type DataInnerDhcpRangeData struct {
	// The delay of creation status. <b>1</b> indicates that the object is not created yet.
	RangeDelayedCreateTime *string `json:"range_delayed_create_time,omitempty"`
	// The delay of deletion status. <b>1</b> indicates that the object is not deleted yet.
	RangeDelayedDeleteTime *string `json:"range_delayed_delete_time,omitempty"`
	// The name of the class applied to the DHCPv4 server the object belongs to, it can be preceded by the class directory.
	ServerClassName *string `json:"server_class_name,omitempty"`
	// The class parameters applied to the DHCPv4 server the object belongs to.
	ServerClassParameters []ApiClassParameterOutputEntry `json:"server_class_parameters,omitempty"`
	// The description of the DHCPv4 server the object belongs to.
	ServerComment *string `json:"server_comment,omitempty"`
	// The database identifier (ID) of the DHCPv4 server the object belongs to.
	ServerId *string `json:"server_id,omitempty"`
	// The name of the DHCPv4 server the object belongs to.
	ServerName *string `json:"server_name,omitempty"`
	// The type of the DHCPv4 server the object belongs to: <table><caption>server_type possible values</caption><br/><thead><tr><th>Type</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >ipm</td><td >EfficientIP or EfficientIP Package server</td></tr><tr><td >msrpc</td><td >Microsoft Windows DHCP server</td></tr><tr><td >vdhcp</td><td >EfficientIP DHCPv4 smart architecture</td></tr></tbody></table></p><br/>
	ServerType *string `json:"server_type,omitempty"`
	// The version details of the DHCPv4 server the object belongs to.
	ServerVersion *string `json:"server_version,omitempty"`
	// The list of ACLs associated with the DHCPv4 range, as follows: <b>&lt;ACL_name&gt;;&lt;ACL_name&gt;;</b>... .
	RangeAcl *string `json:"range_acl,omitempty"`
	// The name of the class applied to the DHCPv4 range, it can be preceded by the class directory.
	RangeClassName *string `json:"range_class_name,omitempty"`
	// The class parameters applied to the DHCPv4 range.
	RangeClassParameters []ApiClassParameterOutputEntry `json:"range_class_parameters,omitempty"`
	// The last IP address of the DHCPv4 range.
	RangeEndAddr *string `json:"range_end_addr,omitempty"`
	// The last IP address of the DHCPv4 range, in hexadecimal format.
	RangeEndAddressAddr *string `json:"range_end_address_addr,omitempty"`
	// Internal use. Not documented.
	RangeFailoverName *string `json:"range_failover_name,omitempty"`
	// The database identifier (ID) of the DHCPv4 range.
	RangeId *string `json:"range_id,omitempty"`
	// The total number of leases currently delivered by the DHCPv4 range.
	RangeLeaseCount *string `json:"range_lease_count,omitempty"`
	// The percentage of leases currently delivered by the DHCPv4 range.
	RangeLeasePercent *string `json:"range_lease_percent,omitempty"`
	// The start and end IP address of the DHCPv4 range, <b>range_start_addr</b> and <b>range_end_addr</b>, as follows: <b>&lt;start-ip&gt;-&lt;end-ip&gt;</b>.
	RangeName *string `json:"range_name,omitempty"`
	// The number of IP addresses the DHCPv4 range contains.
	RangeSize *string `json:"range_size,omitempty"`
	// The first IP address of the DHCPv4 range.
	RangeStartAddr *string `json:"range_start_addr,omitempty"`
	// The first IP address of the DHCPv4 range, in hexadecimal format.
	RangeStartAddressAddr *string `json:"range_start_address_addr,omitempty"`
	// Internal use. Not documented.
	RangeState *string `json:"range_state,omitempty"`
	// The name of the class applied to the DHCPv4 scope the object belongs to, it can be preceded by the class directory.
	ScopeClassName *string `json:"scope_class_name,omitempty"`
	// The class parameters applied to the DHCPv4 scope the object belongs to.
	ScopeClassParameters []ApiClassParameterOutputEntry `json:"scope_class_parameters,omitempty"`
	// The database identifier (ID) of the DHCPv4 scope the object belongs to.
	ScopeId *string `json:"scope_id,omitempty"`
	// Internal use. Not documented.
	ScopeIfAddr *string `json:"scope_if_addr,omitempty"`
	// Internal use. Not documented.
	ScopeIfName *string `json:"scope_if_name,omitempty"`
	// The name of the DHCPv4 scope the object belongs to.
	ScopeName *string `json:"scope_name,omitempty"`
	// The first IP address of the DHCPv4 scope the object belongs.
	ScopeNetAddr *string `json:"scope_net_addr,omitempty"`
	// The netmask of the DHCPv4 scope the object belongs to. It is expressed in dot-decimal notation and defines the number of addresses the scope contains.
	ScopeNetMask *string `json:"scope_net_mask,omitempty"`
	// The database identifier (ID) of the space associated with the DHCPv4 scope the object belongs to.
	ScopeSpaceId *string `json:"scope_space_id,omitempty"`
	// The number of IP addresses the DHCPv4 scope the object belongs to contains.
	ScopeSize *string `json:"scope_size,omitempty"`
	// The first IP address of the DHCPv4 scope the object belongs to, in hexadecimal format.
	ScopeStartAddressAddr *string `json:"scope_start_address_addr,omitempty"`
	// The database identifier (ID) of the DHCPv4 shared network the object belongs to.
	SharednetworkId *string `json:"sharednetwork_id,omitempty"`
	// The name of the DHCPv4 shared network the object belongs to.
	SharednetworkName *string `json:"sharednetwork_name,omitempty"`
	// The human readable version of the parameter <b>server_addr</b> or <b>server_addr6</b>.
	ServerHostaddr *string `json:"server_hostaddr,omitempty"`
	// The Management IP address of the DHCPv4 server the object belongs to, the IPv6 address configured when adding the server, in hexadecimal format.
	ServerAddr6 *string `json:"server_addr6,omitempty"`
	// The Management IP address of the DHCPv4 server the object belongs to, the IPv4 address configured when adding the server, in hexadecimal format.
	ServerAddr *string `json:"server_addr,omitempty"`
	// The Multi-status information is displayed as follows: <i>&lt;number-of-instances&gt;@&lt;message-number&gt;@&lt;multi-status-severity&gt;@&lt;module&gt;</i>. The different severity levels are:<br><b>Multi-status severity levels</b>    <table border=1>        <thead>        <tr >            <td><b>Message number</b></td>            <td><b>Severity</b></td>            <td><b>Description</b></td>        </tr>        </thead>        <tbody>        <tr  valign=middle>            <td>0 - 16</td>            <td>Emergency</td>            <td>The object configuration prevents the system from running properly. Action is required.</td>        </tr>        <tr  valign=middle>            <td>17 - 33</td>            <td>Critical</td>            <td>The object configuration is in critical conditions. Immediate action is recommended.</td>        </tr>        <tr  valign=middle>            <td>34 - 50</td>            <td>Error</td>            <td>The object configuration failed at some level. Action is recommended.</td>        </tr>        <tr  valign=middle>            <td>51 - 66</td>            <td>Warning</td>            <td>The object configuration triggers error messages if no action is taken. Action to be taken at your discretion.</td>        </tr>        <tr  valign=middle>            <td>67 - 83</td>            <td>Notice</td>            <td>The object configuration is normal but undergoing events that might trigger errors. No immediate action required.</td>        </tr>        <tr  valign=middle>            <td>84 - 100</td>            <td>Informational</td>            <td>The object configuration is normal, operational messages (might inform you about potential incompatibilities with other modules, etc). No action required.</td>        </tr>        </tbody></table>
	RangeMultistatus *string `json:"range_multistatus,omitempty"`
	// The database identifier (ID) of the DHCPv4 smart architecture managing the DHCPv4 server the object belongs to. <b>0</b> indicates that the server the object belongs to is not managed by a smart architecture or is a smart architecture itself.
	SmartParentId *string `json:"smart_parent_id,omitempty"`
	// The name of the DHCPv4 smart architecture managing the DHCPv4 server the object belongs to. <b>#</b> indicates that the server is not managed by a smart architecture or is a smart architecture itself.
	SmartParentName *string `json:"smart_parent_name,omitempty"`
}

// NewDataInnerDhcpRangeData instantiates a new DataInnerDhcpRangeData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataInnerDhcpRangeData() *DataInnerDhcpRangeData {
	this := DataInnerDhcpRangeData{}
	return &this
}

// NewDataInnerDhcpRangeDataWithDefaults instantiates a new DataInnerDhcpRangeData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataInnerDhcpRangeDataWithDefaults() *DataInnerDhcpRangeData {
	this := DataInnerDhcpRangeData{}
	return &this
}

// GetRangeDelayedCreateTime returns the RangeDelayedCreateTime field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetRangeDelayedCreateTime() string {
	if o == nil || IsNil(o.RangeDelayedCreateTime) {
		var ret string
		return ret
	}
	return *o.RangeDelayedCreateTime
}

// GetRangeDelayedCreateTimeOk returns a tuple with the RangeDelayedCreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetRangeDelayedCreateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.RangeDelayedCreateTime) {
		return nil, false
	}
	return o.RangeDelayedCreateTime, true
}

// HasRangeDelayedCreateTime returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasRangeDelayedCreateTime() bool {
	if o != nil && !IsNil(o.RangeDelayedCreateTime) {
		return true
	}

	return false
}

// SetRangeDelayedCreateTime gets a reference to the given string and assigns it to the RangeDelayedCreateTime field.
func (o *DataInnerDhcpRangeData) SetRangeDelayedCreateTime(v string) {
	o.RangeDelayedCreateTime = &v
}

// GetRangeDelayedDeleteTime returns the RangeDelayedDeleteTime field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetRangeDelayedDeleteTime() string {
	if o == nil || IsNil(o.RangeDelayedDeleteTime) {
		var ret string
		return ret
	}
	return *o.RangeDelayedDeleteTime
}

// GetRangeDelayedDeleteTimeOk returns a tuple with the RangeDelayedDeleteTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetRangeDelayedDeleteTimeOk() (*string, bool) {
	if o == nil || IsNil(o.RangeDelayedDeleteTime) {
		return nil, false
	}
	return o.RangeDelayedDeleteTime, true
}

// HasRangeDelayedDeleteTime returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasRangeDelayedDeleteTime() bool {
	if o != nil && !IsNil(o.RangeDelayedDeleteTime) {
		return true
	}

	return false
}

// SetRangeDelayedDeleteTime gets a reference to the given string and assigns it to the RangeDelayedDeleteTime field.
func (o *DataInnerDhcpRangeData) SetRangeDelayedDeleteTime(v string) {
	o.RangeDelayedDeleteTime = &v
}

// GetServerClassName returns the ServerClassName field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetServerClassName() string {
	if o == nil || IsNil(o.ServerClassName) {
		var ret string
		return ret
	}
	return *o.ServerClassName
}

// GetServerClassNameOk returns a tuple with the ServerClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetServerClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServerClassName) {
		return nil, false
	}
	return o.ServerClassName, true
}

// HasServerClassName returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasServerClassName() bool {
	if o != nil && !IsNil(o.ServerClassName) {
		return true
	}

	return false
}

// SetServerClassName gets a reference to the given string and assigns it to the ServerClassName field.
func (o *DataInnerDhcpRangeData) SetServerClassName(v string) {
	o.ServerClassName = &v
}

// GetServerClassParameters returns the ServerClassParameters field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetServerClassParameters() []ApiClassParameterOutputEntry {
	if o == nil || IsNil(o.ServerClassParameters) {
		var ret []ApiClassParameterOutputEntry
		return ret
	}
	return o.ServerClassParameters
}

// GetServerClassParametersOk returns a tuple with the ServerClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetServerClassParametersOk() ([]ApiClassParameterOutputEntry, bool) {
	if o == nil || IsNil(o.ServerClassParameters) {
		return nil, false
	}
	return o.ServerClassParameters, true
}

// HasServerClassParameters returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasServerClassParameters() bool {
	if o != nil && !IsNil(o.ServerClassParameters) {
		return true
	}

	return false
}

// SetServerClassParameters gets a reference to the given []ApiClassParameterOutputEntry and assigns it to the ServerClassParameters field.
func (o *DataInnerDhcpRangeData) SetServerClassParameters(v []ApiClassParameterOutputEntry) {
	o.ServerClassParameters = v
}

// GetServerComment returns the ServerComment field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetServerComment() string {
	if o == nil || IsNil(o.ServerComment) {
		var ret string
		return ret
	}
	return *o.ServerComment
}

// GetServerCommentOk returns a tuple with the ServerComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetServerCommentOk() (*string, bool) {
	if o == nil || IsNil(o.ServerComment) {
		return nil, false
	}
	return o.ServerComment, true
}

// HasServerComment returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasServerComment() bool {
	if o != nil && !IsNil(o.ServerComment) {
		return true
	}

	return false
}

// SetServerComment gets a reference to the given string and assigns it to the ServerComment field.
func (o *DataInnerDhcpRangeData) SetServerComment(v string) {
	o.ServerComment = &v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetServerId() string {
	if o == nil || IsNil(o.ServerId) {
		var ret string
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetServerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServerId) {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasServerId() bool {
	if o != nil && !IsNil(o.ServerId) {
		return true
	}

	return false
}

// SetServerId gets a reference to the given string and assigns it to the ServerId field.
func (o *DataInnerDhcpRangeData) SetServerId(v string) {
	o.ServerId = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetServerName() string {
	if o == nil || IsNil(o.ServerName) {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetServerNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServerName) {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasServerName() bool {
	if o != nil && !IsNil(o.ServerName) {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *DataInnerDhcpRangeData) SetServerName(v string) {
	o.ServerName = &v
}

// GetServerType returns the ServerType field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetServerType() string {
	if o == nil || IsNil(o.ServerType) {
		var ret string
		return ret
	}
	return *o.ServerType
}

// GetServerTypeOk returns a tuple with the ServerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetServerTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ServerType) {
		return nil, false
	}
	return o.ServerType, true
}

// HasServerType returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasServerType() bool {
	if o != nil && !IsNil(o.ServerType) {
		return true
	}

	return false
}

// SetServerType gets a reference to the given string and assigns it to the ServerType field.
func (o *DataInnerDhcpRangeData) SetServerType(v string) {
	o.ServerType = &v
}

// GetServerVersion returns the ServerVersion field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetServerVersion() string {
	if o == nil || IsNil(o.ServerVersion) {
		var ret string
		return ret
	}
	return *o.ServerVersion
}

// GetServerVersionOk returns a tuple with the ServerVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetServerVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ServerVersion) {
		return nil, false
	}
	return o.ServerVersion, true
}

// HasServerVersion returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasServerVersion() bool {
	if o != nil && !IsNil(o.ServerVersion) {
		return true
	}

	return false
}

// SetServerVersion gets a reference to the given string and assigns it to the ServerVersion field.
func (o *DataInnerDhcpRangeData) SetServerVersion(v string) {
	o.ServerVersion = &v
}

// GetRangeAcl returns the RangeAcl field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetRangeAcl() string {
	if o == nil || IsNil(o.RangeAcl) {
		var ret string
		return ret
	}
	return *o.RangeAcl
}

// GetRangeAclOk returns a tuple with the RangeAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetRangeAclOk() (*string, bool) {
	if o == nil || IsNil(o.RangeAcl) {
		return nil, false
	}
	return o.RangeAcl, true
}

// HasRangeAcl returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasRangeAcl() bool {
	if o != nil && !IsNil(o.RangeAcl) {
		return true
	}

	return false
}

// SetRangeAcl gets a reference to the given string and assigns it to the RangeAcl field.
func (o *DataInnerDhcpRangeData) SetRangeAcl(v string) {
	o.RangeAcl = &v
}

// GetRangeClassName returns the RangeClassName field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetRangeClassName() string {
	if o == nil || IsNil(o.RangeClassName) {
		var ret string
		return ret
	}
	return *o.RangeClassName
}

// GetRangeClassNameOk returns a tuple with the RangeClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetRangeClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.RangeClassName) {
		return nil, false
	}
	return o.RangeClassName, true
}

// HasRangeClassName returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasRangeClassName() bool {
	if o != nil && !IsNil(o.RangeClassName) {
		return true
	}

	return false
}

// SetRangeClassName gets a reference to the given string and assigns it to the RangeClassName field.
func (o *DataInnerDhcpRangeData) SetRangeClassName(v string) {
	o.RangeClassName = &v
}

// GetRangeClassParameters returns the RangeClassParameters field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetRangeClassParameters() []ApiClassParameterOutputEntry {
	if o == nil || IsNil(o.RangeClassParameters) {
		var ret []ApiClassParameterOutputEntry
		return ret
	}
	return o.RangeClassParameters
}

// GetRangeClassParametersOk returns a tuple with the RangeClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetRangeClassParametersOk() ([]ApiClassParameterOutputEntry, bool) {
	if o == nil || IsNil(o.RangeClassParameters) {
		return nil, false
	}
	return o.RangeClassParameters, true
}

// HasRangeClassParameters returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasRangeClassParameters() bool {
	if o != nil && !IsNil(o.RangeClassParameters) {
		return true
	}

	return false
}

// SetRangeClassParameters gets a reference to the given []ApiClassParameterOutputEntry and assigns it to the RangeClassParameters field.
func (o *DataInnerDhcpRangeData) SetRangeClassParameters(v []ApiClassParameterOutputEntry) {
	o.RangeClassParameters = v
}

// GetRangeEndAddr returns the RangeEndAddr field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetRangeEndAddr() string {
	if o == nil || IsNil(o.RangeEndAddr) {
		var ret string
		return ret
	}
	return *o.RangeEndAddr
}

// GetRangeEndAddrOk returns a tuple with the RangeEndAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetRangeEndAddrOk() (*string, bool) {
	if o == nil || IsNil(o.RangeEndAddr) {
		return nil, false
	}
	return o.RangeEndAddr, true
}

// HasRangeEndAddr returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasRangeEndAddr() bool {
	if o != nil && !IsNil(o.RangeEndAddr) {
		return true
	}

	return false
}

// SetRangeEndAddr gets a reference to the given string and assigns it to the RangeEndAddr field.
func (o *DataInnerDhcpRangeData) SetRangeEndAddr(v string) {
	o.RangeEndAddr = &v
}

// GetRangeEndAddressAddr returns the RangeEndAddressAddr field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetRangeEndAddressAddr() string {
	if o == nil || IsNil(o.RangeEndAddressAddr) {
		var ret string
		return ret
	}
	return *o.RangeEndAddressAddr
}

// GetRangeEndAddressAddrOk returns a tuple with the RangeEndAddressAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetRangeEndAddressAddrOk() (*string, bool) {
	if o == nil || IsNil(o.RangeEndAddressAddr) {
		return nil, false
	}
	return o.RangeEndAddressAddr, true
}

// HasRangeEndAddressAddr returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasRangeEndAddressAddr() bool {
	if o != nil && !IsNil(o.RangeEndAddressAddr) {
		return true
	}

	return false
}

// SetRangeEndAddressAddr gets a reference to the given string and assigns it to the RangeEndAddressAddr field.
func (o *DataInnerDhcpRangeData) SetRangeEndAddressAddr(v string) {
	o.RangeEndAddressAddr = &v
}

// GetRangeFailoverName returns the RangeFailoverName field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetRangeFailoverName() string {
	if o == nil || IsNil(o.RangeFailoverName) {
		var ret string
		return ret
	}
	return *o.RangeFailoverName
}

// GetRangeFailoverNameOk returns a tuple with the RangeFailoverName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetRangeFailoverNameOk() (*string, bool) {
	if o == nil || IsNil(o.RangeFailoverName) {
		return nil, false
	}
	return o.RangeFailoverName, true
}

// HasRangeFailoverName returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasRangeFailoverName() bool {
	if o != nil && !IsNil(o.RangeFailoverName) {
		return true
	}

	return false
}

// SetRangeFailoverName gets a reference to the given string and assigns it to the RangeFailoverName field.
func (o *DataInnerDhcpRangeData) SetRangeFailoverName(v string) {
	o.RangeFailoverName = &v
}

// GetRangeId returns the RangeId field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetRangeId() string {
	if o == nil || IsNil(o.RangeId) {
		var ret string
		return ret
	}
	return *o.RangeId
}

// GetRangeIdOk returns a tuple with the RangeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetRangeIdOk() (*string, bool) {
	if o == nil || IsNil(o.RangeId) {
		return nil, false
	}
	return o.RangeId, true
}

// HasRangeId returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasRangeId() bool {
	if o != nil && !IsNil(o.RangeId) {
		return true
	}

	return false
}

// SetRangeId gets a reference to the given string and assigns it to the RangeId field.
func (o *DataInnerDhcpRangeData) SetRangeId(v string) {
	o.RangeId = &v
}

// GetRangeLeaseCount returns the RangeLeaseCount field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetRangeLeaseCount() string {
	if o == nil || IsNil(o.RangeLeaseCount) {
		var ret string
		return ret
	}
	return *o.RangeLeaseCount
}

// GetRangeLeaseCountOk returns a tuple with the RangeLeaseCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetRangeLeaseCountOk() (*string, bool) {
	if o == nil || IsNil(o.RangeLeaseCount) {
		return nil, false
	}
	return o.RangeLeaseCount, true
}

// HasRangeLeaseCount returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasRangeLeaseCount() bool {
	if o != nil && !IsNil(o.RangeLeaseCount) {
		return true
	}

	return false
}

// SetRangeLeaseCount gets a reference to the given string and assigns it to the RangeLeaseCount field.
func (o *DataInnerDhcpRangeData) SetRangeLeaseCount(v string) {
	o.RangeLeaseCount = &v
}

// GetRangeLeasePercent returns the RangeLeasePercent field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetRangeLeasePercent() string {
	if o == nil || IsNil(o.RangeLeasePercent) {
		var ret string
		return ret
	}
	return *o.RangeLeasePercent
}

// GetRangeLeasePercentOk returns a tuple with the RangeLeasePercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetRangeLeasePercentOk() (*string, bool) {
	if o == nil || IsNil(o.RangeLeasePercent) {
		return nil, false
	}
	return o.RangeLeasePercent, true
}

// HasRangeLeasePercent returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasRangeLeasePercent() bool {
	if o != nil && !IsNil(o.RangeLeasePercent) {
		return true
	}

	return false
}

// SetRangeLeasePercent gets a reference to the given string and assigns it to the RangeLeasePercent field.
func (o *DataInnerDhcpRangeData) SetRangeLeasePercent(v string) {
	o.RangeLeasePercent = &v
}

// GetRangeName returns the RangeName field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetRangeName() string {
	if o == nil || IsNil(o.RangeName) {
		var ret string
		return ret
	}
	return *o.RangeName
}

// GetRangeNameOk returns a tuple with the RangeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetRangeNameOk() (*string, bool) {
	if o == nil || IsNil(o.RangeName) {
		return nil, false
	}
	return o.RangeName, true
}

// HasRangeName returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasRangeName() bool {
	if o != nil && !IsNil(o.RangeName) {
		return true
	}

	return false
}

// SetRangeName gets a reference to the given string and assigns it to the RangeName field.
func (o *DataInnerDhcpRangeData) SetRangeName(v string) {
	o.RangeName = &v
}

// GetRangeSize returns the RangeSize field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetRangeSize() string {
	if o == nil || IsNil(o.RangeSize) {
		var ret string
		return ret
	}
	return *o.RangeSize
}

// GetRangeSizeOk returns a tuple with the RangeSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetRangeSizeOk() (*string, bool) {
	if o == nil || IsNil(o.RangeSize) {
		return nil, false
	}
	return o.RangeSize, true
}

// HasRangeSize returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasRangeSize() bool {
	if o != nil && !IsNil(o.RangeSize) {
		return true
	}

	return false
}

// SetRangeSize gets a reference to the given string and assigns it to the RangeSize field.
func (o *DataInnerDhcpRangeData) SetRangeSize(v string) {
	o.RangeSize = &v
}

// GetRangeStartAddr returns the RangeStartAddr field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetRangeStartAddr() string {
	if o == nil || IsNil(o.RangeStartAddr) {
		var ret string
		return ret
	}
	return *o.RangeStartAddr
}

// GetRangeStartAddrOk returns a tuple with the RangeStartAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetRangeStartAddrOk() (*string, bool) {
	if o == nil || IsNil(o.RangeStartAddr) {
		return nil, false
	}
	return o.RangeStartAddr, true
}

// HasRangeStartAddr returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasRangeStartAddr() bool {
	if o != nil && !IsNil(o.RangeStartAddr) {
		return true
	}

	return false
}

// SetRangeStartAddr gets a reference to the given string and assigns it to the RangeStartAddr field.
func (o *DataInnerDhcpRangeData) SetRangeStartAddr(v string) {
	o.RangeStartAddr = &v
}

// GetRangeStartAddressAddr returns the RangeStartAddressAddr field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetRangeStartAddressAddr() string {
	if o == nil || IsNil(o.RangeStartAddressAddr) {
		var ret string
		return ret
	}
	return *o.RangeStartAddressAddr
}

// GetRangeStartAddressAddrOk returns a tuple with the RangeStartAddressAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetRangeStartAddressAddrOk() (*string, bool) {
	if o == nil || IsNil(o.RangeStartAddressAddr) {
		return nil, false
	}
	return o.RangeStartAddressAddr, true
}

// HasRangeStartAddressAddr returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasRangeStartAddressAddr() bool {
	if o != nil && !IsNil(o.RangeStartAddressAddr) {
		return true
	}

	return false
}

// SetRangeStartAddressAddr gets a reference to the given string and assigns it to the RangeStartAddressAddr field.
func (o *DataInnerDhcpRangeData) SetRangeStartAddressAddr(v string) {
	o.RangeStartAddressAddr = &v
}

// GetRangeState returns the RangeState field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetRangeState() string {
	if o == nil || IsNil(o.RangeState) {
		var ret string
		return ret
	}
	return *o.RangeState
}

// GetRangeStateOk returns a tuple with the RangeState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetRangeStateOk() (*string, bool) {
	if o == nil || IsNil(o.RangeState) {
		return nil, false
	}
	return o.RangeState, true
}

// HasRangeState returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasRangeState() bool {
	if o != nil && !IsNil(o.RangeState) {
		return true
	}

	return false
}

// SetRangeState gets a reference to the given string and assigns it to the RangeState field.
func (o *DataInnerDhcpRangeData) SetRangeState(v string) {
	o.RangeState = &v
}

// GetScopeClassName returns the ScopeClassName field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetScopeClassName() string {
	if o == nil || IsNil(o.ScopeClassName) {
		var ret string
		return ret
	}
	return *o.ScopeClassName
}

// GetScopeClassNameOk returns a tuple with the ScopeClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetScopeClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeClassName) {
		return nil, false
	}
	return o.ScopeClassName, true
}

// HasScopeClassName returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasScopeClassName() bool {
	if o != nil && !IsNil(o.ScopeClassName) {
		return true
	}

	return false
}

// SetScopeClassName gets a reference to the given string and assigns it to the ScopeClassName field.
func (o *DataInnerDhcpRangeData) SetScopeClassName(v string) {
	o.ScopeClassName = &v
}

// GetScopeClassParameters returns the ScopeClassParameters field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetScopeClassParameters() []ApiClassParameterOutputEntry {
	if o == nil || IsNil(o.ScopeClassParameters) {
		var ret []ApiClassParameterOutputEntry
		return ret
	}
	return o.ScopeClassParameters
}

// GetScopeClassParametersOk returns a tuple with the ScopeClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetScopeClassParametersOk() ([]ApiClassParameterOutputEntry, bool) {
	if o == nil || IsNil(o.ScopeClassParameters) {
		return nil, false
	}
	return o.ScopeClassParameters, true
}

// HasScopeClassParameters returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasScopeClassParameters() bool {
	if o != nil && !IsNil(o.ScopeClassParameters) {
		return true
	}

	return false
}

// SetScopeClassParameters gets a reference to the given []ApiClassParameterOutputEntry and assigns it to the ScopeClassParameters field.
func (o *DataInnerDhcpRangeData) SetScopeClassParameters(v []ApiClassParameterOutputEntry) {
	o.ScopeClassParameters = v
}

// GetScopeId returns the ScopeId field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetScopeId() string {
	if o == nil || IsNil(o.ScopeId) {
		var ret string
		return ret
	}
	return *o.ScopeId
}

// GetScopeIdOk returns a tuple with the ScopeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetScopeIdOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeId) {
		return nil, false
	}
	return o.ScopeId, true
}

// HasScopeId returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasScopeId() bool {
	if o != nil && !IsNil(o.ScopeId) {
		return true
	}

	return false
}

// SetScopeId gets a reference to the given string and assigns it to the ScopeId field.
func (o *DataInnerDhcpRangeData) SetScopeId(v string) {
	o.ScopeId = &v
}

// GetScopeIfAddr returns the ScopeIfAddr field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetScopeIfAddr() string {
	if o == nil || IsNil(o.ScopeIfAddr) {
		var ret string
		return ret
	}
	return *o.ScopeIfAddr
}

// GetScopeIfAddrOk returns a tuple with the ScopeIfAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetScopeIfAddrOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeIfAddr) {
		return nil, false
	}
	return o.ScopeIfAddr, true
}

// HasScopeIfAddr returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasScopeIfAddr() bool {
	if o != nil && !IsNil(o.ScopeIfAddr) {
		return true
	}

	return false
}

// SetScopeIfAddr gets a reference to the given string and assigns it to the ScopeIfAddr field.
func (o *DataInnerDhcpRangeData) SetScopeIfAddr(v string) {
	o.ScopeIfAddr = &v
}

// GetScopeIfName returns the ScopeIfName field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetScopeIfName() string {
	if o == nil || IsNil(o.ScopeIfName) {
		var ret string
		return ret
	}
	return *o.ScopeIfName
}

// GetScopeIfNameOk returns a tuple with the ScopeIfName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetScopeIfNameOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeIfName) {
		return nil, false
	}
	return o.ScopeIfName, true
}

// HasScopeIfName returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasScopeIfName() bool {
	if o != nil && !IsNil(o.ScopeIfName) {
		return true
	}

	return false
}

// SetScopeIfName gets a reference to the given string and assigns it to the ScopeIfName field.
func (o *DataInnerDhcpRangeData) SetScopeIfName(v string) {
	o.ScopeIfName = &v
}

// GetScopeName returns the ScopeName field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetScopeName() string {
	if o == nil || IsNil(o.ScopeName) {
		var ret string
		return ret
	}
	return *o.ScopeName
}

// GetScopeNameOk returns a tuple with the ScopeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetScopeNameOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeName) {
		return nil, false
	}
	return o.ScopeName, true
}

// HasScopeName returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasScopeName() bool {
	if o != nil && !IsNil(o.ScopeName) {
		return true
	}

	return false
}

// SetScopeName gets a reference to the given string and assigns it to the ScopeName field.
func (o *DataInnerDhcpRangeData) SetScopeName(v string) {
	o.ScopeName = &v
}

// GetScopeNetAddr returns the ScopeNetAddr field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetScopeNetAddr() string {
	if o == nil || IsNil(o.ScopeNetAddr) {
		var ret string
		return ret
	}
	return *o.ScopeNetAddr
}

// GetScopeNetAddrOk returns a tuple with the ScopeNetAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetScopeNetAddrOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeNetAddr) {
		return nil, false
	}
	return o.ScopeNetAddr, true
}

// HasScopeNetAddr returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasScopeNetAddr() bool {
	if o != nil && !IsNil(o.ScopeNetAddr) {
		return true
	}

	return false
}

// SetScopeNetAddr gets a reference to the given string and assigns it to the ScopeNetAddr field.
func (o *DataInnerDhcpRangeData) SetScopeNetAddr(v string) {
	o.ScopeNetAddr = &v
}

// GetScopeNetMask returns the ScopeNetMask field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetScopeNetMask() string {
	if o == nil || IsNil(o.ScopeNetMask) {
		var ret string
		return ret
	}
	return *o.ScopeNetMask
}

// GetScopeNetMaskOk returns a tuple with the ScopeNetMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetScopeNetMaskOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeNetMask) {
		return nil, false
	}
	return o.ScopeNetMask, true
}

// HasScopeNetMask returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasScopeNetMask() bool {
	if o != nil && !IsNil(o.ScopeNetMask) {
		return true
	}

	return false
}

// SetScopeNetMask gets a reference to the given string and assigns it to the ScopeNetMask field.
func (o *DataInnerDhcpRangeData) SetScopeNetMask(v string) {
	o.ScopeNetMask = &v
}

// GetScopeSpaceId returns the ScopeSpaceId field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetScopeSpaceId() string {
	if o == nil || IsNil(o.ScopeSpaceId) {
		var ret string
		return ret
	}
	return *o.ScopeSpaceId
}

// GetScopeSpaceIdOk returns a tuple with the ScopeSpaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetScopeSpaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeSpaceId) {
		return nil, false
	}
	return o.ScopeSpaceId, true
}

// HasScopeSpaceId returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasScopeSpaceId() bool {
	if o != nil && !IsNil(o.ScopeSpaceId) {
		return true
	}

	return false
}

// SetScopeSpaceId gets a reference to the given string and assigns it to the ScopeSpaceId field.
func (o *DataInnerDhcpRangeData) SetScopeSpaceId(v string) {
	o.ScopeSpaceId = &v
}

// GetScopeSize returns the ScopeSize field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetScopeSize() string {
	if o == nil || IsNil(o.ScopeSize) {
		var ret string
		return ret
	}
	return *o.ScopeSize
}

// GetScopeSizeOk returns a tuple with the ScopeSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetScopeSizeOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeSize) {
		return nil, false
	}
	return o.ScopeSize, true
}

// HasScopeSize returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasScopeSize() bool {
	if o != nil && !IsNil(o.ScopeSize) {
		return true
	}

	return false
}

// SetScopeSize gets a reference to the given string and assigns it to the ScopeSize field.
func (o *DataInnerDhcpRangeData) SetScopeSize(v string) {
	o.ScopeSize = &v
}

// GetScopeStartAddressAddr returns the ScopeStartAddressAddr field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetScopeStartAddressAddr() string {
	if o == nil || IsNil(o.ScopeStartAddressAddr) {
		var ret string
		return ret
	}
	return *o.ScopeStartAddressAddr
}

// GetScopeStartAddressAddrOk returns a tuple with the ScopeStartAddressAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetScopeStartAddressAddrOk() (*string, bool) {
	if o == nil || IsNil(o.ScopeStartAddressAddr) {
		return nil, false
	}
	return o.ScopeStartAddressAddr, true
}

// HasScopeStartAddressAddr returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasScopeStartAddressAddr() bool {
	if o != nil && !IsNil(o.ScopeStartAddressAddr) {
		return true
	}

	return false
}

// SetScopeStartAddressAddr gets a reference to the given string and assigns it to the ScopeStartAddressAddr field.
func (o *DataInnerDhcpRangeData) SetScopeStartAddressAddr(v string) {
	o.ScopeStartAddressAddr = &v
}

// GetSharednetworkId returns the SharednetworkId field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetSharednetworkId() string {
	if o == nil || IsNil(o.SharednetworkId) {
		var ret string
		return ret
	}
	return *o.SharednetworkId
}

// GetSharednetworkIdOk returns a tuple with the SharednetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetSharednetworkIdOk() (*string, bool) {
	if o == nil || IsNil(o.SharednetworkId) {
		return nil, false
	}
	return o.SharednetworkId, true
}

// HasSharednetworkId returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasSharednetworkId() bool {
	if o != nil && !IsNil(o.SharednetworkId) {
		return true
	}

	return false
}

// SetSharednetworkId gets a reference to the given string and assigns it to the SharednetworkId field.
func (o *DataInnerDhcpRangeData) SetSharednetworkId(v string) {
	o.SharednetworkId = &v
}

// GetSharednetworkName returns the SharednetworkName field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetSharednetworkName() string {
	if o == nil || IsNil(o.SharednetworkName) {
		var ret string
		return ret
	}
	return *o.SharednetworkName
}

// GetSharednetworkNameOk returns a tuple with the SharednetworkName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetSharednetworkNameOk() (*string, bool) {
	if o == nil || IsNil(o.SharednetworkName) {
		return nil, false
	}
	return o.SharednetworkName, true
}

// HasSharednetworkName returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasSharednetworkName() bool {
	if o != nil && !IsNil(o.SharednetworkName) {
		return true
	}

	return false
}

// SetSharednetworkName gets a reference to the given string and assigns it to the SharednetworkName field.
func (o *DataInnerDhcpRangeData) SetSharednetworkName(v string) {
	o.SharednetworkName = &v
}

// GetServerHostaddr returns the ServerHostaddr field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetServerHostaddr() string {
	if o == nil || IsNil(o.ServerHostaddr) {
		var ret string
		return ret
	}
	return *o.ServerHostaddr
}

// GetServerHostaddrOk returns a tuple with the ServerHostaddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetServerHostaddrOk() (*string, bool) {
	if o == nil || IsNil(o.ServerHostaddr) {
		return nil, false
	}
	return o.ServerHostaddr, true
}

// HasServerHostaddr returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasServerHostaddr() bool {
	if o != nil && !IsNil(o.ServerHostaddr) {
		return true
	}

	return false
}

// SetServerHostaddr gets a reference to the given string and assigns it to the ServerHostaddr field.
func (o *DataInnerDhcpRangeData) SetServerHostaddr(v string) {
	o.ServerHostaddr = &v
}

// GetServerAddr6 returns the ServerAddr6 field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetServerAddr6() string {
	if o == nil || IsNil(o.ServerAddr6) {
		var ret string
		return ret
	}
	return *o.ServerAddr6
}

// GetServerAddr6Ok returns a tuple with the ServerAddr6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetServerAddr6Ok() (*string, bool) {
	if o == nil || IsNil(o.ServerAddr6) {
		return nil, false
	}
	return o.ServerAddr6, true
}

// HasServerAddr6 returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasServerAddr6() bool {
	if o != nil && !IsNil(o.ServerAddr6) {
		return true
	}

	return false
}

// SetServerAddr6 gets a reference to the given string and assigns it to the ServerAddr6 field.
func (o *DataInnerDhcpRangeData) SetServerAddr6(v string) {
	o.ServerAddr6 = &v
}

// GetServerAddr returns the ServerAddr field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetServerAddr() string {
	if o == nil || IsNil(o.ServerAddr) {
		var ret string
		return ret
	}
	return *o.ServerAddr
}

// GetServerAddrOk returns a tuple with the ServerAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetServerAddrOk() (*string, bool) {
	if o == nil || IsNil(o.ServerAddr) {
		return nil, false
	}
	return o.ServerAddr, true
}

// HasServerAddr returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasServerAddr() bool {
	if o != nil && !IsNil(o.ServerAddr) {
		return true
	}

	return false
}

// SetServerAddr gets a reference to the given string and assigns it to the ServerAddr field.
func (o *DataInnerDhcpRangeData) SetServerAddr(v string) {
	o.ServerAddr = &v
}

// GetRangeMultistatus returns the RangeMultistatus field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetRangeMultistatus() string {
	if o == nil || IsNil(o.RangeMultistatus) {
		var ret string
		return ret
	}
	return *o.RangeMultistatus
}

// GetRangeMultistatusOk returns a tuple with the RangeMultistatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetRangeMultistatusOk() (*string, bool) {
	if o == nil || IsNil(o.RangeMultistatus) {
		return nil, false
	}
	return o.RangeMultistatus, true
}

// HasRangeMultistatus returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasRangeMultistatus() bool {
	if o != nil && !IsNil(o.RangeMultistatus) {
		return true
	}

	return false
}

// SetRangeMultistatus gets a reference to the given string and assigns it to the RangeMultistatus field.
func (o *DataInnerDhcpRangeData) SetRangeMultistatus(v string) {
	o.RangeMultistatus = &v
}

// GetSmartParentId returns the SmartParentId field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetSmartParentId() string {
	if o == nil || IsNil(o.SmartParentId) {
		var ret string
		return ret
	}
	return *o.SmartParentId
}

// GetSmartParentIdOk returns a tuple with the SmartParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetSmartParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.SmartParentId) {
		return nil, false
	}
	return o.SmartParentId, true
}

// HasSmartParentId returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasSmartParentId() bool {
	if o != nil && !IsNil(o.SmartParentId) {
		return true
	}

	return false
}

// SetSmartParentId gets a reference to the given string and assigns it to the SmartParentId field.
func (o *DataInnerDhcpRangeData) SetSmartParentId(v string) {
	o.SmartParentId = &v
}

// GetSmartParentName returns the SmartParentName field value if set, zero value otherwise.
func (o *DataInnerDhcpRangeData) GetSmartParentName() string {
	if o == nil || IsNil(o.SmartParentName) {
		var ret string
		return ret
	}
	return *o.SmartParentName
}

// GetSmartParentNameOk returns a tuple with the SmartParentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpRangeData) GetSmartParentNameOk() (*string, bool) {
	if o == nil || IsNil(o.SmartParentName) {
		return nil, false
	}
	return o.SmartParentName, true
}

// HasSmartParentName returns a boolean if a field has been set.
func (o *DataInnerDhcpRangeData) HasSmartParentName() bool {
	if o != nil && !IsNil(o.SmartParentName) {
		return true
	}

	return false
}

// SetSmartParentName gets a reference to the given string and assigns it to the SmartParentName field.
func (o *DataInnerDhcpRangeData) SetSmartParentName(v string) {
	o.SmartParentName = &v
}

func (o DataInnerDhcpRangeData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataInnerDhcpRangeData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RangeDelayedCreateTime) {
		toSerialize["range_delayed_create_time"] = o.RangeDelayedCreateTime
	}
	if !IsNil(o.RangeDelayedDeleteTime) {
		toSerialize["range_delayed_delete_time"] = o.RangeDelayedDeleteTime
	}
	if !IsNil(o.ServerClassName) {
		toSerialize["server_class_name"] = o.ServerClassName
	}
	if !IsNil(o.ServerClassParameters) {
		toSerialize["server_class_parameters"] = o.ServerClassParameters
	}
	if !IsNil(o.ServerComment) {
		toSerialize["server_comment"] = o.ServerComment
	}
	if !IsNil(o.ServerId) {
		toSerialize["server_id"] = o.ServerId
	}
	if !IsNil(o.ServerName) {
		toSerialize["server_name"] = o.ServerName
	}
	if !IsNil(o.ServerType) {
		toSerialize["server_type"] = o.ServerType
	}
	if !IsNil(o.ServerVersion) {
		toSerialize["server_version"] = o.ServerVersion
	}
	if !IsNil(o.RangeAcl) {
		toSerialize["range_acl"] = o.RangeAcl
	}
	if !IsNil(o.RangeClassName) {
		toSerialize["range_class_name"] = o.RangeClassName
	}
	if !IsNil(o.RangeClassParameters) {
		toSerialize["range_class_parameters"] = o.RangeClassParameters
	}
	if !IsNil(o.RangeEndAddr) {
		toSerialize["range_end_addr"] = o.RangeEndAddr
	}
	if !IsNil(o.RangeEndAddressAddr) {
		toSerialize["range_end_address_addr"] = o.RangeEndAddressAddr
	}
	if !IsNil(o.RangeFailoverName) {
		toSerialize["range_failover_name"] = o.RangeFailoverName
	}
	if !IsNil(o.RangeId) {
		toSerialize["range_id"] = o.RangeId
	}
	if !IsNil(o.RangeLeaseCount) {
		toSerialize["range_lease_count"] = o.RangeLeaseCount
	}
	if !IsNil(o.RangeLeasePercent) {
		toSerialize["range_lease_percent"] = o.RangeLeasePercent
	}
	if !IsNil(o.RangeName) {
		toSerialize["range_name"] = o.RangeName
	}
	if !IsNil(o.RangeSize) {
		toSerialize["range_size"] = o.RangeSize
	}
	if !IsNil(o.RangeStartAddr) {
		toSerialize["range_start_addr"] = o.RangeStartAddr
	}
	if !IsNil(o.RangeStartAddressAddr) {
		toSerialize["range_start_address_addr"] = o.RangeStartAddressAddr
	}
	if !IsNil(o.RangeState) {
		toSerialize["range_state"] = o.RangeState
	}
	if !IsNil(o.ScopeClassName) {
		toSerialize["scope_class_name"] = o.ScopeClassName
	}
	if !IsNil(o.ScopeClassParameters) {
		toSerialize["scope_class_parameters"] = o.ScopeClassParameters
	}
	if !IsNil(o.ScopeId) {
		toSerialize["scope_id"] = o.ScopeId
	}
	if !IsNil(o.ScopeIfAddr) {
		toSerialize["scope_if_addr"] = o.ScopeIfAddr
	}
	if !IsNil(o.ScopeIfName) {
		toSerialize["scope_if_name"] = o.ScopeIfName
	}
	if !IsNil(o.ScopeName) {
		toSerialize["scope_name"] = o.ScopeName
	}
	if !IsNil(o.ScopeNetAddr) {
		toSerialize["scope_net_addr"] = o.ScopeNetAddr
	}
	if !IsNil(o.ScopeNetMask) {
		toSerialize["scope_net_mask"] = o.ScopeNetMask
	}
	if !IsNil(o.ScopeSpaceId) {
		toSerialize["scope_space_id"] = o.ScopeSpaceId
	}
	if !IsNil(o.ScopeSize) {
		toSerialize["scope_size"] = o.ScopeSize
	}
	if !IsNil(o.ScopeStartAddressAddr) {
		toSerialize["scope_start_address_addr"] = o.ScopeStartAddressAddr
	}
	if !IsNil(o.SharednetworkId) {
		toSerialize["sharednetwork_id"] = o.SharednetworkId
	}
	if !IsNil(o.SharednetworkName) {
		toSerialize["sharednetwork_name"] = o.SharednetworkName
	}
	if !IsNil(o.ServerHostaddr) {
		toSerialize["server_hostaddr"] = o.ServerHostaddr
	}
	if !IsNil(o.ServerAddr6) {
		toSerialize["server_addr6"] = o.ServerAddr6
	}
	if !IsNil(o.ServerAddr) {
		toSerialize["server_addr"] = o.ServerAddr
	}
	if !IsNil(o.RangeMultistatus) {
		toSerialize["range_multistatus"] = o.RangeMultistatus
	}
	if !IsNil(o.SmartParentId) {
		toSerialize["smart_parent_id"] = o.SmartParentId
	}
	if !IsNil(o.SmartParentName) {
		toSerialize["smart_parent_name"] = o.SmartParentName
	}
	return toSerialize, nil
}

type NullableDataInnerDhcpRangeData struct {
	value *DataInnerDhcpRangeData
	isSet bool
}

func (v NullableDataInnerDhcpRangeData) Get() *DataInnerDhcpRangeData {
	return v.value
}

func (v *NullableDataInnerDhcpRangeData) Set(val *DataInnerDhcpRangeData) {
	v.value = val
	v.isSet = true
}

func (v NullableDataInnerDhcpRangeData) IsSet() bool {
	return v.isSet
}

func (v *NullableDataInnerDhcpRangeData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataInnerDhcpRangeData(val *DataInnerDhcpRangeData) *NullableDataInnerDhcpRangeData {
	return &NullableDataInnerDhcpRangeData{value: val, isSet: true}
}

func (v NullableDataInnerDhcpRangeData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataInnerDhcpRangeData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
