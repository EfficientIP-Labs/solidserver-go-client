/*
SOLIDserver API

OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2024 EfficientIP</p><p><em>All specifications and information regarding the products in this document are subject to change without notice and should not be construed as a commitment by EfficientIP. EfficientIP assumes no responsibility or liability for any mistakes or inaccuracies that may appear in this document. All statements and recommendations in this document are believed to be accurate but are presented without warranty. Users must take full responsibility for their application of any product.</em></p><p><em>This document aims at detailing EfficientIP proprietary solutions. As our solutions rely on several third-party products, created by other companies or organizations, it may redirect readers to third-party websites and documentation for further information. In such a case, EfficientIP cannot be liable or expected to provide said information on products they do maintain or created.</em></p><p>Generated (Friday 4th of October 2024 03:41:11 PM)</p>

API version: 2.0
Contact: support-api@efficientip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// checks if the DataInnerDnsZoneData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataInnerDnsZoneData{}

// DataInnerDnsZoneData struct for DataInnerDnsZoneData
type DataInnerDnsZoneData struct {
	// The reusable delegation set ID configured on the Amazon Route 53 public server the zone belongs to.
	ServerAwsDelegationSet *string `json:"server_aws_delegation_set,omitempty"`
	// The DDNS scavenging status of the zone, either enabled (<b>1</b>) or disabled (<b>0</b>). DDNS scavenging is only effective if the parameters <b>zone_use_update_policy</b> and <b>server_gss_enabled</b> are set to <b>1</b>, and the rule 416 is enabled in the GUI.
	ServerDdnsScavenging *string `json:"server_ddns_scavenging,omitempty"`
	// The delay of creation status. <b>1</b> indicates that the object is not created yet.
	ZoneDelayedCreateTime *string `json:"zone_delayed_create_time,omitempty"`
	// The delay of deletion status. <b>1</b> indicates that the object is not deleted yet.
	ZoneDelayedDeleteTime *string `json:"zone_delayed_delete_time,omitempty"`
	// The name of the class applied to the DNS server the object belongs to, it can be preceded by the class directory.
	ServerClassName *string `json:"server_class_name,omitempty"`
	// The class parameters applied to the DNS server the object belongs to.
	ServerClassParameters []ApiClassParameterOutputEntry `json:"server_class_parameters,omitempty"`
	// Internal use. Not documented.
	ServerCloud *string `json:"server_cloud,omitempty"`
	// The description of the DNS server the object belongs to.
	ServerComment *string `json:"server_comment,omitempty"`
	// Internal use. Not documented.
	ServerForceHybrid *string `json:"server_force_hybrid,omitempty"`
	// The database identifier (ID) of the DNS server the object belongs to.
	ServerId *string `json:"server_id,omitempty"`
	// The name of the DNS server the object belongs to.
	ServerName *string `json:"server_name,omitempty"`
	// The status of the DNS server the object belongs to. <table><caption>server_state possible values</caption><br/><thead><tr><th>Status</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >ER</td><td >The license used in SOLIDserver is not compliant with the added server: the license is invalid.</td></tr><tr><td >ES</td><td >The server configuration could not be parsed properly.</td></tr><tr><td >ET</td><td >The server does not answer anymore due to a scheduled configuration of the server.</td></tr><tr><td >IC</td><td >The SSL credentials are invalid</td></tr><tr><td >IP</td><td >The provided account does not have sufficient privileges to remotely manage the MS server.</td></tr><tr><td >IR</td><td >SOLIDserver cannot resolve the AWS DNS service. The Amazon services are unreachable and the Amazon Route 53 server cannot be managed. Make sure that the DNS resolvers declared on the page are valid.</td></tr><tr><td >IS</td><td >There was a setting error during the server declaration. For instance, some settings were added to a server that does not support them or a smart architecture is not managing any physical server.</td></tr><tr><td >IT</td><td >The server editing performed from the GUI is not pushed to the server because SOLIDserver time and date are incorrect. You must use the UTC system on the appliance, especially when managing Amazon Route 53 servers.</td></tr><tr><td >LS</td><td >The server configuration is not viable.</td></tr><tr><td >N</td><td >The server does not have a status as it has not synchronized yet.</td></tr><tr><td >UE</td><td >An error occurred that SOLIDserver could not identify.</td></tr><tr><td >Y</td><td >The server is operational.</td></tr></tbody></table></p><br/>
	ServerState *string `json:"server_state,omitempty"`
	// The type of the DNS server the object belongs to.<table><caption>server_type possible values</caption><br/><thead><tr><th>Type</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >ipm</td><td >EfficientIP or EfficientIP Package server</td></tr><tr><td >msdaemon</td><td >Microsoft Windows DNS server</td></tr><tr><td >aws</td><td >Amazon Route 53 server</td></tr><tr><td >other</td><td >Generic DNS server</td></tr><tr><td >vdns</td><td >EfficientIP DNS smart architecture</td></tr></tbody></table></p><br/>
	ServerType *string `json:"server_type,omitempty"`
	// The version details of the DNS server the object belongs to.
	ServerVersion *string `json:"server_version,omitempty"`
	// The list of cloud networks configured on the DNS private server the zone belongs to, separated by a comma:<ul class=dashed ><li> For an Azure server, it returns the list of virtual networks.<br/></li><li> For an Amazon Route 53 server, it returns the list of Virtual Private Cloud (VPC).<br/></li></ul>
	ServerVpcList *string `json:"server_vpc_list,omitempty"`
	// The name of the class applied to the DNS view the object belongs to, it can be preceded by the class directory.
	ViewClassName *string `json:"view_class_name,omitempty"`
	// The class parameters applied to the DNS view the object belongs to.
	ViewClassParameters []ApiClassParameterOutputEntry `json:"view_class_parameters,omitempty"`
	// The database identifier (ID) of the DNS view the object belongs to.
	ViewId *string `json:"view_id,omitempty"`
	// The name of the DNS view the object belongs to.
	ViewName *string `json:"view_name,omitempty"`
	// The AD integrated status of the DNS zone. <b>1</b> indicates that the DNS zone belongs to an Active Directory integrated Microsoft Windows DNS server.
	ZoneAdIntegrated *string `json:"zone_ad_integrated,omitempty"`
	// The ACL values associated with the allow-query configuration of the DNS zone, as follows: <b>&lt;value1&gt;;&lt;value2&gt;;... </b>. Values may include IP and network addresses, the name of TSIG keys and ACLs, preceded by <b>!</b> if the access is denied.
	ZoneAllowQuery *string `json:"zone_allow_query,omitempty"`
	// The ACL values associated with the allow-transfer configuration of the DNS zone, as follows: <b>&lt;value1&gt;;&lt;value2&gt;;... </b>. Values may include IP and network addresses, the name of TSIG keys and ACLs, preceded by <b>!</b> if the access is denied.
	ZoneAllowTransfer *string `json:"zone_allow_transfer,omitempty"`
	// The ACL values associated with the allow-update configuration of the DNS zone, as follows: <b>&lt;value1&gt;;&lt;value2&gt;;... </b>. Values may include IP and network addresses, the name of TSIG keys and ACLs, preceded by <b>!</b> if the access is denied.
	ZoneAllowUpdate *string `json:"zone_allow_update,omitempty"`
	// The IP address and port of the DNS server managing the smart architecture the DNS zone belongs to. If the parameter <b>zone_notify</b> is set to <b>yes</b> or <b>explicit</b>, the server specified is instantly notified of any slave zones updates.
	ZoneAlsoNotify *string `json:"zone_also_notify,omitempty"`
	// The name of the class applied to the DNS zone, it can be preceded by the class directory.
	ZoneClassName *string `json:"zone_class_name,omitempty"`
	// The class parameters applied to the DNS zone.
	ZoneClassParameters []ApiClassParameterOutputEntry `json:"zone_class_parameters,omitempty"`
	// The forwarding mode of the DNS zone.<table><caption>zone_forward possible values</caption><br/><thead><tr><th>Status</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >first</td><td >The zone sends the queries to the forwarder(s). If no answer is returned, it attempts to answer the queries on its own.</td></tr><tr><td >only</td><td >The zone only forwards the queries to the forwarder(s). Required by some reverse forward zones (e.g., in the case of private addresses).</td></tr></tbody></table></p><br/> If the parameter has no value, it indicates that the forwarding is disabled.
	ZoneForward *string `json:"zone_forward,omitempty"`
	// The IP address(es) of the forwarder(s) associated with the DNS zone. It lists the DNS servers to which any unknown query on this zone should be sent, as follows: <b>&lt;ip_address1&gt;;&lt;ip_address2&gt;;...</b> .
	ZoneForwarders *string `json:"zone_forwarders,omitempty"`
	// The database identifier (ID) of the DNS zone.
	ZoneId *string `json:"zone_id,omitempty"`
	// A way to determine if the DNS zone provides reverse resolution (1) or direct/name resolution (0),
	ZoneIsReverse *string `json:"zone_is_reverse,omitempty"`
	// The RPZ status of the DNS zone. <b>1</b> indicates that the DNS zone is a Response Policy Zone.
	ZoneIsRpz *string `json:"zone_is_rpz,omitempty"`
	// For slave DNS zones, the IP address of the DNS server and, if relevant, the name of the DNS view that contain the master DNS zone, as follows: <b>&lt;ip_addr&gt;;</b> or <b>&lt;ip_addr&gt; key &lt;dnsview_name&gt;;</b> .
	ZoneMasters *string `json:"zone_masters,omitempty"`
	// The name of the DNS zone.
	ZoneName *string `json:"zone_name,omitempty"`
	// The name of the DNS zone in UTF-8 format.
	ZoneNameUtf *string `json:"zone_name_utf,omitempty"`
	// The notify status of the DNS zone.<table><caption>zone_notify possible values</caption><br/><thead><tr><th>Status</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >no</td><td >No notify message is sent.</td></tr><tr><td >yes</td><td >A notify message is sent to the name servers defined in the NS records of the zone and to the IP address(es) specified in the parameter .</td></tr><tr><td >explicit</td><td >A notify message is sent only to the IP address(es) specified in the parameter .</td></tr></tbody></table></p><br/>The notify message is not sent to the server itself or to the primary server defined in the SOA record of the zone.
	ZoneNotify *string `json:"zone_notify,omitempty"`
	// The level of the DNS zone, where 0 represents the highest level in the zones hierarchy. The RPZ rules parameters of each zone are reviewed following this order. The zones with the parameter zone_is_rpz set to 0 will always return 0 for the parameter zone_order.
	ZoneOrder *string `json:"zone_order,omitempty"`
	// The Overriding rule of the RPZ zone. DNS zones are set with the policy <b>given</b>.
	ZoneResponsePolicy *string `json:"zone_response_policy,omitempty"`
	// Internal use. Not documented.
	ZoneRevSortZone *string `json:"zone_rev_sort_zone,omitempty"`
	// The logging status of an RPZ zone.
	ZoneRpzLog *string `json:"zone_rpz_log,omitempty"`
	// The configuration of the option <b>Server max policy TTL</b>, i.e. the number of seconds of the max policy Time To Live of the zone. It overrides the value set at server level. By default it is empty, i.e. set to <b>5</b> seconds.
	ZoneRpzMaxPolicyTtl *string `json:"zone_rpz_max_policy_ttl,omitempty"`
	// The configuration of the <b>option Enable recursive-only on the server</b> of the zone. It overrides the value set at server level. By default it is set to <b>1 (yes)</b>, the server only processes policies on recursive queries.
	ZoneRpzRecursiveOnly *string `json:"zone_rpz_recursive_only,omitempty"`
	// The database identifier (ID) of the space associated with the DNS zone.
	ZoneSpaceId *string `json:"zone_space_id,omitempty"`
	// The name of the space associated with the DNS zone.
	ZoneSpaceName *string `json:"zone_space_name,omitempty"`
	// Internal use. Not documented.
	ZoneSortZone *string `json:"zone_sort_zone,omitempty"`
	// The synchronization status of the DNS zone. <b>1</b> indicates that the zone is currently being synchronized.
	ZoneSynching *string `json:"zone_synching,omitempty"`
	// The type of the DNS zone, either <b>master</b>, <b>slave</b>, <b>forward</b>, <b>stub</b>, <b>hint</b> or <b>delegation-only</b>.
	ZoneType *string `json:"zone_type,omitempty"`
	// Internal use. Not documented.
	ZoneXferDone *string `json:"zone_xfer_done,omitempty"`
	// The DNSSEC delegation signer (DS) fingerprint key associated with the DNS zone, if it is signed.
	ZoneDs *string `json:"zone_ds,omitempty"`
	// The GSS-TSIG status of the DNS server the zone belongs to. <b>1</b> indicates that GSS-TSIG is enabled on the server.
	ServerGssEnabled *string `json:"server_gss_enabled,omitempty"`
	// The database identifier (ID) of the DNS GSS-TSIG keytab.
	ServerGssKeytabId *string `json:"server_gss_keytab_id,omitempty"`
	// The human readable version of the parameter <b>server_addr</b> or <b>server_addr6</b>.
	ServerHostaddr *string `json:"server_hostaddr,omitempty"`
	// The IPv6 address of the DNS server the object belongs to, in hexadecimal format.
	ServerAddr6 *string `json:"server_addr6,omitempty"`
	// The IPv4 address of the DNS server the object belongs to, in hexadecimal format.
	ServerAddr *string `json:"server_addr,omitempty"`
	// Internal use. Not documented.
	ServerIpmProtocol *string `json:"server_ipm_protocol,omitempty"`
	// The engine type of the DNS server the DNS zone belongs to: <b>named</b> (BIND engine), <b>nsd</b> (NSD engine) or <b>unbound</b> (Unbound engine).
	ServerIpmType *string `json:"server_ipm_type,omitempty"`
	// The Multi-status information is displayed as follows: <i>&lt;number-of-instances&gt;@&lt;message-number&gt;@&lt;multi-status-severity&gt;@&lt;module&gt;</i>. The different severity levels are:<br><b>Multi-status severity levels</b>    <table border=1>        <thead>        <tr >            <td><b>Message number</b></td>            <td><b>Severity</b></td>            <td><b>Description</b></td>        </tr>        </thead>        <tbody>        <tr  valign=middle>            <td>0 - 16</td>            <td>Emergency</td>            <td>The object configuration prevents the system from running properly. Action is required.</td>        </tr>        <tr  valign=middle>            <td>17 - 33</td>            <td>Critical</td>            <td>The object configuration is in critical conditions. Immediate action is recommended.</td>        </tr>        <tr  valign=middle>            <td>34 - 50</td>            <td>Error</td>            <td>The object configuration failed at some level. Action is recommended.</td>        </tr>        <tr  valign=middle>            <td>51 - 66</td>            <td>Warning</td>            <td>The object configuration triggers error messages if no action is taken. Action to be taken at your discretion.</td>        </tr>        <tr  valign=middle>            <td>67 - 83</td>            <td>Notice</td>            <td>The object configuration is normal but undergoing events that might trigger errors. No immediate action required.</td>        </tr>        <tr  valign=middle>            <td>84 - 100</td>            <td>Informational</td>            <td>The object configuration is normal, operational messages (might inform you about potential incompatibilities with other modules, etc). No action required.</td>        </tr>        </tbody></table>
	ZoneMultistatus *string `json:"zone_multistatus,omitempty"`
	// The number of keys associated with the zone. This number of keys includes all ZSK and KSK.
	ZoneNumKeys *string `json:"zone_num_keys,omitempty"`
	// The update policy status of the DNS zone. <b>1</b> indicates that the DNS zone uses a specific GSS-TSIG/update-policy. The parameter <b>server_gss_enabled</b> must be set to <b>1</b>.
	ZoneUseUpdatePolicy *string `json:"zone_use_update_policy,omitempty"`
	// The database identifier (ID) of the DNS smart architecture managing the DNS server the object belongs to. <b>0</b> indicates that the server the object belongs to is not managed by a smart architecture or is a smart architecture itself.
	SmartParentId *string `json:"smart_parent_id,omitempty"`
	// The name of the DNS smart architecture managing the DNS server the object belongs to. <b>#</b> indicates that the server the object belongs to is not managed by a smart architecture or is a smart architecture itself.
	SmartParentName *string `json:"smart_parent_name,omitempty"`
}

// NewDataInnerDnsZoneData instantiates a new DataInnerDnsZoneData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataInnerDnsZoneData() *DataInnerDnsZoneData {
	this := DataInnerDnsZoneData{}
	return &this
}

// NewDataInnerDnsZoneDataWithDefaults instantiates a new DataInnerDnsZoneData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataInnerDnsZoneDataWithDefaults() *DataInnerDnsZoneData {
	this := DataInnerDnsZoneData{}
	return &this
}

// GetServerAwsDelegationSet returns the ServerAwsDelegationSet field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetServerAwsDelegationSet() string {
	if o == nil || IsNil(o.ServerAwsDelegationSet) {
		var ret string
		return ret
	}
	return *o.ServerAwsDelegationSet
}

// GetServerAwsDelegationSetOk returns a tuple with the ServerAwsDelegationSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetServerAwsDelegationSetOk() (*string, bool) {
	if o == nil || IsNil(o.ServerAwsDelegationSet) {
		return nil, false
	}
	return o.ServerAwsDelegationSet, true
}

// HasServerAwsDelegationSet returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasServerAwsDelegationSet() bool {
	if o != nil && !IsNil(o.ServerAwsDelegationSet) {
		return true
	}

	return false
}

// SetServerAwsDelegationSet gets a reference to the given string and assigns it to the ServerAwsDelegationSet field.
func (o *DataInnerDnsZoneData) SetServerAwsDelegationSet(v string) {
	o.ServerAwsDelegationSet = &v
}

// GetServerDdnsScavenging returns the ServerDdnsScavenging field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetServerDdnsScavenging() string {
	if o == nil || IsNil(o.ServerDdnsScavenging) {
		var ret string
		return ret
	}
	return *o.ServerDdnsScavenging
}

// GetServerDdnsScavengingOk returns a tuple with the ServerDdnsScavenging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetServerDdnsScavengingOk() (*string, bool) {
	if o == nil || IsNil(o.ServerDdnsScavenging) {
		return nil, false
	}
	return o.ServerDdnsScavenging, true
}

// HasServerDdnsScavenging returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasServerDdnsScavenging() bool {
	if o != nil && !IsNil(o.ServerDdnsScavenging) {
		return true
	}

	return false
}

// SetServerDdnsScavenging gets a reference to the given string and assigns it to the ServerDdnsScavenging field.
func (o *DataInnerDnsZoneData) SetServerDdnsScavenging(v string) {
	o.ServerDdnsScavenging = &v
}

// GetZoneDelayedCreateTime returns the ZoneDelayedCreateTime field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneDelayedCreateTime() string {
	if o == nil || IsNil(o.ZoneDelayedCreateTime) {
		var ret string
		return ret
	}
	return *o.ZoneDelayedCreateTime
}

// GetZoneDelayedCreateTimeOk returns a tuple with the ZoneDelayedCreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneDelayedCreateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneDelayedCreateTime) {
		return nil, false
	}
	return o.ZoneDelayedCreateTime, true
}

// HasZoneDelayedCreateTime returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneDelayedCreateTime() bool {
	if o != nil && !IsNil(o.ZoneDelayedCreateTime) {
		return true
	}

	return false
}

// SetZoneDelayedCreateTime gets a reference to the given string and assigns it to the ZoneDelayedCreateTime field.
func (o *DataInnerDnsZoneData) SetZoneDelayedCreateTime(v string) {
	o.ZoneDelayedCreateTime = &v
}

// GetZoneDelayedDeleteTime returns the ZoneDelayedDeleteTime field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneDelayedDeleteTime() string {
	if o == nil || IsNil(o.ZoneDelayedDeleteTime) {
		var ret string
		return ret
	}
	return *o.ZoneDelayedDeleteTime
}

// GetZoneDelayedDeleteTimeOk returns a tuple with the ZoneDelayedDeleteTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneDelayedDeleteTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneDelayedDeleteTime) {
		return nil, false
	}
	return o.ZoneDelayedDeleteTime, true
}

// HasZoneDelayedDeleteTime returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneDelayedDeleteTime() bool {
	if o != nil && !IsNil(o.ZoneDelayedDeleteTime) {
		return true
	}

	return false
}

// SetZoneDelayedDeleteTime gets a reference to the given string and assigns it to the ZoneDelayedDeleteTime field.
func (o *DataInnerDnsZoneData) SetZoneDelayedDeleteTime(v string) {
	o.ZoneDelayedDeleteTime = &v
}

// GetServerClassName returns the ServerClassName field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetServerClassName() string {
	if o == nil || IsNil(o.ServerClassName) {
		var ret string
		return ret
	}
	return *o.ServerClassName
}

// GetServerClassNameOk returns a tuple with the ServerClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetServerClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServerClassName) {
		return nil, false
	}
	return o.ServerClassName, true
}

// HasServerClassName returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasServerClassName() bool {
	if o != nil && !IsNil(o.ServerClassName) {
		return true
	}

	return false
}

// SetServerClassName gets a reference to the given string and assigns it to the ServerClassName field.
func (o *DataInnerDnsZoneData) SetServerClassName(v string) {
	o.ServerClassName = &v
}

// GetServerClassParameters returns the ServerClassParameters field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetServerClassParameters() []ApiClassParameterOutputEntry {
	if o == nil || IsNil(o.ServerClassParameters) {
		var ret []ApiClassParameterOutputEntry
		return ret
	}
	return o.ServerClassParameters
}

// GetServerClassParametersOk returns a tuple with the ServerClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetServerClassParametersOk() ([]ApiClassParameterOutputEntry, bool) {
	if o == nil || IsNil(o.ServerClassParameters) {
		return nil, false
	}
	return o.ServerClassParameters, true
}

// HasServerClassParameters returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasServerClassParameters() bool {
	if o != nil && !IsNil(o.ServerClassParameters) {
		return true
	}

	return false
}

// SetServerClassParameters gets a reference to the given []ApiClassParameterOutputEntry and assigns it to the ServerClassParameters field.
func (o *DataInnerDnsZoneData) SetServerClassParameters(v []ApiClassParameterOutputEntry) {
	o.ServerClassParameters = v
}

// GetServerCloud returns the ServerCloud field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetServerCloud() string {
	if o == nil || IsNil(o.ServerCloud) {
		var ret string
		return ret
	}
	return *o.ServerCloud
}

// GetServerCloudOk returns a tuple with the ServerCloud field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetServerCloudOk() (*string, bool) {
	if o == nil || IsNil(o.ServerCloud) {
		return nil, false
	}
	return o.ServerCloud, true
}

// HasServerCloud returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasServerCloud() bool {
	if o != nil && !IsNil(o.ServerCloud) {
		return true
	}

	return false
}

// SetServerCloud gets a reference to the given string and assigns it to the ServerCloud field.
func (o *DataInnerDnsZoneData) SetServerCloud(v string) {
	o.ServerCloud = &v
}

// GetServerComment returns the ServerComment field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetServerComment() string {
	if o == nil || IsNil(o.ServerComment) {
		var ret string
		return ret
	}
	return *o.ServerComment
}

// GetServerCommentOk returns a tuple with the ServerComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetServerCommentOk() (*string, bool) {
	if o == nil || IsNil(o.ServerComment) {
		return nil, false
	}
	return o.ServerComment, true
}

// HasServerComment returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasServerComment() bool {
	if o != nil && !IsNil(o.ServerComment) {
		return true
	}

	return false
}

// SetServerComment gets a reference to the given string and assigns it to the ServerComment field.
func (o *DataInnerDnsZoneData) SetServerComment(v string) {
	o.ServerComment = &v
}

// GetServerForceHybrid returns the ServerForceHybrid field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetServerForceHybrid() string {
	if o == nil || IsNil(o.ServerForceHybrid) {
		var ret string
		return ret
	}
	return *o.ServerForceHybrid
}

// GetServerForceHybridOk returns a tuple with the ServerForceHybrid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetServerForceHybridOk() (*string, bool) {
	if o == nil || IsNil(o.ServerForceHybrid) {
		return nil, false
	}
	return o.ServerForceHybrid, true
}

// HasServerForceHybrid returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasServerForceHybrid() bool {
	if o != nil && !IsNil(o.ServerForceHybrid) {
		return true
	}

	return false
}

// SetServerForceHybrid gets a reference to the given string and assigns it to the ServerForceHybrid field.
func (o *DataInnerDnsZoneData) SetServerForceHybrid(v string) {
	o.ServerForceHybrid = &v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetServerId() string {
	if o == nil || IsNil(o.ServerId) {
		var ret string
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetServerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServerId) {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasServerId() bool {
	if o != nil && !IsNil(o.ServerId) {
		return true
	}

	return false
}

// SetServerId gets a reference to the given string and assigns it to the ServerId field.
func (o *DataInnerDnsZoneData) SetServerId(v string) {
	o.ServerId = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetServerName() string {
	if o == nil || IsNil(o.ServerName) {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetServerNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServerName) {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasServerName() bool {
	if o != nil && !IsNil(o.ServerName) {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *DataInnerDnsZoneData) SetServerName(v string) {
	o.ServerName = &v
}

// GetServerState returns the ServerState field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetServerState() string {
	if o == nil || IsNil(o.ServerState) {
		var ret string
		return ret
	}
	return *o.ServerState
}

// GetServerStateOk returns a tuple with the ServerState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetServerStateOk() (*string, bool) {
	if o == nil || IsNil(o.ServerState) {
		return nil, false
	}
	return o.ServerState, true
}

// HasServerState returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasServerState() bool {
	if o != nil && !IsNil(o.ServerState) {
		return true
	}

	return false
}

// SetServerState gets a reference to the given string and assigns it to the ServerState field.
func (o *DataInnerDnsZoneData) SetServerState(v string) {
	o.ServerState = &v
}

// GetServerType returns the ServerType field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetServerType() string {
	if o == nil || IsNil(o.ServerType) {
		var ret string
		return ret
	}
	return *o.ServerType
}

// GetServerTypeOk returns a tuple with the ServerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetServerTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ServerType) {
		return nil, false
	}
	return o.ServerType, true
}

// HasServerType returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasServerType() bool {
	if o != nil && !IsNil(o.ServerType) {
		return true
	}

	return false
}

// SetServerType gets a reference to the given string and assigns it to the ServerType field.
func (o *DataInnerDnsZoneData) SetServerType(v string) {
	o.ServerType = &v
}

// GetServerVersion returns the ServerVersion field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetServerVersion() string {
	if o == nil || IsNil(o.ServerVersion) {
		var ret string
		return ret
	}
	return *o.ServerVersion
}

// GetServerVersionOk returns a tuple with the ServerVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetServerVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ServerVersion) {
		return nil, false
	}
	return o.ServerVersion, true
}

// HasServerVersion returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasServerVersion() bool {
	if o != nil && !IsNil(o.ServerVersion) {
		return true
	}

	return false
}

// SetServerVersion gets a reference to the given string and assigns it to the ServerVersion field.
func (o *DataInnerDnsZoneData) SetServerVersion(v string) {
	o.ServerVersion = &v
}

// GetServerVpcList returns the ServerVpcList field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetServerVpcList() string {
	if o == nil || IsNil(o.ServerVpcList) {
		var ret string
		return ret
	}
	return *o.ServerVpcList
}

// GetServerVpcListOk returns a tuple with the ServerVpcList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetServerVpcListOk() (*string, bool) {
	if o == nil || IsNil(o.ServerVpcList) {
		return nil, false
	}
	return o.ServerVpcList, true
}

// HasServerVpcList returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasServerVpcList() bool {
	if o != nil && !IsNil(o.ServerVpcList) {
		return true
	}

	return false
}

// SetServerVpcList gets a reference to the given string and assigns it to the ServerVpcList field.
func (o *DataInnerDnsZoneData) SetServerVpcList(v string) {
	o.ServerVpcList = &v
}

// GetViewClassName returns the ViewClassName field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetViewClassName() string {
	if o == nil || IsNil(o.ViewClassName) {
		var ret string
		return ret
	}
	return *o.ViewClassName
}

// GetViewClassNameOk returns a tuple with the ViewClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetViewClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.ViewClassName) {
		return nil, false
	}
	return o.ViewClassName, true
}

// HasViewClassName returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasViewClassName() bool {
	if o != nil && !IsNil(o.ViewClassName) {
		return true
	}

	return false
}

// SetViewClassName gets a reference to the given string and assigns it to the ViewClassName field.
func (o *DataInnerDnsZoneData) SetViewClassName(v string) {
	o.ViewClassName = &v
}

// GetViewClassParameters returns the ViewClassParameters field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetViewClassParameters() []ApiClassParameterOutputEntry {
	if o == nil || IsNil(o.ViewClassParameters) {
		var ret []ApiClassParameterOutputEntry
		return ret
	}
	return o.ViewClassParameters
}

// GetViewClassParametersOk returns a tuple with the ViewClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetViewClassParametersOk() ([]ApiClassParameterOutputEntry, bool) {
	if o == nil || IsNil(o.ViewClassParameters) {
		return nil, false
	}
	return o.ViewClassParameters, true
}

// HasViewClassParameters returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasViewClassParameters() bool {
	if o != nil && !IsNil(o.ViewClassParameters) {
		return true
	}

	return false
}

// SetViewClassParameters gets a reference to the given []ApiClassParameterOutputEntry and assigns it to the ViewClassParameters field.
func (o *DataInnerDnsZoneData) SetViewClassParameters(v []ApiClassParameterOutputEntry) {
	o.ViewClassParameters = v
}

// GetViewId returns the ViewId field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetViewId() string {
	if o == nil || IsNil(o.ViewId) {
		var ret string
		return ret
	}
	return *o.ViewId
}

// GetViewIdOk returns a tuple with the ViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetViewIdOk() (*string, bool) {
	if o == nil || IsNil(o.ViewId) {
		return nil, false
	}
	return o.ViewId, true
}

// HasViewId returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasViewId() bool {
	if o != nil && !IsNil(o.ViewId) {
		return true
	}

	return false
}

// SetViewId gets a reference to the given string and assigns it to the ViewId field.
func (o *DataInnerDnsZoneData) SetViewId(v string) {
	o.ViewId = &v
}

// GetViewName returns the ViewName field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetViewName() string {
	if o == nil || IsNil(o.ViewName) {
		var ret string
		return ret
	}
	return *o.ViewName
}

// GetViewNameOk returns a tuple with the ViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetViewNameOk() (*string, bool) {
	if o == nil || IsNil(o.ViewName) {
		return nil, false
	}
	return o.ViewName, true
}

// HasViewName returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasViewName() bool {
	if o != nil && !IsNil(o.ViewName) {
		return true
	}

	return false
}

// SetViewName gets a reference to the given string and assigns it to the ViewName field.
func (o *DataInnerDnsZoneData) SetViewName(v string) {
	o.ViewName = &v
}

// GetZoneAdIntegrated returns the ZoneAdIntegrated field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneAdIntegrated() string {
	if o == nil || IsNil(o.ZoneAdIntegrated) {
		var ret string
		return ret
	}
	return *o.ZoneAdIntegrated
}

// GetZoneAdIntegratedOk returns a tuple with the ZoneAdIntegrated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneAdIntegratedOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneAdIntegrated) {
		return nil, false
	}
	return o.ZoneAdIntegrated, true
}

// HasZoneAdIntegrated returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneAdIntegrated() bool {
	if o != nil && !IsNil(o.ZoneAdIntegrated) {
		return true
	}

	return false
}

// SetZoneAdIntegrated gets a reference to the given string and assigns it to the ZoneAdIntegrated field.
func (o *DataInnerDnsZoneData) SetZoneAdIntegrated(v string) {
	o.ZoneAdIntegrated = &v
}

// GetZoneAllowQuery returns the ZoneAllowQuery field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneAllowQuery() string {
	if o == nil || IsNil(o.ZoneAllowQuery) {
		var ret string
		return ret
	}
	return *o.ZoneAllowQuery
}

// GetZoneAllowQueryOk returns a tuple with the ZoneAllowQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneAllowQueryOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneAllowQuery) {
		return nil, false
	}
	return o.ZoneAllowQuery, true
}

// HasZoneAllowQuery returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneAllowQuery() bool {
	if o != nil && !IsNil(o.ZoneAllowQuery) {
		return true
	}

	return false
}

// SetZoneAllowQuery gets a reference to the given string and assigns it to the ZoneAllowQuery field.
func (o *DataInnerDnsZoneData) SetZoneAllowQuery(v string) {
	o.ZoneAllowQuery = &v
}

// GetZoneAllowTransfer returns the ZoneAllowTransfer field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneAllowTransfer() string {
	if o == nil || IsNil(o.ZoneAllowTransfer) {
		var ret string
		return ret
	}
	return *o.ZoneAllowTransfer
}

// GetZoneAllowTransferOk returns a tuple with the ZoneAllowTransfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneAllowTransferOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneAllowTransfer) {
		return nil, false
	}
	return o.ZoneAllowTransfer, true
}

// HasZoneAllowTransfer returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneAllowTransfer() bool {
	if o != nil && !IsNil(o.ZoneAllowTransfer) {
		return true
	}

	return false
}

// SetZoneAllowTransfer gets a reference to the given string and assigns it to the ZoneAllowTransfer field.
func (o *DataInnerDnsZoneData) SetZoneAllowTransfer(v string) {
	o.ZoneAllowTransfer = &v
}

// GetZoneAllowUpdate returns the ZoneAllowUpdate field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneAllowUpdate() string {
	if o == nil || IsNil(o.ZoneAllowUpdate) {
		var ret string
		return ret
	}
	return *o.ZoneAllowUpdate
}

// GetZoneAllowUpdateOk returns a tuple with the ZoneAllowUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneAllowUpdateOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneAllowUpdate) {
		return nil, false
	}
	return o.ZoneAllowUpdate, true
}

// HasZoneAllowUpdate returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneAllowUpdate() bool {
	if o != nil && !IsNil(o.ZoneAllowUpdate) {
		return true
	}

	return false
}

// SetZoneAllowUpdate gets a reference to the given string and assigns it to the ZoneAllowUpdate field.
func (o *DataInnerDnsZoneData) SetZoneAllowUpdate(v string) {
	o.ZoneAllowUpdate = &v
}

// GetZoneAlsoNotify returns the ZoneAlsoNotify field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneAlsoNotify() string {
	if o == nil || IsNil(o.ZoneAlsoNotify) {
		var ret string
		return ret
	}
	return *o.ZoneAlsoNotify
}

// GetZoneAlsoNotifyOk returns a tuple with the ZoneAlsoNotify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneAlsoNotifyOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneAlsoNotify) {
		return nil, false
	}
	return o.ZoneAlsoNotify, true
}

// HasZoneAlsoNotify returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneAlsoNotify() bool {
	if o != nil && !IsNil(o.ZoneAlsoNotify) {
		return true
	}

	return false
}

// SetZoneAlsoNotify gets a reference to the given string and assigns it to the ZoneAlsoNotify field.
func (o *DataInnerDnsZoneData) SetZoneAlsoNotify(v string) {
	o.ZoneAlsoNotify = &v
}

// GetZoneClassName returns the ZoneClassName field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneClassName() string {
	if o == nil || IsNil(o.ZoneClassName) {
		var ret string
		return ret
	}
	return *o.ZoneClassName
}

// GetZoneClassNameOk returns a tuple with the ZoneClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneClassName) {
		return nil, false
	}
	return o.ZoneClassName, true
}

// HasZoneClassName returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneClassName() bool {
	if o != nil && !IsNil(o.ZoneClassName) {
		return true
	}

	return false
}

// SetZoneClassName gets a reference to the given string and assigns it to the ZoneClassName field.
func (o *DataInnerDnsZoneData) SetZoneClassName(v string) {
	o.ZoneClassName = &v
}

// GetZoneClassParameters returns the ZoneClassParameters field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneClassParameters() []ApiClassParameterOutputEntry {
	if o == nil || IsNil(o.ZoneClassParameters) {
		var ret []ApiClassParameterOutputEntry
		return ret
	}
	return o.ZoneClassParameters
}

// GetZoneClassParametersOk returns a tuple with the ZoneClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneClassParametersOk() ([]ApiClassParameterOutputEntry, bool) {
	if o == nil || IsNil(o.ZoneClassParameters) {
		return nil, false
	}
	return o.ZoneClassParameters, true
}

// HasZoneClassParameters returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneClassParameters() bool {
	if o != nil && !IsNil(o.ZoneClassParameters) {
		return true
	}

	return false
}

// SetZoneClassParameters gets a reference to the given []ApiClassParameterOutputEntry and assigns it to the ZoneClassParameters field.
func (o *DataInnerDnsZoneData) SetZoneClassParameters(v []ApiClassParameterOutputEntry) {
	o.ZoneClassParameters = v
}

// GetZoneForward returns the ZoneForward field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneForward() string {
	if o == nil || IsNil(o.ZoneForward) {
		var ret string
		return ret
	}
	return *o.ZoneForward
}

// GetZoneForwardOk returns a tuple with the ZoneForward field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneForwardOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneForward) {
		return nil, false
	}
	return o.ZoneForward, true
}

// HasZoneForward returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneForward() bool {
	if o != nil && !IsNil(o.ZoneForward) {
		return true
	}

	return false
}

// SetZoneForward gets a reference to the given string and assigns it to the ZoneForward field.
func (o *DataInnerDnsZoneData) SetZoneForward(v string) {
	o.ZoneForward = &v
}

// GetZoneForwarders returns the ZoneForwarders field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneForwarders() string {
	if o == nil || IsNil(o.ZoneForwarders) {
		var ret string
		return ret
	}
	return *o.ZoneForwarders
}

// GetZoneForwardersOk returns a tuple with the ZoneForwarders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneForwardersOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneForwarders) {
		return nil, false
	}
	return o.ZoneForwarders, true
}

// HasZoneForwarders returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneForwarders() bool {
	if o != nil && !IsNil(o.ZoneForwarders) {
		return true
	}

	return false
}

// SetZoneForwarders gets a reference to the given string and assigns it to the ZoneForwarders field.
func (o *DataInnerDnsZoneData) SetZoneForwarders(v string) {
	o.ZoneForwarders = &v
}

// GetZoneId returns the ZoneId field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneId() string {
	if o == nil || IsNil(o.ZoneId) {
		var ret string
		return ret
	}
	return *o.ZoneId
}

// GetZoneIdOk returns a tuple with the ZoneId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneIdOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneId) {
		return nil, false
	}
	return o.ZoneId, true
}

// HasZoneId returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneId() bool {
	if o != nil && !IsNil(o.ZoneId) {
		return true
	}

	return false
}

// SetZoneId gets a reference to the given string and assigns it to the ZoneId field.
func (o *DataInnerDnsZoneData) SetZoneId(v string) {
	o.ZoneId = &v
}

// GetZoneIsReverse returns the ZoneIsReverse field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneIsReverse() string {
	if o == nil || IsNil(o.ZoneIsReverse) {
		var ret string
		return ret
	}
	return *o.ZoneIsReverse
}

// GetZoneIsReverseOk returns a tuple with the ZoneIsReverse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneIsReverseOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneIsReverse) {
		return nil, false
	}
	return o.ZoneIsReverse, true
}

// HasZoneIsReverse returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneIsReverse() bool {
	if o != nil && !IsNil(o.ZoneIsReverse) {
		return true
	}

	return false
}

// SetZoneIsReverse gets a reference to the given string and assigns it to the ZoneIsReverse field.
func (o *DataInnerDnsZoneData) SetZoneIsReverse(v string) {
	o.ZoneIsReverse = &v
}

// GetZoneIsRpz returns the ZoneIsRpz field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneIsRpz() string {
	if o == nil || IsNil(o.ZoneIsRpz) {
		var ret string
		return ret
	}
	return *o.ZoneIsRpz
}

// GetZoneIsRpzOk returns a tuple with the ZoneIsRpz field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneIsRpzOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneIsRpz) {
		return nil, false
	}
	return o.ZoneIsRpz, true
}

// HasZoneIsRpz returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneIsRpz() bool {
	if o != nil && !IsNil(o.ZoneIsRpz) {
		return true
	}

	return false
}

// SetZoneIsRpz gets a reference to the given string and assigns it to the ZoneIsRpz field.
func (o *DataInnerDnsZoneData) SetZoneIsRpz(v string) {
	o.ZoneIsRpz = &v
}

// GetZoneMasters returns the ZoneMasters field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneMasters() string {
	if o == nil || IsNil(o.ZoneMasters) {
		var ret string
		return ret
	}
	return *o.ZoneMasters
}

// GetZoneMastersOk returns a tuple with the ZoneMasters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneMastersOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneMasters) {
		return nil, false
	}
	return o.ZoneMasters, true
}

// HasZoneMasters returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneMasters() bool {
	if o != nil && !IsNil(o.ZoneMasters) {
		return true
	}

	return false
}

// SetZoneMasters gets a reference to the given string and assigns it to the ZoneMasters field.
func (o *DataInnerDnsZoneData) SetZoneMasters(v string) {
	o.ZoneMasters = &v
}

// GetZoneName returns the ZoneName field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneName() string {
	if o == nil || IsNil(o.ZoneName) {
		var ret string
		return ret
	}
	return *o.ZoneName
}

// GetZoneNameOk returns a tuple with the ZoneName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneNameOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneName) {
		return nil, false
	}
	return o.ZoneName, true
}

// HasZoneName returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneName() bool {
	if o != nil && !IsNil(o.ZoneName) {
		return true
	}

	return false
}

// SetZoneName gets a reference to the given string and assigns it to the ZoneName field.
func (o *DataInnerDnsZoneData) SetZoneName(v string) {
	o.ZoneName = &v
}

// GetZoneNameUtf returns the ZoneNameUtf field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneNameUtf() string {
	if o == nil || IsNil(o.ZoneNameUtf) {
		var ret string
		return ret
	}
	return *o.ZoneNameUtf
}

// GetZoneNameUtfOk returns a tuple with the ZoneNameUtf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneNameUtfOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneNameUtf) {
		return nil, false
	}
	return o.ZoneNameUtf, true
}

// HasZoneNameUtf returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneNameUtf() bool {
	if o != nil && !IsNil(o.ZoneNameUtf) {
		return true
	}

	return false
}

// SetZoneNameUtf gets a reference to the given string and assigns it to the ZoneNameUtf field.
func (o *DataInnerDnsZoneData) SetZoneNameUtf(v string) {
	o.ZoneNameUtf = &v
}

// GetZoneNotify returns the ZoneNotify field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneNotify() string {
	if o == nil || IsNil(o.ZoneNotify) {
		var ret string
		return ret
	}
	return *o.ZoneNotify
}

// GetZoneNotifyOk returns a tuple with the ZoneNotify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneNotifyOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneNotify) {
		return nil, false
	}
	return o.ZoneNotify, true
}

// HasZoneNotify returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneNotify() bool {
	if o != nil && !IsNil(o.ZoneNotify) {
		return true
	}

	return false
}

// SetZoneNotify gets a reference to the given string and assigns it to the ZoneNotify field.
func (o *DataInnerDnsZoneData) SetZoneNotify(v string) {
	o.ZoneNotify = &v
}

// GetZoneOrder returns the ZoneOrder field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneOrder() string {
	if o == nil || IsNil(o.ZoneOrder) {
		var ret string
		return ret
	}
	return *o.ZoneOrder
}

// GetZoneOrderOk returns a tuple with the ZoneOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneOrderOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneOrder) {
		return nil, false
	}
	return o.ZoneOrder, true
}

// HasZoneOrder returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneOrder() bool {
	if o != nil && !IsNil(o.ZoneOrder) {
		return true
	}

	return false
}

// SetZoneOrder gets a reference to the given string and assigns it to the ZoneOrder field.
func (o *DataInnerDnsZoneData) SetZoneOrder(v string) {
	o.ZoneOrder = &v
}

// GetZoneResponsePolicy returns the ZoneResponsePolicy field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneResponsePolicy() string {
	if o == nil || IsNil(o.ZoneResponsePolicy) {
		var ret string
		return ret
	}
	return *o.ZoneResponsePolicy
}

// GetZoneResponsePolicyOk returns a tuple with the ZoneResponsePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneResponsePolicyOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneResponsePolicy) {
		return nil, false
	}
	return o.ZoneResponsePolicy, true
}

// HasZoneResponsePolicy returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneResponsePolicy() bool {
	if o != nil && !IsNil(o.ZoneResponsePolicy) {
		return true
	}

	return false
}

// SetZoneResponsePolicy gets a reference to the given string and assigns it to the ZoneResponsePolicy field.
func (o *DataInnerDnsZoneData) SetZoneResponsePolicy(v string) {
	o.ZoneResponsePolicy = &v
}

// GetZoneRevSortZone returns the ZoneRevSortZone field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneRevSortZone() string {
	if o == nil || IsNil(o.ZoneRevSortZone) {
		var ret string
		return ret
	}
	return *o.ZoneRevSortZone
}

// GetZoneRevSortZoneOk returns a tuple with the ZoneRevSortZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneRevSortZoneOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneRevSortZone) {
		return nil, false
	}
	return o.ZoneRevSortZone, true
}

// HasZoneRevSortZone returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneRevSortZone() bool {
	if o != nil && !IsNil(o.ZoneRevSortZone) {
		return true
	}

	return false
}

// SetZoneRevSortZone gets a reference to the given string and assigns it to the ZoneRevSortZone field.
func (o *DataInnerDnsZoneData) SetZoneRevSortZone(v string) {
	o.ZoneRevSortZone = &v
}

// GetZoneRpzLog returns the ZoneRpzLog field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneRpzLog() string {
	if o == nil || IsNil(o.ZoneRpzLog) {
		var ret string
		return ret
	}
	return *o.ZoneRpzLog
}

// GetZoneRpzLogOk returns a tuple with the ZoneRpzLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneRpzLogOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneRpzLog) {
		return nil, false
	}
	return o.ZoneRpzLog, true
}

// HasZoneRpzLog returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneRpzLog() bool {
	if o != nil && !IsNil(o.ZoneRpzLog) {
		return true
	}

	return false
}

// SetZoneRpzLog gets a reference to the given string and assigns it to the ZoneRpzLog field.
func (o *DataInnerDnsZoneData) SetZoneRpzLog(v string) {
	o.ZoneRpzLog = &v
}

// GetZoneRpzMaxPolicyTtl returns the ZoneRpzMaxPolicyTtl field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneRpzMaxPolicyTtl() string {
	if o == nil || IsNil(o.ZoneRpzMaxPolicyTtl) {
		var ret string
		return ret
	}
	return *o.ZoneRpzMaxPolicyTtl
}

// GetZoneRpzMaxPolicyTtlOk returns a tuple with the ZoneRpzMaxPolicyTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneRpzMaxPolicyTtlOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneRpzMaxPolicyTtl) {
		return nil, false
	}
	return o.ZoneRpzMaxPolicyTtl, true
}

// HasZoneRpzMaxPolicyTtl returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneRpzMaxPolicyTtl() bool {
	if o != nil && !IsNil(o.ZoneRpzMaxPolicyTtl) {
		return true
	}

	return false
}

// SetZoneRpzMaxPolicyTtl gets a reference to the given string and assigns it to the ZoneRpzMaxPolicyTtl field.
func (o *DataInnerDnsZoneData) SetZoneRpzMaxPolicyTtl(v string) {
	o.ZoneRpzMaxPolicyTtl = &v
}

// GetZoneRpzRecursiveOnly returns the ZoneRpzRecursiveOnly field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneRpzRecursiveOnly() string {
	if o == nil || IsNil(o.ZoneRpzRecursiveOnly) {
		var ret string
		return ret
	}
	return *o.ZoneRpzRecursiveOnly
}

// GetZoneRpzRecursiveOnlyOk returns a tuple with the ZoneRpzRecursiveOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneRpzRecursiveOnlyOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneRpzRecursiveOnly) {
		return nil, false
	}
	return o.ZoneRpzRecursiveOnly, true
}

// HasZoneRpzRecursiveOnly returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneRpzRecursiveOnly() bool {
	if o != nil && !IsNil(o.ZoneRpzRecursiveOnly) {
		return true
	}

	return false
}

// SetZoneRpzRecursiveOnly gets a reference to the given string and assigns it to the ZoneRpzRecursiveOnly field.
func (o *DataInnerDnsZoneData) SetZoneRpzRecursiveOnly(v string) {
	o.ZoneRpzRecursiveOnly = &v
}

// GetZoneSpaceId returns the ZoneSpaceId field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneSpaceId() string {
	if o == nil || IsNil(o.ZoneSpaceId) {
		var ret string
		return ret
	}
	return *o.ZoneSpaceId
}

// GetZoneSpaceIdOk returns a tuple with the ZoneSpaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneSpaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneSpaceId) {
		return nil, false
	}
	return o.ZoneSpaceId, true
}

// HasZoneSpaceId returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneSpaceId() bool {
	if o != nil && !IsNil(o.ZoneSpaceId) {
		return true
	}

	return false
}

// SetZoneSpaceId gets a reference to the given string and assigns it to the ZoneSpaceId field.
func (o *DataInnerDnsZoneData) SetZoneSpaceId(v string) {
	o.ZoneSpaceId = &v
}

// GetZoneSpaceName returns the ZoneSpaceName field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneSpaceName() string {
	if o == nil || IsNil(o.ZoneSpaceName) {
		var ret string
		return ret
	}
	return *o.ZoneSpaceName
}

// GetZoneSpaceNameOk returns a tuple with the ZoneSpaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneSpaceNameOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneSpaceName) {
		return nil, false
	}
	return o.ZoneSpaceName, true
}

// HasZoneSpaceName returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneSpaceName() bool {
	if o != nil && !IsNil(o.ZoneSpaceName) {
		return true
	}

	return false
}

// SetZoneSpaceName gets a reference to the given string and assigns it to the ZoneSpaceName field.
func (o *DataInnerDnsZoneData) SetZoneSpaceName(v string) {
	o.ZoneSpaceName = &v
}

// GetZoneSortZone returns the ZoneSortZone field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneSortZone() string {
	if o == nil || IsNil(o.ZoneSortZone) {
		var ret string
		return ret
	}
	return *o.ZoneSortZone
}

// GetZoneSortZoneOk returns a tuple with the ZoneSortZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneSortZoneOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneSortZone) {
		return nil, false
	}
	return o.ZoneSortZone, true
}

// HasZoneSortZone returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneSortZone() bool {
	if o != nil && !IsNil(o.ZoneSortZone) {
		return true
	}

	return false
}

// SetZoneSortZone gets a reference to the given string and assigns it to the ZoneSortZone field.
func (o *DataInnerDnsZoneData) SetZoneSortZone(v string) {
	o.ZoneSortZone = &v
}

// GetZoneSynching returns the ZoneSynching field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneSynching() string {
	if o == nil || IsNil(o.ZoneSynching) {
		var ret string
		return ret
	}
	return *o.ZoneSynching
}

// GetZoneSynchingOk returns a tuple with the ZoneSynching field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneSynchingOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneSynching) {
		return nil, false
	}
	return o.ZoneSynching, true
}

// HasZoneSynching returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneSynching() bool {
	if o != nil && !IsNil(o.ZoneSynching) {
		return true
	}

	return false
}

// SetZoneSynching gets a reference to the given string and assigns it to the ZoneSynching field.
func (o *DataInnerDnsZoneData) SetZoneSynching(v string) {
	o.ZoneSynching = &v
}

// GetZoneType returns the ZoneType field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneType() string {
	if o == nil || IsNil(o.ZoneType) {
		var ret string
		return ret
	}
	return *o.ZoneType
}

// GetZoneTypeOk returns a tuple with the ZoneType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneType) {
		return nil, false
	}
	return o.ZoneType, true
}

// HasZoneType returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneType() bool {
	if o != nil && !IsNil(o.ZoneType) {
		return true
	}

	return false
}

// SetZoneType gets a reference to the given string and assigns it to the ZoneType field.
func (o *DataInnerDnsZoneData) SetZoneType(v string) {
	o.ZoneType = &v
}

// GetZoneXferDone returns the ZoneXferDone field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneXferDone() string {
	if o == nil || IsNil(o.ZoneXferDone) {
		var ret string
		return ret
	}
	return *o.ZoneXferDone
}

// GetZoneXferDoneOk returns a tuple with the ZoneXferDone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneXferDoneOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneXferDone) {
		return nil, false
	}
	return o.ZoneXferDone, true
}

// HasZoneXferDone returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneXferDone() bool {
	if o != nil && !IsNil(o.ZoneXferDone) {
		return true
	}

	return false
}

// SetZoneXferDone gets a reference to the given string and assigns it to the ZoneXferDone field.
func (o *DataInnerDnsZoneData) SetZoneXferDone(v string) {
	o.ZoneXferDone = &v
}

// GetZoneDs returns the ZoneDs field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneDs() string {
	if o == nil || IsNil(o.ZoneDs) {
		var ret string
		return ret
	}
	return *o.ZoneDs
}

// GetZoneDsOk returns a tuple with the ZoneDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneDsOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneDs) {
		return nil, false
	}
	return o.ZoneDs, true
}

// HasZoneDs returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneDs() bool {
	if o != nil && !IsNil(o.ZoneDs) {
		return true
	}

	return false
}

// SetZoneDs gets a reference to the given string and assigns it to the ZoneDs field.
func (o *DataInnerDnsZoneData) SetZoneDs(v string) {
	o.ZoneDs = &v
}

// GetServerGssEnabled returns the ServerGssEnabled field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetServerGssEnabled() string {
	if o == nil || IsNil(o.ServerGssEnabled) {
		var ret string
		return ret
	}
	return *o.ServerGssEnabled
}

// GetServerGssEnabledOk returns a tuple with the ServerGssEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetServerGssEnabledOk() (*string, bool) {
	if o == nil || IsNil(o.ServerGssEnabled) {
		return nil, false
	}
	return o.ServerGssEnabled, true
}

// HasServerGssEnabled returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasServerGssEnabled() bool {
	if o != nil && !IsNil(o.ServerGssEnabled) {
		return true
	}

	return false
}

// SetServerGssEnabled gets a reference to the given string and assigns it to the ServerGssEnabled field.
func (o *DataInnerDnsZoneData) SetServerGssEnabled(v string) {
	o.ServerGssEnabled = &v
}

// GetServerGssKeytabId returns the ServerGssKeytabId field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetServerGssKeytabId() string {
	if o == nil || IsNil(o.ServerGssKeytabId) {
		var ret string
		return ret
	}
	return *o.ServerGssKeytabId
}

// GetServerGssKeytabIdOk returns a tuple with the ServerGssKeytabId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetServerGssKeytabIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServerGssKeytabId) {
		return nil, false
	}
	return o.ServerGssKeytabId, true
}

// HasServerGssKeytabId returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasServerGssKeytabId() bool {
	if o != nil && !IsNil(o.ServerGssKeytabId) {
		return true
	}

	return false
}

// SetServerGssKeytabId gets a reference to the given string and assigns it to the ServerGssKeytabId field.
func (o *DataInnerDnsZoneData) SetServerGssKeytabId(v string) {
	o.ServerGssKeytabId = &v
}

// GetServerHostaddr returns the ServerHostaddr field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetServerHostaddr() string {
	if o == nil || IsNil(o.ServerHostaddr) {
		var ret string
		return ret
	}
	return *o.ServerHostaddr
}

// GetServerHostaddrOk returns a tuple with the ServerHostaddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetServerHostaddrOk() (*string, bool) {
	if o == nil || IsNil(o.ServerHostaddr) {
		return nil, false
	}
	return o.ServerHostaddr, true
}

// HasServerHostaddr returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasServerHostaddr() bool {
	if o != nil && !IsNil(o.ServerHostaddr) {
		return true
	}

	return false
}

// SetServerHostaddr gets a reference to the given string and assigns it to the ServerHostaddr field.
func (o *DataInnerDnsZoneData) SetServerHostaddr(v string) {
	o.ServerHostaddr = &v
}

// GetServerAddr6 returns the ServerAddr6 field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetServerAddr6() string {
	if o == nil || IsNil(o.ServerAddr6) {
		var ret string
		return ret
	}
	return *o.ServerAddr6
}

// GetServerAddr6Ok returns a tuple with the ServerAddr6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetServerAddr6Ok() (*string, bool) {
	if o == nil || IsNil(o.ServerAddr6) {
		return nil, false
	}
	return o.ServerAddr6, true
}

// HasServerAddr6 returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasServerAddr6() bool {
	if o != nil && !IsNil(o.ServerAddr6) {
		return true
	}

	return false
}

// SetServerAddr6 gets a reference to the given string and assigns it to the ServerAddr6 field.
func (o *DataInnerDnsZoneData) SetServerAddr6(v string) {
	o.ServerAddr6 = &v
}

// GetServerAddr returns the ServerAddr field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetServerAddr() string {
	if o == nil || IsNil(o.ServerAddr) {
		var ret string
		return ret
	}
	return *o.ServerAddr
}

// GetServerAddrOk returns a tuple with the ServerAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetServerAddrOk() (*string, bool) {
	if o == nil || IsNil(o.ServerAddr) {
		return nil, false
	}
	return o.ServerAddr, true
}

// HasServerAddr returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasServerAddr() bool {
	if o != nil && !IsNil(o.ServerAddr) {
		return true
	}

	return false
}

// SetServerAddr gets a reference to the given string and assigns it to the ServerAddr field.
func (o *DataInnerDnsZoneData) SetServerAddr(v string) {
	o.ServerAddr = &v
}

// GetServerIpmProtocol returns the ServerIpmProtocol field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetServerIpmProtocol() string {
	if o == nil || IsNil(o.ServerIpmProtocol) {
		var ret string
		return ret
	}
	return *o.ServerIpmProtocol
}

// GetServerIpmProtocolOk returns a tuple with the ServerIpmProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetServerIpmProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.ServerIpmProtocol) {
		return nil, false
	}
	return o.ServerIpmProtocol, true
}

// HasServerIpmProtocol returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasServerIpmProtocol() bool {
	if o != nil && !IsNil(o.ServerIpmProtocol) {
		return true
	}

	return false
}

// SetServerIpmProtocol gets a reference to the given string and assigns it to the ServerIpmProtocol field.
func (o *DataInnerDnsZoneData) SetServerIpmProtocol(v string) {
	o.ServerIpmProtocol = &v
}

// GetServerIpmType returns the ServerIpmType field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetServerIpmType() string {
	if o == nil || IsNil(o.ServerIpmType) {
		var ret string
		return ret
	}
	return *o.ServerIpmType
}

// GetServerIpmTypeOk returns a tuple with the ServerIpmType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetServerIpmTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ServerIpmType) {
		return nil, false
	}
	return o.ServerIpmType, true
}

// HasServerIpmType returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasServerIpmType() bool {
	if o != nil && !IsNil(o.ServerIpmType) {
		return true
	}

	return false
}

// SetServerIpmType gets a reference to the given string and assigns it to the ServerIpmType field.
func (o *DataInnerDnsZoneData) SetServerIpmType(v string) {
	o.ServerIpmType = &v
}

// GetZoneMultistatus returns the ZoneMultistatus field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneMultistatus() string {
	if o == nil || IsNil(o.ZoneMultistatus) {
		var ret string
		return ret
	}
	return *o.ZoneMultistatus
}

// GetZoneMultistatusOk returns a tuple with the ZoneMultistatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneMultistatusOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneMultistatus) {
		return nil, false
	}
	return o.ZoneMultistatus, true
}

// HasZoneMultistatus returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneMultistatus() bool {
	if o != nil && !IsNil(o.ZoneMultistatus) {
		return true
	}

	return false
}

// SetZoneMultistatus gets a reference to the given string and assigns it to the ZoneMultistatus field.
func (o *DataInnerDnsZoneData) SetZoneMultistatus(v string) {
	o.ZoneMultistatus = &v
}

// GetZoneNumKeys returns the ZoneNumKeys field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneNumKeys() string {
	if o == nil || IsNil(o.ZoneNumKeys) {
		var ret string
		return ret
	}
	return *o.ZoneNumKeys
}

// GetZoneNumKeysOk returns a tuple with the ZoneNumKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneNumKeysOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneNumKeys) {
		return nil, false
	}
	return o.ZoneNumKeys, true
}

// HasZoneNumKeys returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneNumKeys() bool {
	if o != nil && !IsNil(o.ZoneNumKeys) {
		return true
	}

	return false
}

// SetZoneNumKeys gets a reference to the given string and assigns it to the ZoneNumKeys field.
func (o *DataInnerDnsZoneData) SetZoneNumKeys(v string) {
	o.ZoneNumKeys = &v
}

// GetZoneUseUpdatePolicy returns the ZoneUseUpdatePolicy field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetZoneUseUpdatePolicy() string {
	if o == nil || IsNil(o.ZoneUseUpdatePolicy) {
		var ret string
		return ret
	}
	return *o.ZoneUseUpdatePolicy
}

// GetZoneUseUpdatePolicyOk returns a tuple with the ZoneUseUpdatePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetZoneUseUpdatePolicyOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneUseUpdatePolicy) {
		return nil, false
	}
	return o.ZoneUseUpdatePolicy, true
}

// HasZoneUseUpdatePolicy returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasZoneUseUpdatePolicy() bool {
	if o != nil && !IsNil(o.ZoneUseUpdatePolicy) {
		return true
	}

	return false
}

// SetZoneUseUpdatePolicy gets a reference to the given string and assigns it to the ZoneUseUpdatePolicy field.
func (o *DataInnerDnsZoneData) SetZoneUseUpdatePolicy(v string) {
	o.ZoneUseUpdatePolicy = &v
}

// GetSmartParentId returns the SmartParentId field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetSmartParentId() string {
	if o == nil || IsNil(o.SmartParentId) {
		var ret string
		return ret
	}
	return *o.SmartParentId
}

// GetSmartParentIdOk returns a tuple with the SmartParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetSmartParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.SmartParentId) {
		return nil, false
	}
	return o.SmartParentId, true
}

// HasSmartParentId returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasSmartParentId() bool {
	if o != nil && !IsNil(o.SmartParentId) {
		return true
	}

	return false
}

// SetSmartParentId gets a reference to the given string and assigns it to the SmartParentId field.
func (o *DataInnerDnsZoneData) SetSmartParentId(v string) {
	o.SmartParentId = &v
}

// GetSmartParentName returns the SmartParentName field value if set, zero value otherwise.
func (o *DataInnerDnsZoneData) GetSmartParentName() string {
	if o == nil || IsNil(o.SmartParentName) {
		var ret string
		return ret
	}
	return *o.SmartParentName
}

// GetSmartParentNameOk returns a tuple with the SmartParentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsZoneData) GetSmartParentNameOk() (*string, bool) {
	if o == nil || IsNil(o.SmartParentName) {
		return nil, false
	}
	return o.SmartParentName, true
}

// HasSmartParentName returns a boolean if a field has been set.
func (o *DataInnerDnsZoneData) HasSmartParentName() bool {
	if o != nil && !IsNil(o.SmartParentName) {
		return true
	}

	return false
}

// SetSmartParentName gets a reference to the given string and assigns it to the SmartParentName field.
func (o *DataInnerDnsZoneData) SetSmartParentName(v string) {
	o.SmartParentName = &v
}

func (o DataInnerDnsZoneData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataInnerDnsZoneData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ServerAwsDelegationSet) {
		toSerialize["server_aws_delegation_set"] = o.ServerAwsDelegationSet
	}
	if !IsNil(o.ServerDdnsScavenging) {
		toSerialize["server_ddns_scavenging"] = o.ServerDdnsScavenging
	}
	if !IsNil(o.ZoneDelayedCreateTime) {
		toSerialize["zone_delayed_create_time"] = o.ZoneDelayedCreateTime
	}
	if !IsNil(o.ZoneDelayedDeleteTime) {
		toSerialize["zone_delayed_delete_time"] = o.ZoneDelayedDeleteTime
	}
	if !IsNil(o.ServerClassName) {
		toSerialize["server_class_name"] = o.ServerClassName
	}
	if !IsNil(o.ServerClassParameters) {
		toSerialize["server_class_parameters"] = o.ServerClassParameters
	}
	if !IsNil(o.ServerCloud) {
		toSerialize["server_cloud"] = o.ServerCloud
	}
	if !IsNil(o.ServerComment) {
		toSerialize["server_comment"] = o.ServerComment
	}
	if !IsNil(o.ServerForceHybrid) {
		toSerialize["server_force_hybrid"] = o.ServerForceHybrid
	}
	if !IsNil(o.ServerId) {
		toSerialize["server_id"] = o.ServerId
	}
	if !IsNil(o.ServerName) {
		toSerialize["server_name"] = o.ServerName
	}
	if !IsNil(o.ServerState) {
		toSerialize["server_state"] = o.ServerState
	}
	if !IsNil(o.ServerType) {
		toSerialize["server_type"] = o.ServerType
	}
	if !IsNil(o.ServerVersion) {
		toSerialize["server_version"] = o.ServerVersion
	}
	if !IsNil(o.ServerVpcList) {
		toSerialize["server_vpc_list"] = o.ServerVpcList
	}
	if !IsNil(o.ViewClassName) {
		toSerialize["view_class_name"] = o.ViewClassName
	}
	if !IsNil(o.ViewClassParameters) {
		toSerialize["view_class_parameters"] = o.ViewClassParameters
	}
	if !IsNil(o.ViewId) {
		toSerialize["view_id"] = o.ViewId
	}
	if !IsNil(o.ViewName) {
		toSerialize["view_name"] = o.ViewName
	}
	if !IsNil(o.ZoneAdIntegrated) {
		toSerialize["zone_ad_integrated"] = o.ZoneAdIntegrated
	}
	if !IsNil(o.ZoneAllowQuery) {
		toSerialize["zone_allow_query"] = o.ZoneAllowQuery
	}
	if !IsNil(o.ZoneAllowTransfer) {
		toSerialize["zone_allow_transfer"] = o.ZoneAllowTransfer
	}
	if !IsNil(o.ZoneAllowUpdate) {
		toSerialize["zone_allow_update"] = o.ZoneAllowUpdate
	}
	if !IsNil(o.ZoneAlsoNotify) {
		toSerialize["zone_also_notify"] = o.ZoneAlsoNotify
	}
	if !IsNil(o.ZoneClassName) {
		toSerialize["zone_class_name"] = o.ZoneClassName
	}
	if !IsNil(o.ZoneClassParameters) {
		toSerialize["zone_class_parameters"] = o.ZoneClassParameters
	}
	if !IsNil(o.ZoneForward) {
		toSerialize["zone_forward"] = o.ZoneForward
	}
	if !IsNil(o.ZoneForwarders) {
		toSerialize["zone_forwarders"] = o.ZoneForwarders
	}
	if !IsNil(o.ZoneId) {
		toSerialize["zone_id"] = o.ZoneId
	}
	if !IsNil(o.ZoneIsReverse) {
		toSerialize["zone_is_reverse"] = o.ZoneIsReverse
	}
	if !IsNil(o.ZoneIsRpz) {
		toSerialize["zone_is_rpz"] = o.ZoneIsRpz
	}
	if !IsNil(o.ZoneMasters) {
		toSerialize["zone_masters"] = o.ZoneMasters
	}
	if !IsNil(o.ZoneName) {
		toSerialize["zone_name"] = o.ZoneName
	}
	if !IsNil(o.ZoneNameUtf) {
		toSerialize["zone_name_utf"] = o.ZoneNameUtf
	}
	if !IsNil(o.ZoneNotify) {
		toSerialize["zone_notify"] = o.ZoneNotify
	}
	if !IsNil(o.ZoneOrder) {
		toSerialize["zone_order"] = o.ZoneOrder
	}
	if !IsNil(o.ZoneResponsePolicy) {
		toSerialize["zone_response_policy"] = o.ZoneResponsePolicy
	}
	if !IsNil(o.ZoneRevSortZone) {
		toSerialize["zone_rev_sort_zone"] = o.ZoneRevSortZone
	}
	if !IsNil(o.ZoneRpzLog) {
		toSerialize["zone_rpz_log"] = o.ZoneRpzLog
	}
	if !IsNil(o.ZoneRpzMaxPolicyTtl) {
		toSerialize["zone_rpz_max_policy_ttl"] = o.ZoneRpzMaxPolicyTtl
	}
	if !IsNil(o.ZoneRpzRecursiveOnly) {
		toSerialize["zone_rpz_recursive_only"] = o.ZoneRpzRecursiveOnly
	}
	if !IsNil(o.ZoneSpaceId) {
		toSerialize["zone_space_id"] = o.ZoneSpaceId
	}
	if !IsNil(o.ZoneSpaceName) {
		toSerialize["zone_space_name"] = o.ZoneSpaceName
	}
	if !IsNil(o.ZoneSortZone) {
		toSerialize["zone_sort_zone"] = o.ZoneSortZone
	}
	if !IsNil(o.ZoneSynching) {
		toSerialize["zone_synching"] = o.ZoneSynching
	}
	if !IsNil(o.ZoneType) {
		toSerialize["zone_type"] = o.ZoneType
	}
	if !IsNil(o.ZoneXferDone) {
		toSerialize["zone_xfer_done"] = o.ZoneXferDone
	}
	if !IsNil(o.ZoneDs) {
		toSerialize["zone_ds"] = o.ZoneDs
	}
	if !IsNil(o.ServerGssEnabled) {
		toSerialize["server_gss_enabled"] = o.ServerGssEnabled
	}
	if !IsNil(o.ServerGssKeytabId) {
		toSerialize["server_gss_keytab_id"] = o.ServerGssKeytabId
	}
	if !IsNil(o.ServerHostaddr) {
		toSerialize["server_hostaddr"] = o.ServerHostaddr
	}
	if !IsNil(o.ServerAddr6) {
		toSerialize["server_addr6"] = o.ServerAddr6
	}
	if !IsNil(o.ServerAddr) {
		toSerialize["server_addr"] = o.ServerAddr
	}
	if !IsNil(o.ServerIpmProtocol) {
		toSerialize["server_ipm_protocol"] = o.ServerIpmProtocol
	}
	if !IsNil(o.ServerIpmType) {
		toSerialize["server_ipm_type"] = o.ServerIpmType
	}
	if !IsNil(o.ZoneMultistatus) {
		toSerialize["zone_multistatus"] = o.ZoneMultistatus
	}
	if !IsNil(o.ZoneNumKeys) {
		toSerialize["zone_num_keys"] = o.ZoneNumKeys
	}
	if !IsNil(o.ZoneUseUpdatePolicy) {
		toSerialize["zone_use_update_policy"] = o.ZoneUseUpdatePolicy
	}
	if !IsNil(o.SmartParentId) {
		toSerialize["smart_parent_id"] = o.SmartParentId
	}
	if !IsNil(o.SmartParentName) {
		toSerialize["smart_parent_name"] = o.SmartParentName
	}
	return toSerialize, nil
}

type NullableDataInnerDnsZoneData struct {
	value *DataInnerDnsZoneData
	isSet bool
}

func (v NullableDataInnerDnsZoneData) Get() *DataInnerDnsZoneData {
	return v.value
}

func (v *NullableDataInnerDnsZoneData) Set(val *DataInnerDnsZoneData) {
	v.value = val
	v.isSet = true
}

func (v NullableDataInnerDnsZoneData) IsSet() bool {
	return v.isSet
}

func (v *NullableDataInnerDnsZoneData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataInnerDnsZoneData(val *DataInnerDnsZoneData) *NullableDataInnerDnsZoneData {
	return &NullableDataInnerDnsZoneData{value: val, isSet: true}
}

func (v NullableDataInnerDnsZoneData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataInnerDnsZoneData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
