/*
SOLIDserver API

OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2024 EfficientIP</p><p><em>All specifications and information regarding the products in this document are subject to change without notice and should not be construed as a commitment by EfficientIP. EfficientIP assumes no responsibility or liability for any mistakes or inaccuracies that may appear in this document. All statements and recommendations in this document are believed to be accurate but are presented without warranty. Users must take full responsibility for their application of any product.</em></p><p><em>This document aims at detailing EfficientIP proprietary solutions. As our solutions rely on several third-party products, created by other companies or organizations, it may redirect readers to third-party websites and documentation for further information. In such a case, EfficientIP cannot be liable or expected to provide said information on products they do maintain or created.</em></p><p>Generated (Friday 4th of October 2024 03:41:11 PM)</p>

API version: 2.0
Contact: support-api@efficientip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// checks if the DataInnerDhcpAclentryData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataInnerDhcpAclentryData{}

// DataInnerDhcpAclentryData struct for DataInnerDhcpAclentryData
type DataInnerDhcpAclentryData struct {
	// The role of the server the object belongs to in the cluster, either <b>active (M)</b>, <b>passive (B)</b> or <b>N/A (#)</b>.
	ServerClusterRole *string `json:"server_cluster_role,omitempty"`
	// The delay of creation status. <b>1</b> indicates that the object is not created yet.
	AclentryDelayedCreateTime *string `json:"aclentry_delayed_create_time,omitempty"`
	// The delay of deletion status. <b>1</b> indicates that the object is not deleted yet.
	AclentryDelayedDeleteTime *string `json:"aclentry_delayed_delete_time,omitempty"`
	// The database identifier (ID) of the DHCPv4 server the object belongs to.
	ServerId *string `json:"server_id,omitempty"`
	// The name of the DHCPv4 server the object belongs to.
	ServerName *string `json:"server_name,omitempty"`
	// The type of the DHCPv4 server the object belongs to: <table><caption>server_type possible values</caption><br/><thead><tr><th>Type</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >ipm</td><td >EfficientIP or EfficientIP Package server</td></tr><tr><td >msrpc</td><td >Microsoft Windows DHCP server</td></tr><tr><td >vdhcp</td><td >EfficientIP DHCPv4 smart architecture</td></tr></tbody></table></p><br/>
	ServerType *string `json:"server_type,omitempty"`
	// The database identifier (ID) of the DHCPv4 ACL.
	AclId *string `json:"acl_id,omitempty"`
	// The name of the DHCPv4 ACL.
	AclName *string `json:"acl_name,omitempty"`
	// The database identifier (ID) of the DHCPv4 ACL entry.
	AclentryId *string `json:"aclentry_id,omitempty"`
	// The lease limit of the DHCPv4 ACL entry.
	AclentryLeaselimit *string `json:"aclentry_leaselimit,omitempty"`
	// The value of the DHCPv4 ACL entry.
	AclentryValue *string `json:"aclentry_value,omitempty"`
	// The database identifier (ID) of the DHCPv4 smart architecture managing the DHCPv4 server the object belongs to. <b>0</b> indicates that the server the object belongs to is not managed by a smart architecture or is a smart architecture itself.
	SmartParentId *string `json:"smart_parent_id,omitempty"`
}

// NewDataInnerDhcpAclentryData instantiates a new DataInnerDhcpAclentryData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataInnerDhcpAclentryData() *DataInnerDhcpAclentryData {
	this := DataInnerDhcpAclentryData{}
	return &this
}

// NewDataInnerDhcpAclentryDataWithDefaults instantiates a new DataInnerDhcpAclentryData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataInnerDhcpAclentryDataWithDefaults() *DataInnerDhcpAclentryData {
	this := DataInnerDhcpAclentryData{}
	return &this
}

// GetServerClusterRole returns the ServerClusterRole field value if set, zero value otherwise.
func (o *DataInnerDhcpAclentryData) GetServerClusterRole() string {
	if o == nil || IsNil(o.ServerClusterRole) {
		var ret string
		return ret
	}
	return *o.ServerClusterRole
}

// GetServerClusterRoleOk returns a tuple with the ServerClusterRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpAclentryData) GetServerClusterRoleOk() (*string, bool) {
	if o == nil || IsNil(o.ServerClusterRole) {
		return nil, false
	}
	return o.ServerClusterRole, true
}

// HasServerClusterRole returns a boolean if a field has been set.
func (o *DataInnerDhcpAclentryData) HasServerClusterRole() bool {
	if o != nil && !IsNil(o.ServerClusterRole) {
		return true
	}

	return false
}

// SetServerClusterRole gets a reference to the given string and assigns it to the ServerClusterRole field.
func (o *DataInnerDhcpAclentryData) SetServerClusterRole(v string) {
	o.ServerClusterRole = &v
}

// GetAclentryDelayedCreateTime returns the AclentryDelayedCreateTime field value if set, zero value otherwise.
func (o *DataInnerDhcpAclentryData) GetAclentryDelayedCreateTime() string {
	if o == nil || IsNil(o.AclentryDelayedCreateTime) {
		var ret string
		return ret
	}
	return *o.AclentryDelayedCreateTime
}

// GetAclentryDelayedCreateTimeOk returns a tuple with the AclentryDelayedCreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpAclentryData) GetAclentryDelayedCreateTimeOk() (*string, bool) {
	if o == nil || IsNil(o.AclentryDelayedCreateTime) {
		return nil, false
	}
	return o.AclentryDelayedCreateTime, true
}

// HasAclentryDelayedCreateTime returns a boolean if a field has been set.
func (o *DataInnerDhcpAclentryData) HasAclentryDelayedCreateTime() bool {
	if o != nil && !IsNil(o.AclentryDelayedCreateTime) {
		return true
	}

	return false
}

// SetAclentryDelayedCreateTime gets a reference to the given string and assigns it to the AclentryDelayedCreateTime field.
func (o *DataInnerDhcpAclentryData) SetAclentryDelayedCreateTime(v string) {
	o.AclentryDelayedCreateTime = &v
}

// GetAclentryDelayedDeleteTime returns the AclentryDelayedDeleteTime field value if set, zero value otherwise.
func (o *DataInnerDhcpAclentryData) GetAclentryDelayedDeleteTime() string {
	if o == nil || IsNil(o.AclentryDelayedDeleteTime) {
		var ret string
		return ret
	}
	return *o.AclentryDelayedDeleteTime
}

// GetAclentryDelayedDeleteTimeOk returns a tuple with the AclentryDelayedDeleteTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpAclentryData) GetAclentryDelayedDeleteTimeOk() (*string, bool) {
	if o == nil || IsNil(o.AclentryDelayedDeleteTime) {
		return nil, false
	}
	return o.AclentryDelayedDeleteTime, true
}

// HasAclentryDelayedDeleteTime returns a boolean if a field has been set.
func (o *DataInnerDhcpAclentryData) HasAclentryDelayedDeleteTime() bool {
	if o != nil && !IsNil(o.AclentryDelayedDeleteTime) {
		return true
	}

	return false
}

// SetAclentryDelayedDeleteTime gets a reference to the given string and assigns it to the AclentryDelayedDeleteTime field.
func (o *DataInnerDhcpAclentryData) SetAclentryDelayedDeleteTime(v string) {
	o.AclentryDelayedDeleteTime = &v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *DataInnerDhcpAclentryData) GetServerId() string {
	if o == nil || IsNil(o.ServerId) {
		var ret string
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpAclentryData) GetServerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServerId) {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *DataInnerDhcpAclentryData) HasServerId() bool {
	if o != nil && !IsNil(o.ServerId) {
		return true
	}

	return false
}

// SetServerId gets a reference to the given string and assigns it to the ServerId field.
func (o *DataInnerDhcpAclentryData) SetServerId(v string) {
	o.ServerId = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *DataInnerDhcpAclentryData) GetServerName() string {
	if o == nil || IsNil(o.ServerName) {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpAclentryData) GetServerNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServerName) {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *DataInnerDhcpAclentryData) HasServerName() bool {
	if o != nil && !IsNil(o.ServerName) {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *DataInnerDhcpAclentryData) SetServerName(v string) {
	o.ServerName = &v
}

// GetServerType returns the ServerType field value if set, zero value otherwise.
func (o *DataInnerDhcpAclentryData) GetServerType() string {
	if o == nil || IsNil(o.ServerType) {
		var ret string
		return ret
	}
	return *o.ServerType
}

// GetServerTypeOk returns a tuple with the ServerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpAclentryData) GetServerTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ServerType) {
		return nil, false
	}
	return o.ServerType, true
}

// HasServerType returns a boolean if a field has been set.
func (o *DataInnerDhcpAclentryData) HasServerType() bool {
	if o != nil && !IsNil(o.ServerType) {
		return true
	}

	return false
}

// SetServerType gets a reference to the given string and assigns it to the ServerType field.
func (o *DataInnerDhcpAclentryData) SetServerType(v string) {
	o.ServerType = &v
}

// GetAclId returns the AclId field value if set, zero value otherwise.
func (o *DataInnerDhcpAclentryData) GetAclId() string {
	if o == nil || IsNil(o.AclId) {
		var ret string
		return ret
	}
	return *o.AclId
}

// GetAclIdOk returns a tuple with the AclId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpAclentryData) GetAclIdOk() (*string, bool) {
	if o == nil || IsNil(o.AclId) {
		return nil, false
	}
	return o.AclId, true
}

// HasAclId returns a boolean if a field has been set.
func (o *DataInnerDhcpAclentryData) HasAclId() bool {
	if o != nil && !IsNil(o.AclId) {
		return true
	}

	return false
}

// SetAclId gets a reference to the given string and assigns it to the AclId field.
func (o *DataInnerDhcpAclentryData) SetAclId(v string) {
	o.AclId = &v
}

// GetAclName returns the AclName field value if set, zero value otherwise.
func (o *DataInnerDhcpAclentryData) GetAclName() string {
	if o == nil || IsNil(o.AclName) {
		var ret string
		return ret
	}
	return *o.AclName
}

// GetAclNameOk returns a tuple with the AclName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpAclentryData) GetAclNameOk() (*string, bool) {
	if o == nil || IsNil(o.AclName) {
		return nil, false
	}
	return o.AclName, true
}

// HasAclName returns a boolean if a field has been set.
func (o *DataInnerDhcpAclentryData) HasAclName() bool {
	if o != nil && !IsNil(o.AclName) {
		return true
	}

	return false
}

// SetAclName gets a reference to the given string and assigns it to the AclName field.
func (o *DataInnerDhcpAclentryData) SetAclName(v string) {
	o.AclName = &v
}

// GetAclentryId returns the AclentryId field value if set, zero value otherwise.
func (o *DataInnerDhcpAclentryData) GetAclentryId() string {
	if o == nil || IsNil(o.AclentryId) {
		var ret string
		return ret
	}
	return *o.AclentryId
}

// GetAclentryIdOk returns a tuple with the AclentryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpAclentryData) GetAclentryIdOk() (*string, bool) {
	if o == nil || IsNil(o.AclentryId) {
		return nil, false
	}
	return o.AclentryId, true
}

// HasAclentryId returns a boolean if a field has been set.
func (o *DataInnerDhcpAclentryData) HasAclentryId() bool {
	if o != nil && !IsNil(o.AclentryId) {
		return true
	}

	return false
}

// SetAclentryId gets a reference to the given string and assigns it to the AclentryId field.
func (o *DataInnerDhcpAclentryData) SetAclentryId(v string) {
	o.AclentryId = &v
}

// GetAclentryLeaselimit returns the AclentryLeaselimit field value if set, zero value otherwise.
func (o *DataInnerDhcpAclentryData) GetAclentryLeaselimit() string {
	if o == nil || IsNil(o.AclentryLeaselimit) {
		var ret string
		return ret
	}
	return *o.AclentryLeaselimit
}

// GetAclentryLeaselimitOk returns a tuple with the AclentryLeaselimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpAclentryData) GetAclentryLeaselimitOk() (*string, bool) {
	if o == nil || IsNil(o.AclentryLeaselimit) {
		return nil, false
	}
	return o.AclentryLeaselimit, true
}

// HasAclentryLeaselimit returns a boolean if a field has been set.
func (o *DataInnerDhcpAclentryData) HasAclentryLeaselimit() bool {
	if o != nil && !IsNil(o.AclentryLeaselimit) {
		return true
	}

	return false
}

// SetAclentryLeaselimit gets a reference to the given string and assigns it to the AclentryLeaselimit field.
func (o *DataInnerDhcpAclentryData) SetAclentryLeaselimit(v string) {
	o.AclentryLeaselimit = &v
}

// GetAclentryValue returns the AclentryValue field value if set, zero value otherwise.
func (o *DataInnerDhcpAclentryData) GetAclentryValue() string {
	if o == nil || IsNil(o.AclentryValue) {
		var ret string
		return ret
	}
	return *o.AclentryValue
}

// GetAclentryValueOk returns a tuple with the AclentryValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpAclentryData) GetAclentryValueOk() (*string, bool) {
	if o == nil || IsNil(o.AclentryValue) {
		return nil, false
	}
	return o.AclentryValue, true
}

// HasAclentryValue returns a boolean if a field has been set.
func (o *DataInnerDhcpAclentryData) HasAclentryValue() bool {
	if o != nil && !IsNil(o.AclentryValue) {
		return true
	}

	return false
}

// SetAclentryValue gets a reference to the given string and assigns it to the AclentryValue field.
func (o *DataInnerDhcpAclentryData) SetAclentryValue(v string) {
	o.AclentryValue = &v
}

// GetSmartParentId returns the SmartParentId field value if set, zero value otherwise.
func (o *DataInnerDhcpAclentryData) GetSmartParentId() string {
	if o == nil || IsNil(o.SmartParentId) {
		var ret string
		return ret
	}
	return *o.SmartParentId
}

// GetSmartParentIdOk returns a tuple with the SmartParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpAclentryData) GetSmartParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.SmartParentId) {
		return nil, false
	}
	return o.SmartParentId, true
}

// HasSmartParentId returns a boolean if a field has been set.
func (o *DataInnerDhcpAclentryData) HasSmartParentId() bool {
	if o != nil && !IsNil(o.SmartParentId) {
		return true
	}

	return false
}

// SetSmartParentId gets a reference to the given string and assigns it to the SmartParentId field.
func (o *DataInnerDhcpAclentryData) SetSmartParentId(v string) {
	o.SmartParentId = &v
}

func (o DataInnerDhcpAclentryData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataInnerDhcpAclentryData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ServerClusterRole) {
		toSerialize["server_cluster_role"] = o.ServerClusterRole
	}
	if !IsNil(o.AclentryDelayedCreateTime) {
		toSerialize["aclentry_delayed_create_time"] = o.AclentryDelayedCreateTime
	}
	if !IsNil(o.AclentryDelayedDeleteTime) {
		toSerialize["aclentry_delayed_delete_time"] = o.AclentryDelayedDeleteTime
	}
	if !IsNil(o.ServerId) {
		toSerialize["server_id"] = o.ServerId
	}
	if !IsNil(o.ServerName) {
		toSerialize["server_name"] = o.ServerName
	}
	if !IsNil(o.ServerType) {
		toSerialize["server_type"] = o.ServerType
	}
	if !IsNil(o.AclId) {
		toSerialize["acl_id"] = o.AclId
	}
	if !IsNil(o.AclName) {
		toSerialize["acl_name"] = o.AclName
	}
	if !IsNil(o.AclentryId) {
		toSerialize["aclentry_id"] = o.AclentryId
	}
	if !IsNil(o.AclentryLeaselimit) {
		toSerialize["aclentry_leaselimit"] = o.AclentryLeaselimit
	}
	if !IsNil(o.AclentryValue) {
		toSerialize["aclentry_value"] = o.AclentryValue
	}
	if !IsNil(o.SmartParentId) {
		toSerialize["smart_parent_id"] = o.SmartParentId
	}
	return toSerialize, nil
}

type NullableDataInnerDhcpAclentryData struct {
	value *DataInnerDhcpAclentryData
	isSet bool
}

func (v NullableDataInnerDhcpAclentryData) Get() *DataInnerDhcpAclentryData {
	return v.value
}

func (v *NullableDataInnerDhcpAclentryData) Set(val *DataInnerDhcpAclentryData) {
	v.value = val
	v.isSet = true
}

func (v NullableDataInnerDhcpAclentryData) IsSet() bool {
	return v.isSet
}

func (v *NullableDataInnerDhcpAclentryData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataInnerDhcpAclentryData(val *DataInnerDhcpAclentryData) *NullableDataInnerDhcpAclentryData {
	return &NullableDataInnerDhcpAclentryData{value: val, isSet: true}
}

func (v NullableDataInnerDhcpAclentryData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataInnerDhcpAclentryData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
