/*
 * SOLIDserver API
 *
 * OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2021 EfficientIP</p><p><em>All specifications and information regarding the products in  this document are subject to change without notice and should not be  construed as a commitment by EfficientIP. EfficientIP assumes no  responsibility or liability for any mistakes or inaccuracies that may appear  in this document. All statements and recommendations in this document are  believed to be accurate but are presented without warranty. Users must take  full responsibility for their application of any product.</em></p><p>Generated (Monday 14th of June 2021 12:30:34 PM)</p>
 *
 * API version: 2.0
 * Contact: support-api@efficientip.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// DhcpScopeDataData struct for DhcpScopeDataData
type DhcpScopeDataData struct {
	// The delay of creation status. <b>1</b> indicates that the object is not created yet.
	ScopeDelayedCreateTime *string `json:"scope_delayed_create_time,omitempty"`
	// The delay of deletion status. <b>1</b> indicates that the object is not deleted yet.
	ScopeDelayedDeleteTime *string `json:"scope_delayed_delete_time,omitempty"`
	// The name of the class applied to the DHCPv4 server the object belongs to, it can be preceded by the class directory.
	ServerClassName *string `json:"server_class_name,omitempty"`
	// #general.output.class_parameters#
	ServerClassParameters *[]ApiClassParameterOutputEntry `json:"server_class_parameters,omitempty"`
	// The database identifier (ID) of the DHCPv4 server the object belongs to.
	ServerId *string `json:"server_id,omitempty"`
	// The name of the DHCPv4 server the object belongs to.
	ServerName *string `json:"server_name,omitempty"`
	// The type of the DHCPv4 server the object belongs to: <table><caption>dhcp_type possible values</caption><br/><thead><tr><th>Type</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >ipm</td><td >EfficientIP DHCP server or EfficientIP DHCP Package</td></tr><tr><td >msrpc</td><td >Microsoft DHCP server</td></tr><tr><td >dcs</td><td >Nominum DCS server</td></tr><tr><td >vdhcp</td><td >EfficientIP DHCP smart architecture</td></tr></tbody></table></p><br/>
	ServerType *string `json:"server_type,omitempty"`
	// The version details of the DHCPv4 server the object belongs to.
	ServerVersion *string `json:"server_version,omitempty"`
	// The database identifier (ID) of the DHCPv4 failover channel associated with the object.
	FailoverId *string `json:"failover_id,omitempty"`
	// The name of the DHCPv4 failover channel associated with the object.
	FailoverName *string `json:"failover_name,omitempty"`
	// The name of the class applied to the DHCPv4 scope, it can be preceded by the class directory.
	ScopeClassName *string `json:"scope_class_name,omitempty"`
	// #general.output.class_parameters#
	ScopeClassParameters *[]ApiClassParameterOutputEntry `json:"scope_class_parameters,omitempty"`
	// The last IP address of the DHCPv4 scope, in hexadecimal format.
	ScopeEndAddressAddr *string `json:"scope_end_address_addr,omitempty"`
	// The database identifier (ID) of the DHCPv4 scope.
	ScopeId *string `json:"scope_id,omitempty"`
	// The name of the DHCPv4 scope.
	ScopeName *string `json:"scope_name,omitempty"`
	// The first IP address of the DHCPv4 scope.
	ScopeNetAddr *string `json:"scope_net_addr,omitempty"`
	// The netmask of the DHCPv4 scope. It is expressed in dot-decimal notation and defines the number of addresses the scope contains.
	ScopeNetMask *string `json:"scope_net_mask,omitempty"`
	// The database identifier (ID) of the space associated with the DHCPv4 scope.
	ScopeSpaceId *string `json:"scope_space_id,omitempty"`
	// The name of the space associated with the DHCPv4 scope.
	ScopeSpaceName *string `json:"scope_space_name,omitempty"`
	// The number of IP addresses the DHCPv4 scope contains.
	ScopeSize *string `json:"scope_size,omitempty"`
	// The first IP address of the DHCPv4 scope, in hexadecimal format.
	ScopeStartAddressAddr *string `json:"scope_start_address_addr,omitempty"`
	// The database identifier (ID) of the DHCPv4 shared network the object belongs to.
	SharednetworkId *string `json:"sharednetwork_id,omitempty"`
	// The name of the DHCPv4 shared network the object belongs to.
	SharednetworkName *string `json:"sharednetwork_name,omitempty"`
	// The IP address of the DHCP server the object belongs to, in hexadecimal format.
	ServerAddr *string `json:"server_addr,omitempty"`
	// The Multi-status information is displayed as follows: <i>&lt;number-of-instances&gt;@&lt;message-number&gt;@&lt;multi-status-severity&gt;@&lt;module&gt;</i>. The different severity levels are:<br><b>Multi-status severity levels</b>    <table border=1>        <thead>        <tr >            <td><b>Message number</b></td>            <td><b>Severity</b></td>            <td><b>Description</b></td>        </tr>        </thead>        <tbody>        <tr  valign=middle>            <td>0 - 16</td>            <td>Emergency</td>            <td>The object configuration prevents the system from running properly. Action is required.</td>        </tr>        <tr  valign=middle>            <td>17 - 33</td>            <td>Critical</td>            <td>The object configuration is in critical conditions. Immediate action is recommended.</td>        </tr>        <tr  valign=middle>            <td>34 - 50</td>            <td>Error</td>            <td>The object configuration failed at some level. Action is recommended.</td>        </tr>        <tr  valign=middle>            <td>51 - 66</td>            <td>Warning</td>            <td>The object configuration triggers error messages if no action is taken. Action to be taken at your discretion.</td>        </tr>        <tr  valign=middle>            <td>67 - 83</td>            <td>Notice</td>            <td>The object configuration is normal but undergoing events that might trigger errors. No immediate action required.</td>        </tr>        <tr  valign=middle>            <td>84 - 100</td>            <td>Informational</td>            <td>The object configuration is normal, operational messages (might inform you about potential incompatibilities with other modules, etc). No action required.</td>        </tr>        </tbody></table>
	ScopeMultistatus *string `json:"scope_multistatus,omitempty"`
	// The type of the DHCPv4 smart architecture the object belongs to.<table><caption>vdhcp_arch possible values</caption><br/><thead><tr><th>Type</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >masterslave</td><td >The One-to-One smart architecture sets a pair of DHCP servers in a Master/Backup configuration.</td></tr><tr><td >star</td><td >The One-to-Many smart architecture sets a multi-site failover configuration at the cost of n-servers+1.</td></tr><tr><td >splitscope</td><td >The Split-Scope smart architecture sets a pair of DHCP servers in a configuration where the two scopes listen to the same subnet, but the range of addresses is divided.</td></tr><tr><td >single</td><td >The Single-Server smart architecture manages a single DHCP server.</td></tr></tbody></table></p><br/>
	SmartArch *string `json:"smart_arch,omitempty"`
	// The database identifier (ID) of the DHCPv4 smart architecture managing the DHCPv4 server the object belongs to. <b>0</b> indicates that the server the object belongs to is not managed by a smart architecture or is a smart architecture itself.
	SmartParentId *string `json:"smart_parent_id,omitempty"`
	// The name of the DHCPv4 smart architecture managing the DHCPv4 server the object belongs to. <b>#</b> indicates that the server is not managed by a smart architecture or is a smart architecture itself.
	SmartParentName *string `json:"smart_parent_name,omitempty"`
}

// NewDhcpScopeDataData instantiates a new DhcpScopeDataData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDhcpScopeDataData() *DhcpScopeDataData {
	this := DhcpScopeDataData{}
	return &this
}

// NewDhcpScopeDataDataWithDefaults instantiates a new DhcpScopeDataData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDhcpScopeDataDataWithDefaults() *DhcpScopeDataData {
	this := DhcpScopeDataData{}
	return &this
}

// GetScopeDelayedCreateTime returns the ScopeDelayedCreateTime field value if set, zero value otherwise.
func (o *DhcpScopeDataData) GetScopeDelayedCreateTime() string {
	if o == nil || o.ScopeDelayedCreateTime == nil {
		var ret string
		return ret
	}
	return *o.ScopeDelayedCreateTime
}

// GetScopeDelayedCreateTimeOk returns a tuple with the ScopeDelayedCreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeDataData) GetScopeDelayedCreateTimeOk() (*string, bool) {
	if o == nil || o.ScopeDelayedCreateTime == nil {
		return nil, false
	}
	return o.ScopeDelayedCreateTime, true
}

// HasScopeDelayedCreateTime returns a boolean if a field has been set.
func (o *DhcpScopeDataData) HasScopeDelayedCreateTime() bool {
	if o != nil && o.ScopeDelayedCreateTime != nil {
		return true
	}

	return false
}

// SetScopeDelayedCreateTime gets a reference to the given string and assigns it to the ScopeDelayedCreateTime field.
func (o *DhcpScopeDataData) SetScopeDelayedCreateTime(v string) {
	o.ScopeDelayedCreateTime = &v
}

// GetScopeDelayedDeleteTime returns the ScopeDelayedDeleteTime field value if set, zero value otherwise.
func (o *DhcpScopeDataData) GetScopeDelayedDeleteTime() string {
	if o == nil || o.ScopeDelayedDeleteTime == nil {
		var ret string
		return ret
	}
	return *o.ScopeDelayedDeleteTime
}

// GetScopeDelayedDeleteTimeOk returns a tuple with the ScopeDelayedDeleteTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeDataData) GetScopeDelayedDeleteTimeOk() (*string, bool) {
	if o == nil || o.ScopeDelayedDeleteTime == nil {
		return nil, false
	}
	return o.ScopeDelayedDeleteTime, true
}

// HasScopeDelayedDeleteTime returns a boolean if a field has been set.
func (o *DhcpScopeDataData) HasScopeDelayedDeleteTime() bool {
	if o != nil && o.ScopeDelayedDeleteTime != nil {
		return true
	}

	return false
}

// SetScopeDelayedDeleteTime gets a reference to the given string and assigns it to the ScopeDelayedDeleteTime field.
func (o *DhcpScopeDataData) SetScopeDelayedDeleteTime(v string) {
	o.ScopeDelayedDeleteTime = &v
}

// GetServerClassName returns the ServerClassName field value if set, zero value otherwise.
func (o *DhcpScopeDataData) GetServerClassName() string {
	if o == nil || o.ServerClassName == nil {
		var ret string
		return ret
	}
	return *o.ServerClassName
}

// GetServerClassNameOk returns a tuple with the ServerClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeDataData) GetServerClassNameOk() (*string, bool) {
	if o == nil || o.ServerClassName == nil {
		return nil, false
	}
	return o.ServerClassName, true
}

// HasServerClassName returns a boolean if a field has been set.
func (o *DhcpScopeDataData) HasServerClassName() bool {
	if o != nil && o.ServerClassName != nil {
		return true
	}

	return false
}

// SetServerClassName gets a reference to the given string and assigns it to the ServerClassName field.
func (o *DhcpScopeDataData) SetServerClassName(v string) {
	o.ServerClassName = &v
}

// GetServerClassParameters returns the ServerClassParameters field value if set, zero value otherwise.
func (o *DhcpScopeDataData) GetServerClassParameters() []ApiClassParameterOutputEntry {
	if o == nil || o.ServerClassParameters == nil {
		var ret []ApiClassParameterOutputEntry
		return ret
	}
	return *o.ServerClassParameters
}

// GetServerClassParametersOk returns a tuple with the ServerClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeDataData) GetServerClassParametersOk() (*[]ApiClassParameterOutputEntry, bool) {
	if o == nil || o.ServerClassParameters == nil {
		return nil, false
	}
	return o.ServerClassParameters, true
}

// HasServerClassParameters returns a boolean if a field has been set.
func (o *DhcpScopeDataData) HasServerClassParameters() bool {
	if o != nil && o.ServerClassParameters != nil {
		return true
	}

	return false
}

// SetServerClassParameters gets a reference to the given []ApiClassParameterOutputEntry and assigns it to the ServerClassParameters field.
func (o *DhcpScopeDataData) SetServerClassParameters(v []ApiClassParameterOutputEntry) {
	o.ServerClassParameters = &v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *DhcpScopeDataData) GetServerId() string {
	if o == nil || o.ServerId == nil {
		var ret string
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeDataData) GetServerIdOk() (*string, bool) {
	if o == nil || o.ServerId == nil {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *DhcpScopeDataData) HasServerId() bool {
	if o != nil && o.ServerId != nil {
		return true
	}

	return false
}

// SetServerId gets a reference to the given string and assigns it to the ServerId field.
func (o *DhcpScopeDataData) SetServerId(v string) {
	o.ServerId = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *DhcpScopeDataData) GetServerName() string {
	if o == nil || o.ServerName == nil {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeDataData) GetServerNameOk() (*string, bool) {
	if o == nil || o.ServerName == nil {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *DhcpScopeDataData) HasServerName() bool {
	if o != nil && o.ServerName != nil {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *DhcpScopeDataData) SetServerName(v string) {
	o.ServerName = &v
}

// GetServerType returns the ServerType field value if set, zero value otherwise.
func (o *DhcpScopeDataData) GetServerType() string {
	if o == nil || o.ServerType == nil {
		var ret string
		return ret
	}
	return *o.ServerType
}

// GetServerTypeOk returns a tuple with the ServerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeDataData) GetServerTypeOk() (*string, bool) {
	if o == nil || o.ServerType == nil {
		return nil, false
	}
	return o.ServerType, true
}

// HasServerType returns a boolean if a field has been set.
func (o *DhcpScopeDataData) HasServerType() bool {
	if o != nil && o.ServerType != nil {
		return true
	}

	return false
}

// SetServerType gets a reference to the given string and assigns it to the ServerType field.
func (o *DhcpScopeDataData) SetServerType(v string) {
	o.ServerType = &v
}

// GetServerVersion returns the ServerVersion field value if set, zero value otherwise.
func (o *DhcpScopeDataData) GetServerVersion() string {
	if o == nil || o.ServerVersion == nil {
		var ret string
		return ret
	}
	return *o.ServerVersion
}

// GetServerVersionOk returns a tuple with the ServerVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeDataData) GetServerVersionOk() (*string, bool) {
	if o == nil || o.ServerVersion == nil {
		return nil, false
	}
	return o.ServerVersion, true
}

// HasServerVersion returns a boolean if a field has been set.
func (o *DhcpScopeDataData) HasServerVersion() bool {
	if o != nil && o.ServerVersion != nil {
		return true
	}

	return false
}

// SetServerVersion gets a reference to the given string and assigns it to the ServerVersion field.
func (o *DhcpScopeDataData) SetServerVersion(v string) {
	o.ServerVersion = &v
}

// GetFailoverId returns the FailoverId field value if set, zero value otherwise.
func (o *DhcpScopeDataData) GetFailoverId() string {
	if o == nil || o.FailoverId == nil {
		var ret string
		return ret
	}
	return *o.FailoverId
}

// GetFailoverIdOk returns a tuple with the FailoverId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeDataData) GetFailoverIdOk() (*string, bool) {
	if o == nil || o.FailoverId == nil {
		return nil, false
	}
	return o.FailoverId, true
}

// HasFailoverId returns a boolean if a field has been set.
func (o *DhcpScopeDataData) HasFailoverId() bool {
	if o != nil && o.FailoverId != nil {
		return true
	}

	return false
}

// SetFailoverId gets a reference to the given string and assigns it to the FailoverId field.
func (o *DhcpScopeDataData) SetFailoverId(v string) {
	o.FailoverId = &v
}

// GetFailoverName returns the FailoverName field value if set, zero value otherwise.
func (o *DhcpScopeDataData) GetFailoverName() string {
	if o == nil || o.FailoverName == nil {
		var ret string
		return ret
	}
	return *o.FailoverName
}

// GetFailoverNameOk returns a tuple with the FailoverName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeDataData) GetFailoverNameOk() (*string, bool) {
	if o == nil || o.FailoverName == nil {
		return nil, false
	}
	return o.FailoverName, true
}

// HasFailoverName returns a boolean if a field has been set.
func (o *DhcpScopeDataData) HasFailoverName() bool {
	if o != nil && o.FailoverName != nil {
		return true
	}

	return false
}

// SetFailoverName gets a reference to the given string and assigns it to the FailoverName field.
func (o *DhcpScopeDataData) SetFailoverName(v string) {
	o.FailoverName = &v
}

// GetScopeClassName returns the ScopeClassName field value if set, zero value otherwise.
func (o *DhcpScopeDataData) GetScopeClassName() string {
	if o == nil || o.ScopeClassName == nil {
		var ret string
		return ret
	}
	return *o.ScopeClassName
}

// GetScopeClassNameOk returns a tuple with the ScopeClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeDataData) GetScopeClassNameOk() (*string, bool) {
	if o == nil || o.ScopeClassName == nil {
		return nil, false
	}
	return o.ScopeClassName, true
}

// HasScopeClassName returns a boolean if a field has been set.
func (o *DhcpScopeDataData) HasScopeClassName() bool {
	if o != nil && o.ScopeClassName != nil {
		return true
	}

	return false
}

// SetScopeClassName gets a reference to the given string and assigns it to the ScopeClassName field.
func (o *DhcpScopeDataData) SetScopeClassName(v string) {
	o.ScopeClassName = &v
}

// GetScopeClassParameters returns the ScopeClassParameters field value if set, zero value otherwise.
func (o *DhcpScopeDataData) GetScopeClassParameters() []ApiClassParameterOutputEntry {
	if o == nil || o.ScopeClassParameters == nil {
		var ret []ApiClassParameterOutputEntry
		return ret
	}
	return *o.ScopeClassParameters
}

// GetScopeClassParametersOk returns a tuple with the ScopeClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeDataData) GetScopeClassParametersOk() (*[]ApiClassParameterOutputEntry, bool) {
	if o == nil || o.ScopeClassParameters == nil {
		return nil, false
	}
	return o.ScopeClassParameters, true
}

// HasScopeClassParameters returns a boolean if a field has been set.
func (o *DhcpScopeDataData) HasScopeClassParameters() bool {
	if o != nil && o.ScopeClassParameters != nil {
		return true
	}

	return false
}

// SetScopeClassParameters gets a reference to the given []ApiClassParameterOutputEntry and assigns it to the ScopeClassParameters field.
func (o *DhcpScopeDataData) SetScopeClassParameters(v []ApiClassParameterOutputEntry) {
	o.ScopeClassParameters = &v
}

// GetScopeEndAddressAddr returns the ScopeEndAddressAddr field value if set, zero value otherwise.
func (o *DhcpScopeDataData) GetScopeEndAddressAddr() string {
	if o == nil || o.ScopeEndAddressAddr == nil {
		var ret string
		return ret
	}
	return *o.ScopeEndAddressAddr
}

// GetScopeEndAddressAddrOk returns a tuple with the ScopeEndAddressAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeDataData) GetScopeEndAddressAddrOk() (*string, bool) {
	if o == nil || o.ScopeEndAddressAddr == nil {
		return nil, false
	}
	return o.ScopeEndAddressAddr, true
}

// HasScopeEndAddressAddr returns a boolean if a field has been set.
func (o *DhcpScopeDataData) HasScopeEndAddressAddr() bool {
	if o != nil && o.ScopeEndAddressAddr != nil {
		return true
	}

	return false
}

// SetScopeEndAddressAddr gets a reference to the given string and assigns it to the ScopeEndAddressAddr field.
func (o *DhcpScopeDataData) SetScopeEndAddressAddr(v string) {
	o.ScopeEndAddressAddr = &v
}

// GetScopeId returns the ScopeId field value if set, zero value otherwise.
func (o *DhcpScopeDataData) GetScopeId() string {
	if o == nil || o.ScopeId == nil {
		var ret string
		return ret
	}
	return *o.ScopeId
}

// GetScopeIdOk returns a tuple with the ScopeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeDataData) GetScopeIdOk() (*string, bool) {
	if o == nil || o.ScopeId == nil {
		return nil, false
	}
	return o.ScopeId, true
}

// HasScopeId returns a boolean if a field has been set.
func (o *DhcpScopeDataData) HasScopeId() bool {
	if o != nil && o.ScopeId != nil {
		return true
	}

	return false
}

// SetScopeId gets a reference to the given string and assigns it to the ScopeId field.
func (o *DhcpScopeDataData) SetScopeId(v string) {
	o.ScopeId = &v
}

// GetScopeName returns the ScopeName field value if set, zero value otherwise.
func (o *DhcpScopeDataData) GetScopeName() string {
	if o == nil || o.ScopeName == nil {
		var ret string
		return ret
	}
	return *o.ScopeName
}

// GetScopeNameOk returns a tuple with the ScopeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeDataData) GetScopeNameOk() (*string, bool) {
	if o == nil || o.ScopeName == nil {
		return nil, false
	}
	return o.ScopeName, true
}

// HasScopeName returns a boolean if a field has been set.
func (o *DhcpScopeDataData) HasScopeName() bool {
	if o != nil && o.ScopeName != nil {
		return true
	}

	return false
}

// SetScopeName gets a reference to the given string and assigns it to the ScopeName field.
func (o *DhcpScopeDataData) SetScopeName(v string) {
	o.ScopeName = &v
}

// GetScopeNetAddr returns the ScopeNetAddr field value if set, zero value otherwise.
func (o *DhcpScopeDataData) GetScopeNetAddr() string {
	if o == nil || o.ScopeNetAddr == nil {
		var ret string
		return ret
	}
	return *o.ScopeNetAddr
}

// GetScopeNetAddrOk returns a tuple with the ScopeNetAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeDataData) GetScopeNetAddrOk() (*string, bool) {
	if o == nil || o.ScopeNetAddr == nil {
		return nil, false
	}
	return o.ScopeNetAddr, true
}

// HasScopeNetAddr returns a boolean if a field has been set.
func (o *DhcpScopeDataData) HasScopeNetAddr() bool {
	if o != nil && o.ScopeNetAddr != nil {
		return true
	}

	return false
}

// SetScopeNetAddr gets a reference to the given string and assigns it to the ScopeNetAddr field.
func (o *DhcpScopeDataData) SetScopeNetAddr(v string) {
	o.ScopeNetAddr = &v
}

// GetScopeNetMask returns the ScopeNetMask field value if set, zero value otherwise.
func (o *DhcpScopeDataData) GetScopeNetMask() string {
	if o == nil || o.ScopeNetMask == nil {
		var ret string
		return ret
	}
	return *o.ScopeNetMask
}

// GetScopeNetMaskOk returns a tuple with the ScopeNetMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeDataData) GetScopeNetMaskOk() (*string, bool) {
	if o == nil || o.ScopeNetMask == nil {
		return nil, false
	}
	return o.ScopeNetMask, true
}

// HasScopeNetMask returns a boolean if a field has been set.
func (o *DhcpScopeDataData) HasScopeNetMask() bool {
	if o != nil && o.ScopeNetMask != nil {
		return true
	}

	return false
}

// SetScopeNetMask gets a reference to the given string and assigns it to the ScopeNetMask field.
func (o *DhcpScopeDataData) SetScopeNetMask(v string) {
	o.ScopeNetMask = &v
}

// GetScopeSpaceId returns the ScopeSpaceId field value if set, zero value otherwise.
func (o *DhcpScopeDataData) GetScopeSpaceId() string {
	if o == nil || o.ScopeSpaceId == nil {
		var ret string
		return ret
	}
	return *o.ScopeSpaceId
}

// GetScopeSpaceIdOk returns a tuple with the ScopeSpaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeDataData) GetScopeSpaceIdOk() (*string, bool) {
	if o == nil || o.ScopeSpaceId == nil {
		return nil, false
	}
	return o.ScopeSpaceId, true
}

// HasScopeSpaceId returns a boolean if a field has been set.
func (o *DhcpScopeDataData) HasScopeSpaceId() bool {
	if o != nil && o.ScopeSpaceId != nil {
		return true
	}

	return false
}

// SetScopeSpaceId gets a reference to the given string and assigns it to the ScopeSpaceId field.
func (o *DhcpScopeDataData) SetScopeSpaceId(v string) {
	o.ScopeSpaceId = &v
}

// GetScopeSpaceName returns the ScopeSpaceName field value if set, zero value otherwise.
func (o *DhcpScopeDataData) GetScopeSpaceName() string {
	if o == nil || o.ScopeSpaceName == nil {
		var ret string
		return ret
	}
	return *o.ScopeSpaceName
}

// GetScopeSpaceNameOk returns a tuple with the ScopeSpaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeDataData) GetScopeSpaceNameOk() (*string, bool) {
	if o == nil || o.ScopeSpaceName == nil {
		return nil, false
	}
	return o.ScopeSpaceName, true
}

// HasScopeSpaceName returns a boolean if a field has been set.
func (o *DhcpScopeDataData) HasScopeSpaceName() bool {
	if o != nil && o.ScopeSpaceName != nil {
		return true
	}

	return false
}

// SetScopeSpaceName gets a reference to the given string and assigns it to the ScopeSpaceName field.
func (o *DhcpScopeDataData) SetScopeSpaceName(v string) {
	o.ScopeSpaceName = &v
}

// GetScopeSize returns the ScopeSize field value if set, zero value otherwise.
func (o *DhcpScopeDataData) GetScopeSize() string {
	if o == nil || o.ScopeSize == nil {
		var ret string
		return ret
	}
	return *o.ScopeSize
}

// GetScopeSizeOk returns a tuple with the ScopeSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeDataData) GetScopeSizeOk() (*string, bool) {
	if o == nil || o.ScopeSize == nil {
		return nil, false
	}
	return o.ScopeSize, true
}

// HasScopeSize returns a boolean if a field has been set.
func (o *DhcpScopeDataData) HasScopeSize() bool {
	if o != nil && o.ScopeSize != nil {
		return true
	}

	return false
}

// SetScopeSize gets a reference to the given string and assigns it to the ScopeSize field.
func (o *DhcpScopeDataData) SetScopeSize(v string) {
	o.ScopeSize = &v
}

// GetScopeStartAddressAddr returns the ScopeStartAddressAddr field value if set, zero value otherwise.
func (o *DhcpScopeDataData) GetScopeStartAddressAddr() string {
	if o == nil || o.ScopeStartAddressAddr == nil {
		var ret string
		return ret
	}
	return *o.ScopeStartAddressAddr
}

// GetScopeStartAddressAddrOk returns a tuple with the ScopeStartAddressAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeDataData) GetScopeStartAddressAddrOk() (*string, bool) {
	if o == nil || o.ScopeStartAddressAddr == nil {
		return nil, false
	}
	return o.ScopeStartAddressAddr, true
}

// HasScopeStartAddressAddr returns a boolean if a field has been set.
func (o *DhcpScopeDataData) HasScopeStartAddressAddr() bool {
	if o != nil && o.ScopeStartAddressAddr != nil {
		return true
	}

	return false
}

// SetScopeStartAddressAddr gets a reference to the given string and assigns it to the ScopeStartAddressAddr field.
func (o *DhcpScopeDataData) SetScopeStartAddressAddr(v string) {
	o.ScopeStartAddressAddr = &v
}

// GetSharednetworkId returns the SharednetworkId field value if set, zero value otherwise.
func (o *DhcpScopeDataData) GetSharednetworkId() string {
	if o == nil || o.SharednetworkId == nil {
		var ret string
		return ret
	}
	return *o.SharednetworkId
}

// GetSharednetworkIdOk returns a tuple with the SharednetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeDataData) GetSharednetworkIdOk() (*string, bool) {
	if o == nil || o.SharednetworkId == nil {
		return nil, false
	}
	return o.SharednetworkId, true
}

// HasSharednetworkId returns a boolean if a field has been set.
func (o *DhcpScopeDataData) HasSharednetworkId() bool {
	if o != nil && o.SharednetworkId != nil {
		return true
	}

	return false
}

// SetSharednetworkId gets a reference to the given string and assigns it to the SharednetworkId field.
func (o *DhcpScopeDataData) SetSharednetworkId(v string) {
	o.SharednetworkId = &v
}

// GetSharednetworkName returns the SharednetworkName field value if set, zero value otherwise.
func (o *DhcpScopeDataData) GetSharednetworkName() string {
	if o == nil || o.SharednetworkName == nil {
		var ret string
		return ret
	}
	return *o.SharednetworkName
}

// GetSharednetworkNameOk returns a tuple with the SharednetworkName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeDataData) GetSharednetworkNameOk() (*string, bool) {
	if o == nil || o.SharednetworkName == nil {
		return nil, false
	}
	return o.SharednetworkName, true
}

// HasSharednetworkName returns a boolean if a field has been set.
func (o *DhcpScopeDataData) HasSharednetworkName() bool {
	if o != nil && o.SharednetworkName != nil {
		return true
	}

	return false
}

// SetSharednetworkName gets a reference to the given string and assigns it to the SharednetworkName field.
func (o *DhcpScopeDataData) SetSharednetworkName(v string) {
	o.SharednetworkName = &v
}

// GetServerAddr returns the ServerAddr field value if set, zero value otherwise.
func (o *DhcpScopeDataData) GetServerAddr() string {
	if o == nil || o.ServerAddr == nil {
		var ret string
		return ret
	}
	return *o.ServerAddr
}

// GetServerAddrOk returns a tuple with the ServerAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeDataData) GetServerAddrOk() (*string, bool) {
	if o == nil || o.ServerAddr == nil {
		return nil, false
	}
	return o.ServerAddr, true
}

// HasServerAddr returns a boolean if a field has been set.
func (o *DhcpScopeDataData) HasServerAddr() bool {
	if o != nil && o.ServerAddr != nil {
		return true
	}

	return false
}

// SetServerAddr gets a reference to the given string and assigns it to the ServerAddr field.
func (o *DhcpScopeDataData) SetServerAddr(v string) {
	o.ServerAddr = &v
}

// GetScopeMultistatus returns the ScopeMultistatus field value if set, zero value otherwise.
func (o *DhcpScopeDataData) GetScopeMultistatus() string {
	if o == nil || o.ScopeMultistatus == nil {
		var ret string
		return ret
	}
	return *o.ScopeMultistatus
}

// GetScopeMultistatusOk returns a tuple with the ScopeMultistatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeDataData) GetScopeMultistatusOk() (*string, bool) {
	if o == nil || o.ScopeMultistatus == nil {
		return nil, false
	}
	return o.ScopeMultistatus, true
}

// HasScopeMultistatus returns a boolean if a field has been set.
func (o *DhcpScopeDataData) HasScopeMultistatus() bool {
	if o != nil && o.ScopeMultistatus != nil {
		return true
	}

	return false
}

// SetScopeMultistatus gets a reference to the given string and assigns it to the ScopeMultistatus field.
func (o *DhcpScopeDataData) SetScopeMultistatus(v string) {
	o.ScopeMultistatus = &v
}

// GetSmartArch returns the SmartArch field value if set, zero value otherwise.
func (o *DhcpScopeDataData) GetSmartArch() string {
	if o == nil || o.SmartArch == nil {
		var ret string
		return ret
	}
	return *o.SmartArch
}

// GetSmartArchOk returns a tuple with the SmartArch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeDataData) GetSmartArchOk() (*string, bool) {
	if o == nil || o.SmartArch == nil {
		return nil, false
	}
	return o.SmartArch, true
}

// HasSmartArch returns a boolean if a field has been set.
func (o *DhcpScopeDataData) HasSmartArch() bool {
	if o != nil && o.SmartArch != nil {
		return true
	}

	return false
}

// SetSmartArch gets a reference to the given string and assigns it to the SmartArch field.
func (o *DhcpScopeDataData) SetSmartArch(v string) {
	o.SmartArch = &v
}

// GetSmartParentId returns the SmartParentId field value if set, zero value otherwise.
func (o *DhcpScopeDataData) GetSmartParentId() string {
	if o == nil || o.SmartParentId == nil {
		var ret string
		return ret
	}
	return *o.SmartParentId
}

// GetSmartParentIdOk returns a tuple with the SmartParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeDataData) GetSmartParentIdOk() (*string, bool) {
	if o == nil || o.SmartParentId == nil {
		return nil, false
	}
	return o.SmartParentId, true
}

// HasSmartParentId returns a boolean if a field has been set.
func (o *DhcpScopeDataData) HasSmartParentId() bool {
	if o != nil && o.SmartParentId != nil {
		return true
	}

	return false
}

// SetSmartParentId gets a reference to the given string and assigns it to the SmartParentId field.
func (o *DhcpScopeDataData) SetSmartParentId(v string) {
	o.SmartParentId = &v
}

// GetSmartParentName returns the SmartParentName field value if set, zero value otherwise.
func (o *DhcpScopeDataData) GetSmartParentName() string {
	if o == nil || o.SmartParentName == nil {
		var ret string
		return ret
	}
	return *o.SmartParentName
}

// GetSmartParentNameOk returns a tuple with the SmartParentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeDataData) GetSmartParentNameOk() (*string, bool) {
	if o == nil || o.SmartParentName == nil {
		return nil, false
	}
	return o.SmartParentName, true
}

// HasSmartParentName returns a boolean if a field has been set.
func (o *DhcpScopeDataData) HasSmartParentName() bool {
	if o != nil && o.SmartParentName != nil {
		return true
	}

	return false
}

// SetSmartParentName gets a reference to the given string and assigns it to the SmartParentName field.
func (o *DhcpScopeDataData) SetSmartParentName(v string) {
	o.SmartParentName = &v
}

func (o DhcpScopeDataData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ScopeDelayedCreateTime != nil {
		toSerialize["scope_delayed_create_time"] = o.ScopeDelayedCreateTime
	}
	if o.ScopeDelayedDeleteTime != nil {
		toSerialize["scope_delayed_delete_time"] = o.ScopeDelayedDeleteTime
	}
	if o.ServerClassName != nil {
		toSerialize["server_class_name"] = o.ServerClassName
	}
	if o.ServerClassParameters != nil {
		toSerialize["server_class_parameters"] = o.ServerClassParameters
	}
	if o.ServerId != nil {
		toSerialize["server_id"] = o.ServerId
	}
	if o.ServerName != nil {
		toSerialize["server_name"] = o.ServerName
	}
	if o.ServerType != nil {
		toSerialize["server_type"] = o.ServerType
	}
	if o.ServerVersion != nil {
		toSerialize["server_version"] = o.ServerVersion
	}
	if o.FailoverId != nil {
		toSerialize["failover_id"] = o.FailoverId
	}
	if o.FailoverName != nil {
		toSerialize["failover_name"] = o.FailoverName
	}
	if o.ScopeClassName != nil {
		toSerialize["scope_class_name"] = o.ScopeClassName
	}
	if o.ScopeClassParameters != nil {
		toSerialize["scope_class_parameters"] = o.ScopeClassParameters
	}
	if o.ScopeEndAddressAddr != nil {
		toSerialize["scope_end_address_addr"] = o.ScopeEndAddressAddr
	}
	if o.ScopeId != nil {
		toSerialize["scope_id"] = o.ScopeId
	}
	if o.ScopeName != nil {
		toSerialize["scope_name"] = o.ScopeName
	}
	if o.ScopeNetAddr != nil {
		toSerialize["scope_net_addr"] = o.ScopeNetAddr
	}
	if o.ScopeNetMask != nil {
		toSerialize["scope_net_mask"] = o.ScopeNetMask
	}
	if o.ScopeSpaceId != nil {
		toSerialize["scope_space_id"] = o.ScopeSpaceId
	}
	if o.ScopeSpaceName != nil {
		toSerialize["scope_space_name"] = o.ScopeSpaceName
	}
	if o.ScopeSize != nil {
		toSerialize["scope_size"] = o.ScopeSize
	}
	if o.ScopeStartAddressAddr != nil {
		toSerialize["scope_start_address_addr"] = o.ScopeStartAddressAddr
	}
	if o.SharednetworkId != nil {
		toSerialize["sharednetwork_id"] = o.SharednetworkId
	}
	if o.SharednetworkName != nil {
		toSerialize["sharednetwork_name"] = o.SharednetworkName
	}
	if o.ServerAddr != nil {
		toSerialize["server_addr"] = o.ServerAddr
	}
	if o.ScopeMultistatus != nil {
		toSerialize["scope_multistatus"] = o.ScopeMultistatus
	}
	if o.SmartArch != nil {
		toSerialize["smart_arch"] = o.SmartArch
	}
	if o.SmartParentId != nil {
		toSerialize["smart_parent_id"] = o.SmartParentId
	}
	if o.SmartParentName != nil {
		toSerialize["smart_parent_name"] = o.SmartParentName
	}
	return json.Marshal(toSerialize)
}

type NullableDhcpScopeDataData struct {
	value *DhcpScopeDataData
	isSet bool
}

func (v NullableDhcpScopeDataData) Get() *DhcpScopeDataData {
	return v.value
}

func (v *NullableDhcpScopeDataData) Set(val *DhcpScopeDataData) {
	v.value = val
	v.isSet = true
}

func (v NullableDhcpScopeDataData) IsSet() bool {
	return v.isSet
}

func (v *NullableDhcpScopeDataData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDhcpScopeDataData(val *DhcpScopeDataData) *NullableDhcpScopeDataData {
	return &NullableDhcpScopeDataData{value: val, isSet: true}
}

func (v NullableDhcpScopeDataData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDhcpScopeDataData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


