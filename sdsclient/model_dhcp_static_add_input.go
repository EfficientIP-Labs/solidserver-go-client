/*
SOLIDserver API

OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2024 EfficientIP</p><p><em>All specifications and information regarding the products in this document are subject to change without notice and should not be construed as a commitment by EfficientIP. EfficientIP assumes no responsibility or liability for any mistakes or inaccuracies that may appear in this document. All statements and recommendations in this document are believed to be accurate but are presented without warranty. Users must take full responsibility for their application of any product.</em></p><p><em>This document aims at detailing EfficientIP proprietary solutions. As our solutions rely on several third-party products, created by other companies or organizations, it may redirect readers to third-party websites and documentation for further information. In such a case, EfficientIP cannot be liable or expected to provide said information on products they do maintain or created.</em></p><p>Generated (Friday 4th of October 2024 03:41:11 PM)</p>

API version: 2.0
Contact: support-api@efficientip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// checks if the DhcpStaticAddInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DhcpStaticAddInput{}

// DhcpStaticAddInput struct for DhcpStaticAddInput
type DhcpStaticAddInput struct {
	// The database identifier (ID) of the DHCPv4 server, a unique numeric key value automatically incremented when you add a DHCPv4 server. Use the ID to specify the DHCPv4 server of your choice.
	ServerId *int32 `json:"server_id,omitempty"`
	// The name of the DHCPv4 server.
	ServerName *string `json:"server_name,omitempty"`
	// The IP address associated with the DHCPv4 static.
	StaticAddr *string `json:"static_addr,omitempty"`
	// The host identifier you want to associate with the IPv4 static. An option and value to look for to identify clients and assign them the static, specified as follows: <b>option &lt;option-name&gt; expected value</b>.
	StaticIdentifier *string `json:"static_identifier,omitempty"`
	// The MAC address you want to associate with the IPv4 static, it must include the MAC address type. The address has 7 sections, <b>00:11:22:33:44:55:66</b> , where <b>00</b> indicates the type. For Ethernet, type in <b>01</b>.
	StaticMacAddr *string `json:"static_mac_addr,omitempty"`
	// The IP address of the DHCP server.
	ServerHostaddr *string `json:"server_hostaddr,omitempty"`
	// The database identifier (ID) of the DHCPv4 group, a unique numeric key value automatically incremented when you add a DHCPv4 group. Use the ID to specify the DHCPv4 group of your choice.
	GroupId *int32 `json:"group_id,omitempty"`
	// The name of the DHCPv4 group.
	GroupName *string `json:"group_name,omitempty"`
	// The name of the DHCPv4 static, each DHCPv4 static must have a unique name.
	StaticName *string `json:"static_name,omitempty"`
	// class parameters you want to delete from the object
	ClassParametersToDelete []string `json:"class_parameters_to_delete,omitempty"`
	// The name of the class to apply to the object you are adding. You must specify the class file directory, e.g. <b>my_directory/my_class.class</b> . You cannot use the classes <b>global</b> and <b>default</b>, they are reserved by the system.
	StaticClassName *string `json:"static_class_name,omitempty"`
	// class parameters in json format
	StaticClassParameters []ApiClassParameterInputEntry `json:"static_class_parameters,omitempty"`
	// A way to bypass <b>(accept) </b>any enabled rule that would return warning messages. If the service returns an error message, you cannot bypass the enabled rules.
	Warnings *string `json:"warnings,omitempty"`
}

// NewDhcpStaticAddInput instantiates a new DhcpStaticAddInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDhcpStaticAddInput() *DhcpStaticAddInput {
	this := DhcpStaticAddInput{}
	return &this
}

// NewDhcpStaticAddInputWithDefaults instantiates a new DhcpStaticAddInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDhcpStaticAddInputWithDefaults() *DhcpStaticAddInput {
	this := DhcpStaticAddInput{}
	return &this
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *DhcpStaticAddInput) GetServerId() int32 {
	if o == nil || IsNil(o.ServerId) {
		var ret int32
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticAddInput) GetServerIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ServerId) {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *DhcpStaticAddInput) HasServerId() bool {
	if o != nil && !IsNil(o.ServerId) {
		return true
	}

	return false
}

// SetServerId gets a reference to the given int32 and assigns it to the ServerId field.
func (o *DhcpStaticAddInput) SetServerId(v int32) {
	o.ServerId = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *DhcpStaticAddInput) GetServerName() string {
	if o == nil || IsNil(o.ServerName) {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticAddInput) GetServerNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServerName) {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *DhcpStaticAddInput) HasServerName() bool {
	if o != nil && !IsNil(o.ServerName) {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *DhcpStaticAddInput) SetServerName(v string) {
	o.ServerName = &v
}

// GetStaticAddr returns the StaticAddr field value if set, zero value otherwise.
func (o *DhcpStaticAddInput) GetStaticAddr() string {
	if o == nil || IsNil(o.StaticAddr) {
		var ret string
		return ret
	}
	return *o.StaticAddr
}

// GetStaticAddrOk returns a tuple with the StaticAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticAddInput) GetStaticAddrOk() (*string, bool) {
	if o == nil || IsNil(o.StaticAddr) {
		return nil, false
	}
	return o.StaticAddr, true
}

// HasStaticAddr returns a boolean if a field has been set.
func (o *DhcpStaticAddInput) HasStaticAddr() bool {
	if o != nil && !IsNil(o.StaticAddr) {
		return true
	}

	return false
}

// SetStaticAddr gets a reference to the given string and assigns it to the StaticAddr field.
func (o *DhcpStaticAddInput) SetStaticAddr(v string) {
	o.StaticAddr = &v
}

// GetStaticIdentifier returns the StaticIdentifier field value if set, zero value otherwise.
func (o *DhcpStaticAddInput) GetStaticIdentifier() string {
	if o == nil || IsNil(o.StaticIdentifier) {
		var ret string
		return ret
	}
	return *o.StaticIdentifier
}

// GetStaticIdentifierOk returns a tuple with the StaticIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticAddInput) GetStaticIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.StaticIdentifier) {
		return nil, false
	}
	return o.StaticIdentifier, true
}

// HasStaticIdentifier returns a boolean if a field has been set.
func (o *DhcpStaticAddInput) HasStaticIdentifier() bool {
	if o != nil && !IsNil(o.StaticIdentifier) {
		return true
	}

	return false
}

// SetStaticIdentifier gets a reference to the given string and assigns it to the StaticIdentifier field.
func (o *DhcpStaticAddInput) SetStaticIdentifier(v string) {
	o.StaticIdentifier = &v
}

// GetStaticMacAddr returns the StaticMacAddr field value if set, zero value otherwise.
func (o *DhcpStaticAddInput) GetStaticMacAddr() string {
	if o == nil || IsNil(o.StaticMacAddr) {
		var ret string
		return ret
	}
	return *o.StaticMacAddr
}

// GetStaticMacAddrOk returns a tuple with the StaticMacAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticAddInput) GetStaticMacAddrOk() (*string, bool) {
	if o == nil || IsNil(o.StaticMacAddr) {
		return nil, false
	}
	return o.StaticMacAddr, true
}

// HasStaticMacAddr returns a boolean if a field has been set.
func (o *DhcpStaticAddInput) HasStaticMacAddr() bool {
	if o != nil && !IsNil(o.StaticMacAddr) {
		return true
	}

	return false
}

// SetStaticMacAddr gets a reference to the given string and assigns it to the StaticMacAddr field.
func (o *DhcpStaticAddInput) SetStaticMacAddr(v string) {
	o.StaticMacAddr = &v
}

// GetServerHostaddr returns the ServerHostaddr field value if set, zero value otherwise.
func (o *DhcpStaticAddInput) GetServerHostaddr() string {
	if o == nil || IsNil(o.ServerHostaddr) {
		var ret string
		return ret
	}
	return *o.ServerHostaddr
}

// GetServerHostaddrOk returns a tuple with the ServerHostaddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticAddInput) GetServerHostaddrOk() (*string, bool) {
	if o == nil || IsNil(o.ServerHostaddr) {
		return nil, false
	}
	return o.ServerHostaddr, true
}

// HasServerHostaddr returns a boolean if a field has been set.
func (o *DhcpStaticAddInput) HasServerHostaddr() bool {
	if o != nil && !IsNil(o.ServerHostaddr) {
		return true
	}

	return false
}

// SetServerHostaddr gets a reference to the given string and assigns it to the ServerHostaddr field.
func (o *DhcpStaticAddInput) SetServerHostaddr(v string) {
	o.ServerHostaddr = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *DhcpStaticAddInput) GetGroupId() int32 {
	if o == nil || IsNil(o.GroupId) {
		var ret int32
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticAddInput) GetGroupIdOk() (*int32, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *DhcpStaticAddInput) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given int32 and assigns it to the GroupId field.
func (o *DhcpStaticAddInput) SetGroupId(v int32) {
	o.GroupId = &v
}

// GetGroupName returns the GroupName field value if set, zero value otherwise.
func (o *DhcpStaticAddInput) GetGroupName() string {
	if o == nil || IsNil(o.GroupName) {
		var ret string
		return ret
	}
	return *o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticAddInput) GetGroupNameOk() (*string, bool) {
	if o == nil || IsNil(o.GroupName) {
		return nil, false
	}
	return o.GroupName, true
}

// HasGroupName returns a boolean if a field has been set.
func (o *DhcpStaticAddInput) HasGroupName() bool {
	if o != nil && !IsNil(o.GroupName) {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given string and assigns it to the GroupName field.
func (o *DhcpStaticAddInput) SetGroupName(v string) {
	o.GroupName = &v
}

// GetStaticName returns the StaticName field value if set, zero value otherwise.
func (o *DhcpStaticAddInput) GetStaticName() string {
	if o == nil || IsNil(o.StaticName) {
		var ret string
		return ret
	}
	return *o.StaticName
}

// GetStaticNameOk returns a tuple with the StaticName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticAddInput) GetStaticNameOk() (*string, bool) {
	if o == nil || IsNil(o.StaticName) {
		return nil, false
	}
	return o.StaticName, true
}

// HasStaticName returns a boolean if a field has been set.
func (o *DhcpStaticAddInput) HasStaticName() bool {
	if o != nil && !IsNil(o.StaticName) {
		return true
	}

	return false
}

// SetStaticName gets a reference to the given string and assigns it to the StaticName field.
func (o *DhcpStaticAddInput) SetStaticName(v string) {
	o.StaticName = &v
}

// GetClassParametersToDelete returns the ClassParametersToDelete field value if set, zero value otherwise.
func (o *DhcpStaticAddInput) GetClassParametersToDelete() []string {
	if o == nil || IsNil(o.ClassParametersToDelete) {
		var ret []string
		return ret
	}
	return o.ClassParametersToDelete
}

// GetClassParametersToDeleteOk returns a tuple with the ClassParametersToDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticAddInput) GetClassParametersToDeleteOk() ([]string, bool) {
	if o == nil || IsNil(o.ClassParametersToDelete) {
		return nil, false
	}
	return o.ClassParametersToDelete, true
}

// HasClassParametersToDelete returns a boolean if a field has been set.
func (o *DhcpStaticAddInput) HasClassParametersToDelete() bool {
	if o != nil && !IsNil(o.ClassParametersToDelete) {
		return true
	}

	return false
}

// SetClassParametersToDelete gets a reference to the given []string and assigns it to the ClassParametersToDelete field.
func (o *DhcpStaticAddInput) SetClassParametersToDelete(v []string) {
	o.ClassParametersToDelete = v
}

// GetStaticClassName returns the StaticClassName field value if set, zero value otherwise.
func (o *DhcpStaticAddInput) GetStaticClassName() string {
	if o == nil || IsNil(o.StaticClassName) {
		var ret string
		return ret
	}
	return *o.StaticClassName
}

// GetStaticClassNameOk returns a tuple with the StaticClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticAddInput) GetStaticClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.StaticClassName) {
		return nil, false
	}
	return o.StaticClassName, true
}

// HasStaticClassName returns a boolean if a field has been set.
func (o *DhcpStaticAddInput) HasStaticClassName() bool {
	if o != nil && !IsNil(o.StaticClassName) {
		return true
	}

	return false
}

// SetStaticClassName gets a reference to the given string and assigns it to the StaticClassName field.
func (o *DhcpStaticAddInput) SetStaticClassName(v string) {
	o.StaticClassName = &v
}

// GetStaticClassParameters returns the StaticClassParameters field value if set, zero value otherwise.
func (o *DhcpStaticAddInput) GetStaticClassParameters() []ApiClassParameterInputEntry {
	if o == nil || IsNil(o.StaticClassParameters) {
		var ret []ApiClassParameterInputEntry
		return ret
	}
	return o.StaticClassParameters
}

// GetStaticClassParametersOk returns a tuple with the StaticClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticAddInput) GetStaticClassParametersOk() ([]ApiClassParameterInputEntry, bool) {
	if o == nil || IsNil(o.StaticClassParameters) {
		return nil, false
	}
	return o.StaticClassParameters, true
}

// HasStaticClassParameters returns a boolean if a field has been set.
func (o *DhcpStaticAddInput) HasStaticClassParameters() bool {
	if o != nil && !IsNil(o.StaticClassParameters) {
		return true
	}

	return false
}

// SetStaticClassParameters gets a reference to the given []ApiClassParameterInputEntry and assigns it to the StaticClassParameters field.
func (o *DhcpStaticAddInput) SetStaticClassParameters(v []ApiClassParameterInputEntry) {
	o.StaticClassParameters = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *DhcpStaticAddInput) GetWarnings() string {
	if o == nil || IsNil(o.Warnings) {
		var ret string
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticAddInput) GetWarningsOk() (*string, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *DhcpStaticAddInput) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given string and assigns it to the Warnings field.
func (o *DhcpStaticAddInput) SetWarnings(v string) {
	o.Warnings = &v
}

func (o DhcpStaticAddInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DhcpStaticAddInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ServerId) {
		toSerialize["server_id"] = o.ServerId
	}
	if !IsNil(o.ServerName) {
		toSerialize["server_name"] = o.ServerName
	}
	if !IsNil(o.StaticAddr) {
		toSerialize["static_addr"] = o.StaticAddr
	}
	if !IsNil(o.StaticIdentifier) {
		toSerialize["static_identifier"] = o.StaticIdentifier
	}
	if !IsNil(o.StaticMacAddr) {
		toSerialize["static_mac_addr"] = o.StaticMacAddr
	}
	if !IsNil(o.ServerHostaddr) {
		toSerialize["server_hostaddr"] = o.ServerHostaddr
	}
	if !IsNil(o.GroupId) {
		toSerialize["group_id"] = o.GroupId
	}
	if !IsNil(o.GroupName) {
		toSerialize["group_name"] = o.GroupName
	}
	if !IsNil(o.StaticName) {
		toSerialize["static_name"] = o.StaticName
	}
	if !IsNil(o.ClassParametersToDelete) {
		toSerialize["class_parameters_to_delete"] = o.ClassParametersToDelete
	}
	if !IsNil(o.StaticClassName) {
		toSerialize["static_class_name"] = o.StaticClassName
	}
	if !IsNil(o.StaticClassParameters) {
		toSerialize["static_class_parameters"] = o.StaticClassParameters
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableDhcpStaticAddInput struct {
	value *DhcpStaticAddInput
	isSet bool
}

func (v NullableDhcpStaticAddInput) Get() *DhcpStaticAddInput {
	return v.value
}

func (v *NullableDhcpStaticAddInput) Set(val *DhcpStaticAddInput) {
	v.value = val
	v.isSet = true
}

func (v NullableDhcpStaticAddInput) IsSet() bool {
	return v.isSet
}

func (v *NullableDhcpStaticAddInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDhcpStaticAddInput(val *DhcpStaticAddInput) *NullableDhcpStaticAddInput {
	return &NullableDhcpStaticAddInput{value: val, isSet: true}
}

func (v NullableDhcpStaticAddInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDhcpStaticAddInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
