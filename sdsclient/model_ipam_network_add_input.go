/*
SOLIDserver API

OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2024 EfficientIP</p><p><em>All specifications and information regarding the products in this document are subject to change without notice and should not be construed as a commitment by EfficientIP. EfficientIP assumes no responsibility or liability for any mistakes or inaccuracies that may appear in this document. All statements and recommendations in this document are believed to be accurate but are presented without warranty. Users must take full responsibility for their application of any product.</em></p><p><em>This document aims at detailing EfficientIP proprietary solutions. As our solutions rely on several third-party products, created by other companies or organizations, it may redirect readers to third-party websites and documentation for further information. In such a case, EfficientIP cannot be liable or expected to provide said information on products they do maintain or created.</em></p><p>Generated (Friday 4th of October 2024 03:41:11 PM)</p>

API version: 2.0
Contact: support-api@efficientip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// checks if the IpamNetworkAddInput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpamNetworkAddInput{}

// IpamNetworkAddInput struct for IpamNetworkAddInput
type IpamNetworkAddInput struct {
	// The database identifier (ID) of an existing IPv4 network you want to set as the parent of the IPv4 network you are adding. You can specify a subnet-type network to set up a network-based VLSM organization.
	ParentNetworkId *int32 `json:"parent_network_id,omitempty"`
	// The database identifier (ID) of the space, a unique numeric key value automatically incremented when you add a space. Use the ID to specify the space of your choice.
	SpaceId *int32 `json:"space_id,omitempty"`
	// The name of the space.
	SpaceName *string `json:"space_name,omitempty"`
	// The start IP address of the IPv4 network, its first IP address.
	NetworkAddr *string `json:"network_addr,omitempty"`
	// The end IP address of the IPv4 network, its last IP address.
	NetworkEndAddr *string `json:"network_end_addr,omitempty"`
	// The netmask of the IPv4 network. It is expressed in dot-decimal notation and defines the number of addresses the network contains.
	NetworkMask *string `json:"network_mask,omitempty"`
	// The prefix of the IPv4 network, an integer that defines the number of addresses the network contains.
	NetworkPrefix *string `json:"network_prefix,omitempty"`
	// The size of the IPv4 network, the number of IP addresses it contains.
	NetworkSize *int32 `json:"network_size,omitempty"`
	// Internal use. Not documented.
	AllowBlockCreation *int32 `json:"allow_block_creation,omitempty"`
	// A way to allow (1) or prevent (0) changing the parent of the network you are adding. Upon editing of the network, this parameter decides if you can associate it with a different parent network.
	AllowTreeReparenting *int32 `json:"allow_tree_reparenting,omitempty"`
	// A way to determine if a network can contain other networks. If set to 1, the network is terminal and cannot contain other subnet-type networks. By essence, block-type networks are non-terminal and are always set to 0.
	NetworkIsTerminal *int32 `json:"network_is_terminal,omitempty"`
	// A way to prevent <b>(1)</b> users from assigning the broadcast IP address and network IP address of the network.
	NetworkLockNetworkBroadcast *int32 `json:"network_lock_network_broadcast,omitempty"`
	// A way to authorize (<b>1</b>) IPv4 networks overlapping within a space.
	PermitInvalid *int32 `json:"permit_invalid,omitempty"`
	// A way to force the creation of an IPv4 subnet-type network. If set to <b>1</b>, you can create a subnet-type network even if no block-type network matching the start address exists.
	PermitNoBlock *int32 `json:"permit_no_block,omitempty"`
	// The position of the network within the hierarchy of networks of a VLSM organization. It calculates between <b>0</b> and <b>n</b> all the levels of the organization, its behavior depends on the value of the parameter <b>use_reversed_relative_position</b>:<ul><li> <b>use_reversed_relative_position=0</b> where <b>0</b> indicates a block-type network at the highest level possible, in a space-based organization, it belongs to the top space. The levels increment from <b>0</b> down to <b>n</b>, the lowest level you set up, within networks or spaces.<br/></li><li> <b>use_reversed_relative_position=1</b> where <b>1</b> indicates a network located at the lowest level of the organization, within networks or spaces. The levels increment from <b>0</b> up to <b>n</b>, the network at the highest level of the organization.<br/></li></ul>
	RelativePosition *int32 `json:"relative_position,omitempty"`
	// The object activation status.<ul><li> If set to <b>0</b>, the object is present in the database but ignored, i.e. it cannot be managed, counted or listed. This status is applied on objects deleted from the GUI.<br/></li><li> If set to <b>1</b>, the object is enabled and managed.<br/></li><li> If set to <b>2</b>, the object is unmanaged, disabled or both depending on the context.<br/></li></ul>By default, <b>row_state</b> is set to <b>1</b> when an object is created.
	RowState *string `json:"row_state,omitempty"`
	// The level of the network within the space:<ul><li> Set it to <b>0</b> for a block-type network.<br/></li><li> Set it to a value between <b>1</b> and <b>n</b> for a subnet-type network.<br/></li></ul>If you set a value between <b>2</b> and <b>n</b>, you are setting a network-based VLSM organization where non terminal subnet-type networks can contain other subnet-type networks.
	NetworkLevel *int32 `json:"network_level,omitempty"`
	// The name of the IPv4 network, each IPv4 network must have a unique name.
	NetworkName *string `json:"network_name,omitempty"`
	// A way to determine if the calculation of the parameter <b>relative_position</b> should start from the top (<b>0</b>) or the bottom (<b>1</b>) of the VLSM organization.
	UseReversedRelativePosition *int32 `json:"use_reversed_relative_position,omitempty"`
	// The database identifier (ID) of the VLAN you want to associate with the network.
	VlanId *int32 `json:"vlan_id,omitempty"`
	// The database identifier (ID) of a VLSM child space of the space specified in <b>space_id</b>. If you specify an ID, the subnet-type network you are adding is duplicated as a VLSM block-type network in the child space, with the same name but a different ID. This parameter serves the same purpose as <b>vlsm_space_name</b>.
	VlsmSpaceId *int32 `json:"vlsm_space_id,omitempty"`
	// The name of a VLSM child space of the space specified in <b>space_id</b>. If you specify a name, the subnet-type network you are adding is duplicated as a VLSM block-type network in the child space, with the same name but a different ID. This parameter serves the same purpose as <b>vlsm_space_id</b>.
	VlsmSpaceName *string `json:"vlsm_space_name,omitempty"`
	// class parameters you want to delete from the object
	ClassParametersToDelete []string `json:"class_parameters_to_delete,omitempty"`
	// class parameters in json format
	NetworkClassParameters []ApiClassParameterInputEntry `json:"network_class_parameters,omitempty"`
	// The name of the class to apply to the object you are adding. You must specify the class file directory, e.g. <b>my_directory/my_class.class</b> . You cannot use the classes <b>global</b> and <b>default</b>, they are reserved by the system.
	NetworkClassName *string `json:"network_class_name,omitempty"`
	// A way to bypass <b>(accept) </b>any enabled rule that would return warning messages. If the service returns an error message, you cannot bypass the enabled rules.
	Warnings *string `json:"warnings,omitempty"`
}

// NewIpamNetworkAddInput instantiates a new IpamNetworkAddInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpamNetworkAddInput() *IpamNetworkAddInput {
	this := IpamNetworkAddInput{}
	return &this
}

// NewIpamNetworkAddInputWithDefaults instantiates a new IpamNetworkAddInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpamNetworkAddInputWithDefaults() *IpamNetworkAddInput {
	this := IpamNetworkAddInput{}
	return &this
}

// GetParentNetworkId returns the ParentNetworkId field value if set, zero value otherwise.
func (o *IpamNetworkAddInput) GetParentNetworkId() int32 {
	if o == nil || IsNil(o.ParentNetworkId) {
		var ret int32
		return ret
	}
	return *o.ParentNetworkId
}

// GetParentNetworkIdOk returns a tuple with the ParentNetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamNetworkAddInput) GetParentNetworkIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ParentNetworkId) {
		return nil, false
	}
	return o.ParentNetworkId, true
}

// HasParentNetworkId returns a boolean if a field has been set.
func (o *IpamNetworkAddInput) HasParentNetworkId() bool {
	if o != nil && !IsNil(o.ParentNetworkId) {
		return true
	}

	return false
}

// SetParentNetworkId gets a reference to the given int32 and assigns it to the ParentNetworkId field.
func (o *IpamNetworkAddInput) SetParentNetworkId(v int32) {
	o.ParentNetworkId = &v
}

// GetSpaceId returns the SpaceId field value if set, zero value otherwise.
func (o *IpamNetworkAddInput) GetSpaceId() int32 {
	if o == nil || IsNil(o.SpaceId) {
		var ret int32
		return ret
	}
	return *o.SpaceId
}

// GetSpaceIdOk returns a tuple with the SpaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamNetworkAddInput) GetSpaceIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SpaceId) {
		return nil, false
	}
	return o.SpaceId, true
}

// HasSpaceId returns a boolean if a field has been set.
func (o *IpamNetworkAddInput) HasSpaceId() bool {
	if o != nil && !IsNil(o.SpaceId) {
		return true
	}

	return false
}

// SetSpaceId gets a reference to the given int32 and assigns it to the SpaceId field.
func (o *IpamNetworkAddInput) SetSpaceId(v int32) {
	o.SpaceId = &v
}

// GetSpaceName returns the SpaceName field value if set, zero value otherwise.
func (o *IpamNetworkAddInput) GetSpaceName() string {
	if o == nil || IsNil(o.SpaceName) {
		var ret string
		return ret
	}
	return *o.SpaceName
}

// GetSpaceNameOk returns a tuple with the SpaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamNetworkAddInput) GetSpaceNameOk() (*string, bool) {
	if o == nil || IsNil(o.SpaceName) {
		return nil, false
	}
	return o.SpaceName, true
}

// HasSpaceName returns a boolean if a field has been set.
func (o *IpamNetworkAddInput) HasSpaceName() bool {
	if o != nil && !IsNil(o.SpaceName) {
		return true
	}

	return false
}

// SetSpaceName gets a reference to the given string and assigns it to the SpaceName field.
func (o *IpamNetworkAddInput) SetSpaceName(v string) {
	o.SpaceName = &v
}

// GetNetworkAddr returns the NetworkAddr field value if set, zero value otherwise.
func (o *IpamNetworkAddInput) GetNetworkAddr() string {
	if o == nil || IsNil(o.NetworkAddr) {
		var ret string
		return ret
	}
	return *o.NetworkAddr
}

// GetNetworkAddrOk returns a tuple with the NetworkAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamNetworkAddInput) GetNetworkAddrOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkAddr) {
		return nil, false
	}
	return o.NetworkAddr, true
}

// HasNetworkAddr returns a boolean if a field has been set.
func (o *IpamNetworkAddInput) HasNetworkAddr() bool {
	if o != nil && !IsNil(o.NetworkAddr) {
		return true
	}

	return false
}

// SetNetworkAddr gets a reference to the given string and assigns it to the NetworkAddr field.
func (o *IpamNetworkAddInput) SetNetworkAddr(v string) {
	o.NetworkAddr = &v
}

// GetNetworkEndAddr returns the NetworkEndAddr field value if set, zero value otherwise.
func (o *IpamNetworkAddInput) GetNetworkEndAddr() string {
	if o == nil || IsNil(o.NetworkEndAddr) {
		var ret string
		return ret
	}
	return *o.NetworkEndAddr
}

// GetNetworkEndAddrOk returns a tuple with the NetworkEndAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamNetworkAddInput) GetNetworkEndAddrOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkEndAddr) {
		return nil, false
	}
	return o.NetworkEndAddr, true
}

// HasNetworkEndAddr returns a boolean if a field has been set.
func (o *IpamNetworkAddInput) HasNetworkEndAddr() bool {
	if o != nil && !IsNil(o.NetworkEndAddr) {
		return true
	}

	return false
}

// SetNetworkEndAddr gets a reference to the given string and assigns it to the NetworkEndAddr field.
func (o *IpamNetworkAddInput) SetNetworkEndAddr(v string) {
	o.NetworkEndAddr = &v
}

// GetNetworkMask returns the NetworkMask field value if set, zero value otherwise.
func (o *IpamNetworkAddInput) GetNetworkMask() string {
	if o == nil || IsNil(o.NetworkMask) {
		var ret string
		return ret
	}
	return *o.NetworkMask
}

// GetNetworkMaskOk returns a tuple with the NetworkMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamNetworkAddInput) GetNetworkMaskOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkMask) {
		return nil, false
	}
	return o.NetworkMask, true
}

// HasNetworkMask returns a boolean if a field has been set.
func (o *IpamNetworkAddInput) HasNetworkMask() bool {
	if o != nil && !IsNil(o.NetworkMask) {
		return true
	}

	return false
}

// SetNetworkMask gets a reference to the given string and assigns it to the NetworkMask field.
func (o *IpamNetworkAddInput) SetNetworkMask(v string) {
	o.NetworkMask = &v
}

// GetNetworkPrefix returns the NetworkPrefix field value if set, zero value otherwise.
func (o *IpamNetworkAddInput) GetNetworkPrefix() string {
	if o == nil || IsNil(o.NetworkPrefix) {
		var ret string
		return ret
	}
	return *o.NetworkPrefix
}

// GetNetworkPrefixOk returns a tuple with the NetworkPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamNetworkAddInput) GetNetworkPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkPrefix) {
		return nil, false
	}
	return o.NetworkPrefix, true
}

// HasNetworkPrefix returns a boolean if a field has been set.
func (o *IpamNetworkAddInput) HasNetworkPrefix() bool {
	if o != nil && !IsNil(o.NetworkPrefix) {
		return true
	}

	return false
}

// SetNetworkPrefix gets a reference to the given string and assigns it to the NetworkPrefix field.
func (o *IpamNetworkAddInput) SetNetworkPrefix(v string) {
	o.NetworkPrefix = &v
}

// GetNetworkSize returns the NetworkSize field value if set, zero value otherwise.
func (o *IpamNetworkAddInput) GetNetworkSize() int32 {
	if o == nil || IsNil(o.NetworkSize) {
		var ret int32
		return ret
	}
	return *o.NetworkSize
}

// GetNetworkSizeOk returns a tuple with the NetworkSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamNetworkAddInput) GetNetworkSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.NetworkSize) {
		return nil, false
	}
	return o.NetworkSize, true
}

// HasNetworkSize returns a boolean if a field has been set.
func (o *IpamNetworkAddInput) HasNetworkSize() bool {
	if o != nil && !IsNil(o.NetworkSize) {
		return true
	}

	return false
}

// SetNetworkSize gets a reference to the given int32 and assigns it to the NetworkSize field.
func (o *IpamNetworkAddInput) SetNetworkSize(v int32) {
	o.NetworkSize = &v
}

// GetAllowBlockCreation returns the AllowBlockCreation field value if set, zero value otherwise.
func (o *IpamNetworkAddInput) GetAllowBlockCreation() int32 {
	if o == nil || IsNil(o.AllowBlockCreation) {
		var ret int32
		return ret
	}
	return *o.AllowBlockCreation
}

// GetAllowBlockCreationOk returns a tuple with the AllowBlockCreation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamNetworkAddInput) GetAllowBlockCreationOk() (*int32, bool) {
	if o == nil || IsNil(o.AllowBlockCreation) {
		return nil, false
	}
	return o.AllowBlockCreation, true
}

// HasAllowBlockCreation returns a boolean if a field has been set.
func (o *IpamNetworkAddInput) HasAllowBlockCreation() bool {
	if o != nil && !IsNil(o.AllowBlockCreation) {
		return true
	}

	return false
}

// SetAllowBlockCreation gets a reference to the given int32 and assigns it to the AllowBlockCreation field.
func (o *IpamNetworkAddInput) SetAllowBlockCreation(v int32) {
	o.AllowBlockCreation = &v
}

// GetAllowTreeReparenting returns the AllowTreeReparenting field value if set, zero value otherwise.
func (o *IpamNetworkAddInput) GetAllowTreeReparenting() int32 {
	if o == nil || IsNil(o.AllowTreeReparenting) {
		var ret int32
		return ret
	}
	return *o.AllowTreeReparenting
}

// GetAllowTreeReparentingOk returns a tuple with the AllowTreeReparenting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamNetworkAddInput) GetAllowTreeReparentingOk() (*int32, bool) {
	if o == nil || IsNil(o.AllowTreeReparenting) {
		return nil, false
	}
	return o.AllowTreeReparenting, true
}

// HasAllowTreeReparenting returns a boolean if a field has been set.
func (o *IpamNetworkAddInput) HasAllowTreeReparenting() bool {
	if o != nil && !IsNil(o.AllowTreeReparenting) {
		return true
	}

	return false
}

// SetAllowTreeReparenting gets a reference to the given int32 and assigns it to the AllowTreeReparenting field.
func (o *IpamNetworkAddInput) SetAllowTreeReparenting(v int32) {
	o.AllowTreeReparenting = &v
}

// GetNetworkIsTerminal returns the NetworkIsTerminal field value if set, zero value otherwise.
func (o *IpamNetworkAddInput) GetNetworkIsTerminal() int32 {
	if o == nil || IsNil(o.NetworkIsTerminal) {
		var ret int32
		return ret
	}
	return *o.NetworkIsTerminal
}

// GetNetworkIsTerminalOk returns a tuple with the NetworkIsTerminal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamNetworkAddInput) GetNetworkIsTerminalOk() (*int32, bool) {
	if o == nil || IsNil(o.NetworkIsTerminal) {
		return nil, false
	}
	return o.NetworkIsTerminal, true
}

// HasNetworkIsTerminal returns a boolean if a field has been set.
func (o *IpamNetworkAddInput) HasNetworkIsTerminal() bool {
	if o != nil && !IsNil(o.NetworkIsTerminal) {
		return true
	}

	return false
}

// SetNetworkIsTerminal gets a reference to the given int32 and assigns it to the NetworkIsTerminal field.
func (o *IpamNetworkAddInput) SetNetworkIsTerminal(v int32) {
	o.NetworkIsTerminal = &v
}

// GetNetworkLockNetworkBroadcast returns the NetworkLockNetworkBroadcast field value if set, zero value otherwise.
func (o *IpamNetworkAddInput) GetNetworkLockNetworkBroadcast() int32 {
	if o == nil || IsNil(o.NetworkLockNetworkBroadcast) {
		var ret int32
		return ret
	}
	return *o.NetworkLockNetworkBroadcast
}

// GetNetworkLockNetworkBroadcastOk returns a tuple with the NetworkLockNetworkBroadcast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamNetworkAddInput) GetNetworkLockNetworkBroadcastOk() (*int32, bool) {
	if o == nil || IsNil(o.NetworkLockNetworkBroadcast) {
		return nil, false
	}
	return o.NetworkLockNetworkBroadcast, true
}

// HasNetworkLockNetworkBroadcast returns a boolean if a field has been set.
func (o *IpamNetworkAddInput) HasNetworkLockNetworkBroadcast() bool {
	if o != nil && !IsNil(o.NetworkLockNetworkBroadcast) {
		return true
	}

	return false
}

// SetNetworkLockNetworkBroadcast gets a reference to the given int32 and assigns it to the NetworkLockNetworkBroadcast field.
func (o *IpamNetworkAddInput) SetNetworkLockNetworkBroadcast(v int32) {
	o.NetworkLockNetworkBroadcast = &v
}

// GetPermitInvalid returns the PermitInvalid field value if set, zero value otherwise.
func (o *IpamNetworkAddInput) GetPermitInvalid() int32 {
	if o == nil || IsNil(o.PermitInvalid) {
		var ret int32
		return ret
	}
	return *o.PermitInvalid
}

// GetPermitInvalidOk returns a tuple with the PermitInvalid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamNetworkAddInput) GetPermitInvalidOk() (*int32, bool) {
	if o == nil || IsNil(o.PermitInvalid) {
		return nil, false
	}
	return o.PermitInvalid, true
}

// HasPermitInvalid returns a boolean if a field has been set.
func (o *IpamNetworkAddInput) HasPermitInvalid() bool {
	if o != nil && !IsNil(o.PermitInvalid) {
		return true
	}

	return false
}

// SetPermitInvalid gets a reference to the given int32 and assigns it to the PermitInvalid field.
func (o *IpamNetworkAddInput) SetPermitInvalid(v int32) {
	o.PermitInvalid = &v
}

// GetPermitNoBlock returns the PermitNoBlock field value if set, zero value otherwise.
func (o *IpamNetworkAddInput) GetPermitNoBlock() int32 {
	if o == nil || IsNil(o.PermitNoBlock) {
		var ret int32
		return ret
	}
	return *o.PermitNoBlock
}

// GetPermitNoBlockOk returns a tuple with the PermitNoBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamNetworkAddInput) GetPermitNoBlockOk() (*int32, bool) {
	if o == nil || IsNil(o.PermitNoBlock) {
		return nil, false
	}
	return o.PermitNoBlock, true
}

// HasPermitNoBlock returns a boolean if a field has been set.
func (o *IpamNetworkAddInput) HasPermitNoBlock() bool {
	if o != nil && !IsNil(o.PermitNoBlock) {
		return true
	}

	return false
}

// SetPermitNoBlock gets a reference to the given int32 and assigns it to the PermitNoBlock field.
func (o *IpamNetworkAddInput) SetPermitNoBlock(v int32) {
	o.PermitNoBlock = &v
}

// GetRelativePosition returns the RelativePosition field value if set, zero value otherwise.
func (o *IpamNetworkAddInput) GetRelativePosition() int32 {
	if o == nil || IsNil(o.RelativePosition) {
		var ret int32
		return ret
	}
	return *o.RelativePosition
}

// GetRelativePositionOk returns a tuple with the RelativePosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamNetworkAddInput) GetRelativePositionOk() (*int32, bool) {
	if o == nil || IsNil(o.RelativePosition) {
		return nil, false
	}
	return o.RelativePosition, true
}

// HasRelativePosition returns a boolean if a field has been set.
func (o *IpamNetworkAddInput) HasRelativePosition() bool {
	if o != nil && !IsNil(o.RelativePosition) {
		return true
	}

	return false
}

// SetRelativePosition gets a reference to the given int32 and assigns it to the RelativePosition field.
func (o *IpamNetworkAddInput) SetRelativePosition(v int32) {
	o.RelativePosition = &v
}

// GetRowState returns the RowState field value if set, zero value otherwise.
func (o *IpamNetworkAddInput) GetRowState() string {
	if o == nil || IsNil(o.RowState) {
		var ret string
		return ret
	}
	return *o.RowState
}

// GetRowStateOk returns a tuple with the RowState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamNetworkAddInput) GetRowStateOk() (*string, bool) {
	if o == nil || IsNil(o.RowState) {
		return nil, false
	}
	return o.RowState, true
}

// HasRowState returns a boolean if a field has been set.
func (o *IpamNetworkAddInput) HasRowState() bool {
	if o != nil && !IsNil(o.RowState) {
		return true
	}

	return false
}

// SetRowState gets a reference to the given string and assigns it to the RowState field.
func (o *IpamNetworkAddInput) SetRowState(v string) {
	o.RowState = &v
}

// GetNetworkLevel returns the NetworkLevel field value if set, zero value otherwise.
func (o *IpamNetworkAddInput) GetNetworkLevel() int32 {
	if o == nil || IsNil(o.NetworkLevel) {
		var ret int32
		return ret
	}
	return *o.NetworkLevel
}

// GetNetworkLevelOk returns a tuple with the NetworkLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamNetworkAddInput) GetNetworkLevelOk() (*int32, bool) {
	if o == nil || IsNil(o.NetworkLevel) {
		return nil, false
	}
	return o.NetworkLevel, true
}

// HasNetworkLevel returns a boolean if a field has been set.
func (o *IpamNetworkAddInput) HasNetworkLevel() bool {
	if o != nil && !IsNil(o.NetworkLevel) {
		return true
	}

	return false
}

// SetNetworkLevel gets a reference to the given int32 and assigns it to the NetworkLevel field.
func (o *IpamNetworkAddInput) SetNetworkLevel(v int32) {
	o.NetworkLevel = &v
}

// GetNetworkName returns the NetworkName field value if set, zero value otherwise.
func (o *IpamNetworkAddInput) GetNetworkName() string {
	if o == nil || IsNil(o.NetworkName) {
		var ret string
		return ret
	}
	return *o.NetworkName
}

// GetNetworkNameOk returns a tuple with the NetworkName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamNetworkAddInput) GetNetworkNameOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkName) {
		return nil, false
	}
	return o.NetworkName, true
}

// HasNetworkName returns a boolean if a field has been set.
func (o *IpamNetworkAddInput) HasNetworkName() bool {
	if o != nil && !IsNil(o.NetworkName) {
		return true
	}

	return false
}

// SetNetworkName gets a reference to the given string and assigns it to the NetworkName field.
func (o *IpamNetworkAddInput) SetNetworkName(v string) {
	o.NetworkName = &v
}

// GetUseReversedRelativePosition returns the UseReversedRelativePosition field value if set, zero value otherwise.
func (o *IpamNetworkAddInput) GetUseReversedRelativePosition() int32 {
	if o == nil || IsNil(o.UseReversedRelativePosition) {
		var ret int32
		return ret
	}
	return *o.UseReversedRelativePosition
}

// GetUseReversedRelativePositionOk returns a tuple with the UseReversedRelativePosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamNetworkAddInput) GetUseReversedRelativePositionOk() (*int32, bool) {
	if o == nil || IsNil(o.UseReversedRelativePosition) {
		return nil, false
	}
	return o.UseReversedRelativePosition, true
}

// HasUseReversedRelativePosition returns a boolean if a field has been set.
func (o *IpamNetworkAddInput) HasUseReversedRelativePosition() bool {
	if o != nil && !IsNil(o.UseReversedRelativePosition) {
		return true
	}

	return false
}

// SetUseReversedRelativePosition gets a reference to the given int32 and assigns it to the UseReversedRelativePosition field.
func (o *IpamNetworkAddInput) SetUseReversedRelativePosition(v int32) {
	o.UseReversedRelativePosition = &v
}

// GetVlanId returns the VlanId field value if set, zero value otherwise.
func (o *IpamNetworkAddInput) GetVlanId() int32 {
	if o == nil || IsNil(o.VlanId) {
		var ret int32
		return ret
	}
	return *o.VlanId
}

// GetVlanIdOk returns a tuple with the VlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamNetworkAddInput) GetVlanIdOk() (*int32, bool) {
	if o == nil || IsNil(o.VlanId) {
		return nil, false
	}
	return o.VlanId, true
}

// HasVlanId returns a boolean if a field has been set.
func (o *IpamNetworkAddInput) HasVlanId() bool {
	if o != nil && !IsNil(o.VlanId) {
		return true
	}

	return false
}

// SetVlanId gets a reference to the given int32 and assigns it to the VlanId field.
func (o *IpamNetworkAddInput) SetVlanId(v int32) {
	o.VlanId = &v
}

// GetVlsmSpaceId returns the VlsmSpaceId field value if set, zero value otherwise.
func (o *IpamNetworkAddInput) GetVlsmSpaceId() int32 {
	if o == nil || IsNil(o.VlsmSpaceId) {
		var ret int32
		return ret
	}
	return *o.VlsmSpaceId
}

// GetVlsmSpaceIdOk returns a tuple with the VlsmSpaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamNetworkAddInput) GetVlsmSpaceIdOk() (*int32, bool) {
	if o == nil || IsNil(o.VlsmSpaceId) {
		return nil, false
	}
	return o.VlsmSpaceId, true
}

// HasVlsmSpaceId returns a boolean if a field has been set.
func (o *IpamNetworkAddInput) HasVlsmSpaceId() bool {
	if o != nil && !IsNil(o.VlsmSpaceId) {
		return true
	}

	return false
}

// SetVlsmSpaceId gets a reference to the given int32 and assigns it to the VlsmSpaceId field.
func (o *IpamNetworkAddInput) SetVlsmSpaceId(v int32) {
	o.VlsmSpaceId = &v
}

// GetVlsmSpaceName returns the VlsmSpaceName field value if set, zero value otherwise.
func (o *IpamNetworkAddInput) GetVlsmSpaceName() string {
	if o == nil || IsNil(o.VlsmSpaceName) {
		var ret string
		return ret
	}
	return *o.VlsmSpaceName
}

// GetVlsmSpaceNameOk returns a tuple with the VlsmSpaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamNetworkAddInput) GetVlsmSpaceNameOk() (*string, bool) {
	if o == nil || IsNil(o.VlsmSpaceName) {
		return nil, false
	}
	return o.VlsmSpaceName, true
}

// HasVlsmSpaceName returns a boolean if a field has been set.
func (o *IpamNetworkAddInput) HasVlsmSpaceName() bool {
	if o != nil && !IsNil(o.VlsmSpaceName) {
		return true
	}

	return false
}

// SetVlsmSpaceName gets a reference to the given string and assigns it to the VlsmSpaceName field.
func (o *IpamNetworkAddInput) SetVlsmSpaceName(v string) {
	o.VlsmSpaceName = &v
}

// GetClassParametersToDelete returns the ClassParametersToDelete field value if set, zero value otherwise.
func (o *IpamNetworkAddInput) GetClassParametersToDelete() []string {
	if o == nil || IsNil(o.ClassParametersToDelete) {
		var ret []string
		return ret
	}
	return o.ClassParametersToDelete
}

// GetClassParametersToDeleteOk returns a tuple with the ClassParametersToDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamNetworkAddInput) GetClassParametersToDeleteOk() ([]string, bool) {
	if o == nil || IsNil(o.ClassParametersToDelete) {
		return nil, false
	}
	return o.ClassParametersToDelete, true
}

// HasClassParametersToDelete returns a boolean if a field has been set.
func (o *IpamNetworkAddInput) HasClassParametersToDelete() bool {
	if o != nil && !IsNil(o.ClassParametersToDelete) {
		return true
	}

	return false
}

// SetClassParametersToDelete gets a reference to the given []string and assigns it to the ClassParametersToDelete field.
func (o *IpamNetworkAddInput) SetClassParametersToDelete(v []string) {
	o.ClassParametersToDelete = v
}

// GetNetworkClassParameters returns the NetworkClassParameters field value if set, zero value otherwise.
func (o *IpamNetworkAddInput) GetNetworkClassParameters() []ApiClassParameterInputEntry {
	if o == nil || IsNil(o.NetworkClassParameters) {
		var ret []ApiClassParameterInputEntry
		return ret
	}
	return o.NetworkClassParameters
}

// GetNetworkClassParametersOk returns a tuple with the NetworkClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamNetworkAddInput) GetNetworkClassParametersOk() ([]ApiClassParameterInputEntry, bool) {
	if o == nil || IsNil(o.NetworkClassParameters) {
		return nil, false
	}
	return o.NetworkClassParameters, true
}

// HasNetworkClassParameters returns a boolean if a field has been set.
func (o *IpamNetworkAddInput) HasNetworkClassParameters() bool {
	if o != nil && !IsNil(o.NetworkClassParameters) {
		return true
	}

	return false
}

// SetNetworkClassParameters gets a reference to the given []ApiClassParameterInputEntry and assigns it to the NetworkClassParameters field.
func (o *IpamNetworkAddInput) SetNetworkClassParameters(v []ApiClassParameterInputEntry) {
	o.NetworkClassParameters = v
}

// GetNetworkClassName returns the NetworkClassName field value if set, zero value otherwise.
func (o *IpamNetworkAddInput) GetNetworkClassName() string {
	if o == nil || IsNil(o.NetworkClassName) {
		var ret string
		return ret
	}
	return *o.NetworkClassName
}

// GetNetworkClassNameOk returns a tuple with the NetworkClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamNetworkAddInput) GetNetworkClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.NetworkClassName) {
		return nil, false
	}
	return o.NetworkClassName, true
}

// HasNetworkClassName returns a boolean if a field has been set.
func (o *IpamNetworkAddInput) HasNetworkClassName() bool {
	if o != nil && !IsNil(o.NetworkClassName) {
		return true
	}

	return false
}

// SetNetworkClassName gets a reference to the given string and assigns it to the NetworkClassName field.
func (o *IpamNetworkAddInput) SetNetworkClassName(v string) {
	o.NetworkClassName = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *IpamNetworkAddInput) GetWarnings() string {
	if o == nil || IsNil(o.Warnings) {
		var ret string
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpamNetworkAddInput) GetWarningsOk() (*string, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *IpamNetworkAddInput) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given string and assigns it to the Warnings field.
func (o *IpamNetworkAddInput) SetWarnings(v string) {
	o.Warnings = &v
}

func (o IpamNetworkAddInput) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpamNetworkAddInput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ParentNetworkId) {
		toSerialize["parent_network_id"] = o.ParentNetworkId
	}
	if !IsNil(o.SpaceId) {
		toSerialize["space_id"] = o.SpaceId
	}
	if !IsNil(o.SpaceName) {
		toSerialize["space_name"] = o.SpaceName
	}
	if !IsNil(o.NetworkAddr) {
		toSerialize["network_addr"] = o.NetworkAddr
	}
	if !IsNil(o.NetworkEndAddr) {
		toSerialize["network_end_addr"] = o.NetworkEndAddr
	}
	if !IsNil(o.NetworkMask) {
		toSerialize["network_mask"] = o.NetworkMask
	}
	if !IsNil(o.NetworkPrefix) {
		toSerialize["network_prefix"] = o.NetworkPrefix
	}
	if !IsNil(o.NetworkSize) {
		toSerialize["network_size"] = o.NetworkSize
	}
	if !IsNil(o.AllowBlockCreation) {
		toSerialize["allow_block_creation"] = o.AllowBlockCreation
	}
	if !IsNil(o.AllowTreeReparenting) {
		toSerialize["allow_tree_reparenting"] = o.AllowTreeReparenting
	}
	if !IsNil(o.NetworkIsTerminal) {
		toSerialize["network_is_terminal"] = o.NetworkIsTerminal
	}
	if !IsNil(o.NetworkLockNetworkBroadcast) {
		toSerialize["network_lock_network_broadcast"] = o.NetworkLockNetworkBroadcast
	}
	if !IsNil(o.PermitInvalid) {
		toSerialize["permit_invalid"] = o.PermitInvalid
	}
	if !IsNil(o.PermitNoBlock) {
		toSerialize["permit_no_block"] = o.PermitNoBlock
	}
	if !IsNil(o.RelativePosition) {
		toSerialize["relative_position"] = o.RelativePosition
	}
	if !IsNil(o.RowState) {
		toSerialize["row_state"] = o.RowState
	}
	if !IsNil(o.NetworkLevel) {
		toSerialize["network_level"] = o.NetworkLevel
	}
	if !IsNil(o.NetworkName) {
		toSerialize["network_name"] = o.NetworkName
	}
	if !IsNil(o.UseReversedRelativePosition) {
		toSerialize["use_reversed_relative_position"] = o.UseReversedRelativePosition
	}
	if !IsNil(o.VlanId) {
		toSerialize["vlan_id"] = o.VlanId
	}
	if !IsNil(o.VlsmSpaceId) {
		toSerialize["vlsm_space_id"] = o.VlsmSpaceId
	}
	if !IsNil(o.VlsmSpaceName) {
		toSerialize["vlsm_space_name"] = o.VlsmSpaceName
	}
	if !IsNil(o.ClassParametersToDelete) {
		toSerialize["class_parameters_to_delete"] = o.ClassParametersToDelete
	}
	if !IsNil(o.NetworkClassParameters) {
		toSerialize["network_class_parameters"] = o.NetworkClassParameters
	}
	if !IsNil(o.NetworkClassName) {
		toSerialize["network_class_name"] = o.NetworkClassName
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

type NullableIpamNetworkAddInput struct {
	value *IpamNetworkAddInput
	isSet bool
}

func (v NullableIpamNetworkAddInput) Get() *IpamNetworkAddInput {
	return v.value
}

func (v *NullableIpamNetworkAddInput) Set(val *IpamNetworkAddInput) {
	v.value = val
	v.isSet = true
}

func (v NullableIpamNetworkAddInput) IsSet() bool {
	return v.isSet
}

func (v *NullableIpamNetworkAddInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpamNetworkAddInput(val *IpamNetworkAddInput) *NullableIpamNetworkAddInput {
	return &NullableIpamNetworkAddInput{value: val, isSet: true}
}

func (v NullableIpamNetworkAddInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpamNetworkAddInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
