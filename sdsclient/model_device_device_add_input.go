/*
 * SOLIDserver API
 *
 * OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2021 EfficientIP</p><p><em>All specifications and information regarding the products in  this document are subject to change without notice and should not be  construed as a commitment by EfficientIP. EfficientIP assumes no  responsibility or liability for any mistakes or inaccuracies that may appear  in this document. All statements and recommendations in this document are  believed to be accurate but are presented without warranty. Users must take  full responsibility for their application of any product.</em></p><p>Generated (Monday 14th of June 2021 12:30:34 PM)</p>
 *
 * API version: 2.0
 * Contact: support-api@efficientip.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// DeviceDeviceAddInput struct for DeviceDeviceAddInput
type DeviceDeviceAddInput struct {
	// The name of the Device Manager device, each device must have a unique name.
	DeviceName *string `json:"device_name,omitempty"`
	// The IP address you want to associate with the Device Manager device, in decimal format.
	DeviceAddr *string `json:"device_addr,omitempty"`
	// The IP address you want to associate with the Device Manager device, in hexadecimal format.
	DeviceAddressAddr *string `json:"device_address_addr,omitempty"`
	// The database identifier (ID) of a space you want to associate with the Device Manager device.
	DeviceSpaceId *int32 `json:"device_space_id,omitempty"`
	// The database identifier (ID) of a NetChange network device you want to associate with the Device Manager device.
	DevId *int32 `json:"dev_id,omitempty"`
	// The object activation status.<ul class=dashed ><li>                                                If set to <b>0</b>, the object is present in the database but ignored, i.e. it cannot be managed, counted or listed. This status is applied on objects deleted from the GUI.<br/>                                            </li><li>                                                If set to <b>1</b>, the object is enabled and managed.<br/>                                            </li><li>                                                If set to <b>2</b>, the object is unmanaged, disabled or both depending on the context.<br/>                                            </li></ul>By default, <b>row_enabled</b> is set to <b>1</b> when an object is created.
	RowState *string `json:"row_state,omitempty"`
	// class parameters you want to delete from the object
	ClassParametersToDelete *[]string `json:"class_parameters_to_delete,omitempty"`
	// The name of the class to apply to the object you are adding. You must specify the class file directory, e.g. <b>my_directory/my_class.class</b> . You cannot use the classes <b>global</b> and <b>default</b>, they are reserved by the system.
	DeviceClassName *string `json:"device_class_name,omitempty"`
	// class parameters in json format
	DeviceClassParameters *[]ApiClassParameterInputEntry `json:"device_class_parameters,omitempty"`
	// A way to bypass <b>(accept) </b>any enabled rule that would return warning messages. If the service returns an error message, you cannot bypass the enabled rules.
	Warnings *string `json:"warnings,omitempty"`
}

// NewDeviceDeviceAddInput instantiates a new DeviceDeviceAddInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceDeviceAddInput() *DeviceDeviceAddInput {
	this := DeviceDeviceAddInput{}
	return &this
}

// NewDeviceDeviceAddInputWithDefaults instantiates a new DeviceDeviceAddInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceDeviceAddInputWithDefaults() *DeviceDeviceAddInput {
	this := DeviceDeviceAddInput{}
	return &this
}

// GetDeviceName returns the DeviceName field value if set, zero value otherwise.
func (o *DeviceDeviceAddInput) GetDeviceName() string {
	if o == nil || o.DeviceName == nil {
		var ret string
		return ret
	}
	return *o.DeviceName
}

// GetDeviceNameOk returns a tuple with the DeviceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDeviceAddInput) GetDeviceNameOk() (*string, bool) {
	if o == nil || o.DeviceName == nil {
		return nil, false
	}
	return o.DeviceName, true
}

// HasDeviceName returns a boolean if a field has been set.
func (o *DeviceDeviceAddInput) HasDeviceName() bool {
	if o != nil && o.DeviceName != nil {
		return true
	}

	return false
}

// SetDeviceName gets a reference to the given string and assigns it to the DeviceName field.
func (o *DeviceDeviceAddInput) SetDeviceName(v string) {
	o.DeviceName = &v
}

// GetDeviceAddr returns the DeviceAddr field value if set, zero value otherwise.
func (o *DeviceDeviceAddInput) GetDeviceAddr() string {
	if o == nil || o.DeviceAddr == nil {
		var ret string
		return ret
	}
	return *o.DeviceAddr
}

// GetDeviceAddrOk returns a tuple with the DeviceAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDeviceAddInput) GetDeviceAddrOk() (*string, bool) {
	if o == nil || o.DeviceAddr == nil {
		return nil, false
	}
	return o.DeviceAddr, true
}

// HasDeviceAddr returns a boolean if a field has been set.
func (o *DeviceDeviceAddInput) HasDeviceAddr() bool {
	if o != nil && o.DeviceAddr != nil {
		return true
	}

	return false
}

// SetDeviceAddr gets a reference to the given string and assigns it to the DeviceAddr field.
func (o *DeviceDeviceAddInput) SetDeviceAddr(v string) {
	o.DeviceAddr = &v
}

// GetDeviceAddressAddr returns the DeviceAddressAddr field value if set, zero value otherwise.
func (o *DeviceDeviceAddInput) GetDeviceAddressAddr() string {
	if o == nil || o.DeviceAddressAddr == nil {
		var ret string
		return ret
	}
	return *o.DeviceAddressAddr
}

// GetDeviceAddressAddrOk returns a tuple with the DeviceAddressAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDeviceAddInput) GetDeviceAddressAddrOk() (*string, bool) {
	if o == nil || o.DeviceAddressAddr == nil {
		return nil, false
	}
	return o.DeviceAddressAddr, true
}

// HasDeviceAddressAddr returns a boolean if a field has been set.
func (o *DeviceDeviceAddInput) HasDeviceAddressAddr() bool {
	if o != nil && o.DeviceAddressAddr != nil {
		return true
	}

	return false
}

// SetDeviceAddressAddr gets a reference to the given string and assigns it to the DeviceAddressAddr field.
func (o *DeviceDeviceAddInput) SetDeviceAddressAddr(v string) {
	o.DeviceAddressAddr = &v
}

// GetDeviceSpaceId returns the DeviceSpaceId field value if set, zero value otherwise.
func (o *DeviceDeviceAddInput) GetDeviceSpaceId() int32 {
	if o == nil || o.DeviceSpaceId == nil {
		var ret int32
		return ret
	}
	return *o.DeviceSpaceId
}

// GetDeviceSpaceIdOk returns a tuple with the DeviceSpaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDeviceAddInput) GetDeviceSpaceIdOk() (*int32, bool) {
	if o == nil || o.DeviceSpaceId == nil {
		return nil, false
	}
	return o.DeviceSpaceId, true
}

// HasDeviceSpaceId returns a boolean if a field has been set.
func (o *DeviceDeviceAddInput) HasDeviceSpaceId() bool {
	if o != nil && o.DeviceSpaceId != nil {
		return true
	}

	return false
}

// SetDeviceSpaceId gets a reference to the given int32 and assigns it to the DeviceSpaceId field.
func (o *DeviceDeviceAddInput) SetDeviceSpaceId(v int32) {
	o.DeviceSpaceId = &v
}

// GetDevId returns the DevId field value if set, zero value otherwise.
func (o *DeviceDeviceAddInput) GetDevId() int32 {
	if o == nil || o.DevId == nil {
		var ret int32
		return ret
	}
	return *o.DevId
}

// GetDevIdOk returns a tuple with the DevId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDeviceAddInput) GetDevIdOk() (*int32, bool) {
	if o == nil || o.DevId == nil {
		return nil, false
	}
	return o.DevId, true
}

// HasDevId returns a boolean if a field has been set.
func (o *DeviceDeviceAddInput) HasDevId() bool {
	if o != nil && o.DevId != nil {
		return true
	}

	return false
}

// SetDevId gets a reference to the given int32 and assigns it to the DevId field.
func (o *DeviceDeviceAddInput) SetDevId(v int32) {
	o.DevId = &v
}

// GetRowState returns the RowState field value if set, zero value otherwise.
func (o *DeviceDeviceAddInput) GetRowState() string {
	if o == nil || o.RowState == nil {
		var ret string
		return ret
	}
	return *o.RowState
}

// GetRowStateOk returns a tuple with the RowState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDeviceAddInput) GetRowStateOk() (*string, bool) {
	if o == nil || o.RowState == nil {
		return nil, false
	}
	return o.RowState, true
}

// HasRowState returns a boolean if a field has been set.
func (o *DeviceDeviceAddInput) HasRowState() bool {
	if o != nil && o.RowState != nil {
		return true
	}

	return false
}

// SetRowState gets a reference to the given string and assigns it to the RowState field.
func (o *DeviceDeviceAddInput) SetRowState(v string) {
	o.RowState = &v
}

// GetClassParametersToDelete returns the ClassParametersToDelete field value if set, zero value otherwise.
func (o *DeviceDeviceAddInput) GetClassParametersToDelete() []string {
	if o == nil || o.ClassParametersToDelete == nil {
		var ret []string
		return ret
	}
	return *o.ClassParametersToDelete
}

// GetClassParametersToDeleteOk returns a tuple with the ClassParametersToDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDeviceAddInput) GetClassParametersToDeleteOk() (*[]string, bool) {
	if o == nil || o.ClassParametersToDelete == nil {
		return nil, false
	}
	return o.ClassParametersToDelete, true
}

// HasClassParametersToDelete returns a boolean if a field has been set.
func (o *DeviceDeviceAddInput) HasClassParametersToDelete() bool {
	if o != nil && o.ClassParametersToDelete != nil {
		return true
	}

	return false
}

// SetClassParametersToDelete gets a reference to the given []string and assigns it to the ClassParametersToDelete field.
func (o *DeviceDeviceAddInput) SetClassParametersToDelete(v []string) {
	o.ClassParametersToDelete = &v
}

// GetDeviceClassName returns the DeviceClassName field value if set, zero value otherwise.
func (o *DeviceDeviceAddInput) GetDeviceClassName() string {
	if o == nil || o.DeviceClassName == nil {
		var ret string
		return ret
	}
	return *o.DeviceClassName
}

// GetDeviceClassNameOk returns a tuple with the DeviceClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDeviceAddInput) GetDeviceClassNameOk() (*string, bool) {
	if o == nil || o.DeviceClassName == nil {
		return nil, false
	}
	return o.DeviceClassName, true
}

// HasDeviceClassName returns a boolean if a field has been set.
func (o *DeviceDeviceAddInput) HasDeviceClassName() bool {
	if o != nil && o.DeviceClassName != nil {
		return true
	}

	return false
}

// SetDeviceClassName gets a reference to the given string and assigns it to the DeviceClassName field.
func (o *DeviceDeviceAddInput) SetDeviceClassName(v string) {
	o.DeviceClassName = &v
}

// GetDeviceClassParameters returns the DeviceClassParameters field value if set, zero value otherwise.
func (o *DeviceDeviceAddInput) GetDeviceClassParameters() []ApiClassParameterInputEntry {
	if o == nil || o.DeviceClassParameters == nil {
		var ret []ApiClassParameterInputEntry
		return ret
	}
	return *o.DeviceClassParameters
}

// GetDeviceClassParametersOk returns a tuple with the DeviceClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDeviceAddInput) GetDeviceClassParametersOk() (*[]ApiClassParameterInputEntry, bool) {
	if o == nil || o.DeviceClassParameters == nil {
		return nil, false
	}
	return o.DeviceClassParameters, true
}

// HasDeviceClassParameters returns a boolean if a field has been set.
func (o *DeviceDeviceAddInput) HasDeviceClassParameters() bool {
	if o != nil && o.DeviceClassParameters != nil {
		return true
	}

	return false
}

// SetDeviceClassParameters gets a reference to the given []ApiClassParameterInputEntry and assigns it to the DeviceClassParameters field.
func (o *DeviceDeviceAddInput) SetDeviceClassParameters(v []ApiClassParameterInputEntry) {
	o.DeviceClassParameters = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *DeviceDeviceAddInput) GetWarnings() string {
	if o == nil || o.Warnings == nil {
		var ret string
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDeviceAddInput) GetWarningsOk() (*string, bool) {
	if o == nil || o.Warnings == nil {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *DeviceDeviceAddInput) HasWarnings() bool {
	if o != nil && o.Warnings != nil {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given string and assigns it to the Warnings field.
func (o *DeviceDeviceAddInput) SetWarnings(v string) {
	o.Warnings = &v
}

func (o DeviceDeviceAddInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DeviceName != nil {
		toSerialize["device_name"] = o.DeviceName
	}
	if o.DeviceAddr != nil {
		toSerialize["device_addr"] = o.DeviceAddr
	}
	if o.DeviceAddressAddr != nil {
		toSerialize["device_address_addr"] = o.DeviceAddressAddr
	}
	if o.DeviceSpaceId != nil {
		toSerialize["device_space_id"] = o.DeviceSpaceId
	}
	if o.DevId != nil {
		toSerialize["dev_id"] = o.DevId
	}
	if o.RowState != nil {
		toSerialize["row_state"] = o.RowState
	}
	if o.ClassParametersToDelete != nil {
		toSerialize["class_parameters_to_delete"] = o.ClassParametersToDelete
	}
	if o.DeviceClassName != nil {
		toSerialize["device_class_name"] = o.DeviceClassName
	}
	if o.DeviceClassParameters != nil {
		toSerialize["device_class_parameters"] = o.DeviceClassParameters
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceDeviceAddInput struct {
	value *DeviceDeviceAddInput
	isSet bool
}

func (v NullableDeviceDeviceAddInput) Get() *DeviceDeviceAddInput {
	return v.value
}

func (v *NullableDeviceDeviceAddInput) Set(val *DeviceDeviceAddInput) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceDeviceAddInput) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceDeviceAddInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceDeviceAddInput(val *DeviceDeviceAddInput) *NullableDeviceDeviceAddInput {
	return &NullableDeviceDeviceAddInput{value: val, isSet: true}
}

func (v NullableDeviceDeviceAddInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceDeviceAddInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


