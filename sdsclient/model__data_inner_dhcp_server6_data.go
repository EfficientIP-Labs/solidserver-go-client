/*
SOLIDserver API

OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2024 EfficientIP</p><p><em>All specifications and information regarding the products in this document are subject to change without notice and should not be construed as a commitment by EfficientIP. EfficientIP assumes no responsibility or liability for any mistakes or inaccuracies that may appear in this document. All statements and recommendations in this document are believed to be accurate but are presented without warranty. Users must take full responsibility for their application of any product.</em></p><p><em>This document aims at detailing EfficientIP proprietary solutions. As our solutions rely on several third-party products, created by other companies or organizations, it may redirect readers to third-party websites and documentation for further information. In such a case, EfficientIP cannot be liable or expected to provide said information on products they do maintain or created.</em></p><p>Generated (Friday 4th of October 2024 03:41:11 PM)</p>

API version: 2.0
Contact: support-api@efficientip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// checks if the DataInnerDhcpServer6Data type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataInnerDhcpServer6Data{}

// DataInnerDhcpServer6Data struct for DataInnerDhcpServer6Data
type DataInnerDhcpServer6Data struct {
	// The name of the connection profile used as connection method for the DHCPv6 server.
	ConnectionprofileName *string `json:"connectionprofile_name,omitempty"`
	// The name of the class applied to the DHCPv6 server, it can be preceded by the class directory.
	Server6ClassName *string `json:"server6_class_name,omitempty"`
	// The class parameters applied to the DHCPv6 server.
	Server6ClassParameters []ApiClassParameterOutputEntry `json:"server6_class_parameters,omitempty"`
	// The description of the DHCPv6 server.
	Server6Comment *string `json:"server6_comment,omitempty"`
	// The database identifier (ID) of the DHCPv6 server, a unique numeric key value automatically incremented when you add a DHCPv6 server.
	Server6Id *string `json:"server6_id,omitempty"`
	// Internal use. Not documented.
	Server6LastRefreshTime *string `json:"server6_last_refresh_time,omitempty"`
	// The name of the DHCPv6 server.
	Server6Name *string `json:"server6_name,omitempty"`
	// The status of the DHCPv6 server: <table><caption>server6_state possible values</caption><br/><thead><tr><th>Status</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >ER</td><td >The license used in SOLIDserver is not compliant with the added server: the license is invalid.</td></tr><tr><td >ES</td><td >The server configuration could not be parsed properly.</td></tr><tr><td >ET</td><td >The server does not answer anymore due to a scheduled configuration of the server.</td></tr><tr><td >IS</td><td >There was a setting error during the server declaration. For instance, some settings were added to a server that does not support them or a smart architecture is not managing any physical server.</td></tr><tr><td >IC</td><td >The SSL credentials are invalid</td></tr><tr><td >IP</td><td >The account used to add the Microsoft Windows DHCP server does not have sufficient privileges to manage it.</td></tr><tr><td >LS</td><td >The server configuration is not viable.</td></tr><tr><td >N</td><td >The server does not have a status as it has not synchronized yet.</td></tr><tr><td >Y</td><td >The server is operational.</td></tr></tbody></table></p><br/>
	Server6State *string `json:"server6_state,omitempty"`
	// The synchronization status of the DHCPv6 server. <b>1</b> indicates that the server is currently being synchronized.
	Server6Synching *string `json:"server6_synching,omitempty"`
	// The type of the DHCPv6 server: <table><caption>server6_type possible values</caption><br/><thead><tr><th>Type</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >ipm</td><td >EfficientIP or EfficientIP Package server</td></tr><tr><td >vdhcp</td><td >EfficientIP DHCPv6 smart architecture</td></tr></tbody></table></p><br/>
	Server6Type *string `json:"server6_type,omitempty"`
	// Internal use. Not documented.
	Server6Uboottime *string `json:"server6_uboottime,omitempty"`
	// The version details of the DHCPv6 server.
	Server6Version *string `json:"server6_version,omitempty"`
	// The human readable version of the parameter <b>server6_addr</b> or <b>server6_addr6</b>.
	Server6Hostaddr *string `json:"server6_hostaddr,omitempty"`
	// The Management IP address of the DHCPv6 server, the IPv6 address configured when adding the server, in hexadecimal format.
	Server6Addr6 *string `json:"server6_addr6,omitempty"`
	// The Management IP address of the DHCPv6 server, the IPv4 address configured when adding the server, in hexadecimal format.
	Server6Addr *string `json:"server6_addr,omitempty"`
	// Internal use. Not documented.
	Server6HttpsLogin *string `json:"server6_https_login,omitempty"`
	// The DHCPv6 server package information. <b>Y</b> for an EfficientIP Package server, <b>N</b> for an appliance or virtual machine, <b>U</b> the package information is irrelevant. For servers with a <b>server6_type</b> set to <b>ipm</b>, <b>U</b> indicates either EfficientIP Packages or appliances/virtual machines.
	Server6IsPackage *string `json:"server6_is_package,omitempty"`
	// A way to determine if the server can update any other module <b>(1)</b>.
	Server6Isolated *string `json:"server6_isolated,omitempty"`
	// The Multi-status information is displayed as follows: <i>&lt;number-of-instances&gt;@&lt;message-number&gt;@&lt;multi-status-severity&gt;@&lt;module&gt;</i>. The different severity levels are:<br><b>Multi-status severity levels</b>    <table border=1>        <thead>        <tr >            <td><b>Message number</b></td>            <td><b>Severity</b></td>            <td><b>Description</b></td>        </tr>        </thead>        <tbody>        <tr  valign=middle>            <td>0 - 16</td>            <td>Emergency</td>            <td>The object configuration prevents the system from running properly. Action is required.</td>        </tr>        <tr  valign=middle>            <td>17 - 33</td>            <td>Critical</td>            <td>The object configuration is in critical conditions. Immediate action is recommended.</td>        </tr>        <tr  valign=middle>            <td>34 - 50</td>            <td>Error</td>            <td>The object configuration failed at some level. Action is recommended.</td>        </tr>        <tr  valign=middle>            <td>51 - 66</td>            <td>Warning</td>            <td>The object configuration triggers error messages if no action is taken. Action to be taken at your discretion.</td>        </tr>        <tr  valign=middle>            <td>67 - 83</td>            <td>Notice</td>            <td>The object configuration is normal but undergoing events that might trigger errors. No immediate action required.</td>        </tr>        <tr  valign=middle>            <td>84 - 100</td>            <td>Informational</td>            <td>The object configuration is normal, operational messages (might inform you about potential incompatibilities with other modules, etc). No action required.</td>        </tr>        </tbody></table>
	Server6Multistatus *string `json:"server6_multistatus,omitempty"`
	// The URL of the HTTP(S) reverse proxy server that forwards client requests to the DHCPv6 server, if you configured one.
	ReverseProxyConf *string `json:"reverse_proxy_conf,omitempty"`
	// Internal use. Not documented.
	Server6SnmpId *string `json:"server6_snmp_id,omitempty"`
	// Internal use. Not documented.
	Server6SnmpPort *string `json:"server6_snmp_port,omitempty"`
	// Internal use. Not documented.
	Server6SnmpProfileId *string `json:"server6_snmp_profile_id,omitempty"`
	// Internal use. Not documented.
	Server6SnmpRetry *string `json:"server6_snmp_retry,omitempty"`
	// Internal use. Not documented.
	Server6SnmpTimeout *string `json:"server6_snmp_timeout,omitempty"`
	// Internal use. Not documented.
	Server6SnmpUseTcp *string `json:"server6_snmp_use_tcp,omitempty"`
	// Internal use. Not documented.
	Server6StatEnabled *string `json:"server6_stat_enabled,omitempty"`
	// Internal use. Not documented.
	Server6StatNiceness *string `json:"server6_stat_niceness,omitempty"`
	// Internal use. Not documented.
	Server6StatPeriod *string `json:"server6_stat_period,omitempty"`
	// Internal use. Not documented.
	Server6StatTime *string `json:"server6_stat_time,omitempty"`
	// The total number of servers managed by the DHCPv6 smart architecture.
	TotalSmartMembers *string `json:"total_smart_members,omitempty"`
	// The type of the DHCPv6 smart architecture.<table><caption>smart_arch possible values</caption><br/><thead><tr><th>Type</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >single</td><td >The Single-Server smart architecture manages a single DHCPv6 server.</td></tr><tr><td >splitscope</td><td >The Split-Scope smart architecture sets a pair of DHCP servers in a configuration where the two scopes listen to the same subnet, but the range of addresses is divided.</td></tr><tr><td >stateless</td><td >The Stateless smart architecture offers a limited number of options to the DHCP clients. The IP address is delivered thanks to the subnet gateway and it is impossible to create any ranges or statics or to retrieve any leases.</td></tr></tbody></table></p><br/>
	SmartArch *string `json:"smart_arch,omitempty"`
	// The list of the servers managed by the DHCPv6 smart architecture, as follows: <b>&lt;dhcp6_name&gt;,&lt;dhcp6_name&gt;,...</b> .
	SmartMembersName *string `json:"smart_members_name,omitempty"`
	// Internal use. Not documented.
	SmartParam1 *string `json:"smart_param1,omitempty"`
	// The type of the DHCPv6 smart architecture managing the DHCPv6 server. No value indicates that the server is not managed by a smart architecture or is a smart architecture itself.
	SmartParentArch *string `json:"smart_parent_arch,omitempty"`
	// The database identifier (ID) of the DHCPv6 smart architecture managing the DHCPv6 server. <b>0</b> indicates that the server is not managed by a smart architecture or is a smart architecture itself.
	SmartParentId *string `json:"smart_parent_id,omitempty"`
	// The name of the DHCPv6 smart architecture managing the DHCPv6 server. <b>#</b> indicates that the server is not managed by a smart architecture or is a smart architecture itself.
	SmartParentName *string `json:"smart_parent_name,omitempty"`
	// The database identifier (ID) of the DHCPv6 smart architecture the server belongs to.
	SmartRef1Server6Id *string `json:"smart_ref1_server6_id,omitempty"`
	// Internal use. Not documented.
	SmartRef1Server6Name *string `json:"smart_ref1_server6_name,omitempty"`
	// Internal use. Not documented.
	SmartRef2Server6Id *string `json:"smart_ref2_server6_id,omitempty"`
	// Internal use. Not documented.
	SmartRef2Server6Name *string `json:"smart_ref2_server6_name,omitempty"`
}

// NewDataInnerDhcpServer6Data instantiates a new DataInnerDhcpServer6Data object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataInnerDhcpServer6Data() *DataInnerDhcpServer6Data {
	this := DataInnerDhcpServer6Data{}
	return &this
}

// NewDataInnerDhcpServer6DataWithDefaults instantiates a new DataInnerDhcpServer6Data object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataInnerDhcpServer6DataWithDefaults() *DataInnerDhcpServer6Data {
	this := DataInnerDhcpServer6Data{}
	return &this
}

// GetConnectionprofileName returns the ConnectionprofileName field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetConnectionprofileName() string {
	if o == nil || IsNil(o.ConnectionprofileName) {
		var ret string
		return ret
	}
	return *o.ConnectionprofileName
}

// GetConnectionprofileNameOk returns a tuple with the ConnectionprofileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetConnectionprofileNameOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionprofileName) {
		return nil, false
	}
	return o.ConnectionprofileName, true
}

// HasConnectionprofileName returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasConnectionprofileName() bool {
	if o != nil && !IsNil(o.ConnectionprofileName) {
		return true
	}

	return false
}

// SetConnectionprofileName gets a reference to the given string and assigns it to the ConnectionprofileName field.
func (o *DataInnerDhcpServer6Data) SetConnectionprofileName(v string) {
	o.ConnectionprofileName = &v
}

// GetServer6ClassName returns the Server6ClassName field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetServer6ClassName() string {
	if o == nil || IsNil(o.Server6ClassName) {
		var ret string
		return ret
	}
	return *o.Server6ClassName
}

// GetServer6ClassNameOk returns a tuple with the Server6ClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetServer6ClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.Server6ClassName) {
		return nil, false
	}
	return o.Server6ClassName, true
}

// HasServer6ClassName returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasServer6ClassName() bool {
	if o != nil && !IsNil(o.Server6ClassName) {
		return true
	}

	return false
}

// SetServer6ClassName gets a reference to the given string and assigns it to the Server6ClassName field.
func (o *DataInnerDhcpServer6Data) SetServer6ClassName(v string) {
	o.Server6ClassName = &v
}

// GetServer6ClassParameters returns the Server6ClassParameters field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetServer6ClassParameters() []ApiClassParameterOutputEntry {
	if o == nil || IsNil(o.Server6ClassParameters) {
		var ret []ApiClassParameterOutputEntry
		return ret
	}
	return o.Server6ClassParameters
}

// GetServer6ClassParametersOk returns a tuple with the Server6ClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetServer6ClassParametersOk() ([]ApiClassParameterOutputEntry, bool) {
	if o == nil || IsNil(o.Server6ClassParameters) {
		return nil, false
	}
	return o.Server6ClassParameters, true
}

// HasServer6ClassParameters returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasServer6ClassParameters() bool {
	if o != nil && !IsNil(o.Server6ClassParameters) {
		return true
	}

	return false
}

// SetServer6ClassParameters gets a reference to the given []ApiClassParameterOutputEntry and assigns it to the Server6ClassParameters field.
func (o *DataInnerDhcpServer6Data) SetServer6ClassParameters(v []ApiClassParameterOutputEntry) {
	o.Server6ClassParameters = v
}

// GetServer6Comment returns the Server6Comment field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetServer6Comment() string {
	if o == nil || IsNil(o.Server6Comment) {
		var ret string
		return ret
	}
	return *o.Server6Comment
}

// GetServer6CommentOk returns a tuple with the Server6Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetServer6CommentOk() (*string, bool) {
	if o == nil || IsNil(o.Server6Comment) {
		return nil, false
	}
	return o.Server6Comment, true
}

// HasServer6Comment returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasServer6Comment() bool {
	if o != nil && !IsNil(o.Server6Comment) {
		return true
	}

	return false
}

// SetServer6Comment gets a reference to the given string and assigns it to the Server6Comment field.
func (o *DataInnerDhcpServer6Data) SetServer6Comment(v string) {
	o.Server6Comment = &v
}

// GetServer6Id returns the Server6Id field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetServer6Id() string {
	if o == nil || IsNil(o.Server6Id) {
		var ret string
		return ret
	}
	return *o.Server6Id
}

// GetServer6IdOk returns a tuple with the Server6Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetServer6IdOk() (*string, bool) {
	if o == nil || IsNil(o.Server6Id) {
		return nil, false
	}
	return o.Server6Id, true
}

// HasServer6Id returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasServer6Id() bool {
	if o != nil && !IsNil(o.Server6Id) {
		return true
	}

	return false
}

// SetServer6Id gets a reference to the given string and assigns it to the Server6Id field.
func (o *DataInnerDhcpServer6Data) SetServer6Id(v string) {
	o.Server6Id = &v
}

// GetServer6LastRefreshTime returns the Server6LastRefreshTime field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetServer6LastRefreshTime() string {
	if o == nil || IsNil(o.Server6LastRefreshTime) {
		var ret string
		return ret
	}
	return *o.Server6LastRefreshTime
}

// GetServer6LastRefreshTimeOk returns a tuple with the Server6LastRefreshTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetServer6LastRefreshTimeOk() (*string, bool) {
	if o == nil || IsNil(o.Server6LastRefreshTime) {
		return nil, false
	}
	return o.Server6LastRefreshTime, true
}

// HasServer6LastRefreshTime returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasServer6LastRefreshTime() bool {
	if o != nil && !IsNil(o.Server6LastRefreshTime) {
		return true
	}

	return false
}

// SetServer6LastRefreshTime gets a reference to the given string and assigns it to the Server6LastRefreshTime field.
func (o *DataInnerDhcpServer6Data) SetServer6LastRefreshTime(v string) {
	o.Server6LastRefreshTime = &v
}

// GetServer6Name returns the Server6Name field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetServer6Name() string {
	if o == nil || IsNil(o.Server6Name) {
		var ret string
		return ret
	}
	return *o.Server6Name
}

// GetServer6NameOk returns a tuple with the Server6Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetServer6NameOk() (*string, bool) {
	if o == nil || IsNil(o.Server6Name) {
		return nil, false
	}
	return o.Server6Name, true
}

// HasServer6Name returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasServer6Name() bool {
	if o != nil && !IsNil(o.Server6Name) {
		return true
	}

	return false
}

// SetServer6Name gets a reference to the given string and assigns it to the Server6Name field.
func (o *DataInnerDhcpServer6Data) SetServer6Name(v string) {
	o.Server6Name = &v
}

// GetServer6State returns the Server6State field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetServer6State() string {
	if o == nil || IsNil(o.Server6State) {
		var ret string
		return ret
	}
	return *o.Server6State
}

// GetServer6StateOk returns a tuple with the Server6State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetServer6StateOk() (*string, bool) {
	if o == nil || IsNil(o.Server6State) {
		return nil, false
	}
	return o.Server6State, true
}

// HasServer6State returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasServer6State() bool {
	if o != nil && !IsNil(o.Server6State) {
		return true
	}

	return false
}

// SetServer6State gets a reference to the given string and assigns it to the Server6State field.
func (o *DataInnerDhcpServer6Data) SetServer6State(v string) {
	o.Server6State = &v
}

// GetServer6Synching returns the Server6Synching field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetServer6Synching() string {
	if o == nil || IsNil(o.Server6Synching) {
		var ret string
		return ret
	}
	return *o.Server6Synching
}

// GetServer6SynchingOk returns a tuple with the Server6Synching field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetServer6SynchingOk() (*string, bool) {
	if o == nil || IsNil(o.Server6Synching) {
		return nil, false
	}
	return o.Server6Synching, true
}

// HasServer6Synching returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasServer6Synching() bool {
	if o != nil && !IsNil(o.Server6Synching) {
		return true
	}

	return false
}

// SetServer6Synching gets a reference to the given string and assigns it to the Server6Synching field.
func (o *DataInnerDhcpServer6Data) SetServer6Synching(v string) {
	o.Server6Synching = &v
}

// GetServer6Type returns the Server6Type field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetServer6Type() string {
	if o == nil || IsNil(o.Server6Type) {
		var ret string
		return ret
	}
	return *o.Server6Type
}

// GetServer6TypeOk returns a tuple with the Server6Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetServer6TypeOk() (*string, bool) {
	if o == nil || IsNil(o.Server6Type) {
		return nil, false
	}
	return o.Server6Type, true
}

// HasServer6Type returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasServer6Type() bool {
	if o != nil && !IsNil(o.Server6Type) {
		return true
	}

	return false
}

// SetServer6Type gets a reference to the given string and assigns it to the Server6Type field.
func (o *DataInnerDhcpServer6Data) SetServer6Type(v string) {
	o.Server6Type = &v
}

// GetServer6Uboottime returns the Server6Uboottime field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetServer6Uboottime() string {
	if o == nil || IsNil(o.Server6Uboottime) {
		var ret string
		return ret
	}
	return *o.Server6Uboottime
}

// GetServer6UboottimeOk returns a tuple with the Server6Uboottime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetServer6UboottimeOk() (*string, bool) {
	if o == nil || IsNil(o.Server6Uboottime) {
		return nil, false
	}
	return o.Server6Uboottime, true
}

// HasServer6Uboottime returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasServer6Uboottime() bool {
	if o != nil && !IsNil(o.Server6Uboottime) {
		return true
	}

	return false
}

// SetServer6Uboottime gets a reference to the given string and assigns it to the Server6Uboottime field.
func (o *DataInnerDhcpServer6Data) SetServer6Uboottime(v string) {
	o.Server6Uboottime = &v
}

// GetServer6Version returns the Server6Version field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetServer6Version() string {
	if o == nil || IsNil(o.Server6Version) {
		var ret string
		return ret
	}
	return *o.Server6Version
}

// GetServer6VersionOk returns a tuple with the Server6Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetServer6VersionOk() (*string, bool) {
	if o == nil || IsNil(o.Server6Version) {
		return nil, false
	}
	return o.Server6Version, true
}

// HasServer6Version returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasServer6Version() bool {
	if o != nil && !IsNil(o.Server6Version) {
		return true
	}

	return false
}

// SetServer6Version gets a reference to the given string and assigns it to the Server6Version field.
func (o *DataInnerDhcpServer6Data) SetServer6Version(v string) {
	o.Server6Version = &v
}

// GetServer6Hostaddr returns the Server6Hostaddr field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetServer6Hostaddr() string {
	if o == nil || IsNil(o.Server6Hostaddr) {
		var ret string
		return ret
	}
	return *o.Server6Hostaddr
}

// GetServer6HostaddrOk returns a tuple with the Server6Hostaddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetServer6HostaddrOk() (*string, bool) {
	if o == nil || IsNil(o.Server6Hostaddr) {
		return nil, false
	}
	return o.Server6Hostaddr, true
}

// HasServer6Hostaddr returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasServer6Hostaddr() bool {
	if o != nil && !IsNil(o.Server6Hostaddr) {
		return true
	}

	return false
}

// SetServer6Hostaddr gets a reference to the given string and assigns it to the Server6Hostaddr field.
func (o *DataInnerDhcpServer6Data) SetServer6Hostaddr(v string) {
	o.Server6Hostaddr = &v
}

// GetServer6Addr6 returns the Server6Addr6 field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetServer6Addr6() string {
	if o == nil || IsNil(o.Server6Addr6) {
		var ret string
		return ret
	}
	return *o.Server6Addr6
}

// GetServer6Addr6Ok returns a tuple with the Server6Addr6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetServer6Addr6Ok() (*string, bool) {
	if o == nil || IsNil(o.Server6Addr6) {
		return nil, false
	}
	return o.Server6Addr6, true
}

// HasServer6Addr6 returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasServer6Addr6() bool {
	if o != nil && !IsNil(o.Server6Addr6) {
		return true
	}

	return false
}

// SetServer6Addr6 gets a reference to the given string and assigns it to the Server6Addr6 field.
func (o *DataInnerDhcpServer6Data) SetServer6Addr6(v string) {
	o.Server6Addr6 = &v
}

// GetServer6Addr returns the Server6Addr field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetServer6Addr() string {
	if o == nil || IsNil(o.Server6Addr) {
		var ret string
		return ret
	}
	return *o.Server6Addr
}

// GetServer6AddrOk returns a tuple with the Server6Addr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetServer6AddrOk() (*string, bool) {
	if o == nil || IsNil(o.Server6Addr) {
		return nil, false
	}
	return o.Server6Addr, true
}

// HasServer6Addr returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasServer6Addr() bool {
	if o != nil && !IsNil(o.Server6Addr) {
		return true
	}

	return false
}

// SetServer6Addr gets a reference to the given string and assigns it to the Server6Addr field.
func (o *DataInnerDhcpServer6Data) SetServer6Addr(v string) {
	o.Server6Addr = &v
}

// GetServer6HttpsLogin returns the Server6HttpsLogin field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetServer6HttpsLogin() string {
	if o == nil || IsNil(o.Server6HttpsLogin) {
		var ret string
		return ret
	}
	return *o.Server6HttpsLogin
}

// GetServer6HttpsLoginOk returns a tuple with the Server6HttpsLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetServer6HttpsLoginOk() (*string, bool) {
	if o == nil || IsNil(o.Server6HttpsLogin) {
		return nil, false
	}
	return o.Server6HttpsLogin, true
}

// HasServer6HttpsLogin returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasServer6HttpsLogin() bool {
	if o != nil && !IsNil(o.Server6HttpsLogin) {
		return true
	}

	return false
}

// SetServer6HttpsLogin gets a reference to the given string and assigns it to the Server6HttpsLogin field.
func (o *DataInnerDhcpServer6Data) SetServer6HttpsLogin(v string) {
	o.Server6HttpsLogin = &v
}

// GetServer6IsPackage returns the Server6IsPackage field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetServer6IsPackage() string {
	if o == nil || IsNil(o.Server6IsPackage) {
		var ret string
		return ret
	}
	return *o.Server6IsPackage
}

// GetServer6IsPackageOk returns a tuple with the Server6IsPackage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetServer6IsPackageOk() (*string, bool) {
	if o == nil || IsNil(o.Server6IsPackage) {
		return nil, false
	}
	return o.Server6IsPackage, true
}

// HasServer6IsPackage returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasServer6IsPackage() bool {
	if o != nil && !IsNil(o.Server6IsPackage) {
		return true
	}

	return false
}

// SetServer6IsPackage gets a reference to the given string and assigns it to the Server6IsPackage field.
func (o *DataInnerDhcpServer6Data) SetServer6IsPackage(v string) {
	o.Server6IsPackage = &v
}

// GetServer6Isolated returns the Server6Isolated field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetServer6Isolated() string {
	if o == nil || IsNil(o.Server6Isolated) {
		var ret string
		return ret
	}
	return *o.Server6Isolated
}

// GetServer6IsolatedOk returns a tuple with the Server6Isolated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetServer6IsolatedOk() (*string, bool) {
	if o == nil || IsNil(o.Server6Isolated) {
		return nil, false
	}
	return o.Server6Isolated, true
}

// HasServer6Isolated returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasServer6Isolated() bool {
	if o != nil && !IsNil(o.Server6Isolated) {
		return true
	}

	return false
}

// SetServer6Isolated gets a reference to the given string and assigns it to the Server6Isolated field.
func (o *DataInnerDhcpServer6Data) SetServer6Isolated(v string) {
	o.Server6Isolated = &v
}

// GetServer6Multistatus returns the Server6Multistatus field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetServer6Multistatus() string {
	if o == nil || IsNil(o.Server6Multistatus) {
		var ret string
		return ret
	}
	return *o.Server6Multistatus
}

// GetServer6MultistatusOk returns a tuple with the Server6Multistatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetServer6MultistatusOk() (*string, bool) {
	if o == nil || IsNil(o.Server6Multistatus) {
		return nil, false
	}
	return o.Server6Multistatus, true
}

// HasServer6Multistatus returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasServer6Multistatus() bool {
	if o != nil && !IsNil(o.Server6Multistatus) {
		return true
	}

	return false
}

// SetServer6Multistatus gets a reference to the given string and assigns it to the Server6Multistatus field.
func (o *DataInnerDhcpServer6Data) SetServer6Multistatus(v string) {
	o.Server6Multistatus = &v
}

// GetReverseProxyConf returns the ReverseProxyConf field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetReverseProxyConf() string {
	if o == nil || IsNil(o.ReverseProxyConf) {
		var ret string
		return ret
	}
	return *o.ReverseProxyConf
}

// GetReverseProxyConfOk returns a tuple with the ReverseProxyConf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetReverseProxyConfOk() (*string, bool) {
	if o == nil || IsNil(o.ReverseProxyConf) {
		return nil, false
	}
	return o.ReverseProxyConf, true
}

// HasReverseProxyConf returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasReverseProxyConf() bool {
	if o != nil && !IsNil(o.ReverseProxyConf) {
		return true
	}

	return false
}

// SetReverseProxyConf gets a reference to the given string and assigns it to the ReverseProxyConf field.
func (o *DataInnerDhcpServer6Data) SetReverseProxyConf(v string) {
	o.ReverseProxyConf = &v
}

// GetServer6SnmpId returns the Server6SnmpId field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetServer6SnmpId() string {
	if o == nil || IsNil(o.Server6SnmpId) {
		var ret string
		return ret
	}
	return *o.Server6SnmpId
}

// GetServer6SnmpIdOk returns a tuple with the Server6SnmpId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetServer6SnmpIdOk() (*string, bool) {
	if o == nil || IsNil(o.Server6SnmpId) {
		return nil, false
	}
	return o.Server6SnmpId, true
}

// HasServer6SnmpId returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasServer6SnmpId() bool {
	if o != nil && !IsNil(o.Server6SnmpId) {
		return true
	}

	return false
}

// SetServer6SnmpId gets a reference to the given string and assigns it to the Server6SnmpId field.
func (o *DataInnerDhcpServer6Data) SetServer6SnmpId(v string) {
	o.Server6SnmpId = &v
}

// GetServer6SnmpPort returns the Server6SnmpPort field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetServer6SnmpPort() string {
	if o == nil || IsNil(o.Server6SnmpPort) {
		var ret string
		return ret
	}
	return *o.Server6SnmpPort
}

// GetServer6SnmpPortOk returns a tuple with the Server6SnmpPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetServer6SnmpPortOk() (*string, bool) {
	if o == nil || IsNil(o.Server6SnmpPort) {
		return nil, false
	}
	return o.Server6SnmpPort, true
}

// HasServer6SnmpPort returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasServer6SnmpPort() bool {
	if o != nil && !IsNil(o.Server6SnmpPort) {
		return true
	}

	return false
}

// SetServer6SnmpPort gets a reference to the given string and assigns it to the Server6SnmpPort field.
func (o *DataInnerDhcpServer6Data) SetServer6SnmpPort(v string) {
	o.Server6SnmpPort = &v
}

// GetServer6SnmpProfileId returns the Server6SnmpProfileId field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetServer6SnmpProfileId() string {
	if o == nil || IsNil(o.Server6SnmpProfileId) {
		var ret string
		return ret
	}
	return *o.Server6SnmpProfileId
}

// GetServer6SnmpProfileIdOk returns a tuple with the Server6SnmpProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetServer6SnmpProfileIdOk() (*string, bool) {
	if o == nil || IsNil(o.Server6SnmpProfileId) {
		return nil, false
	}
	return o.Server6SnmpProfileId, true
}

// HasServer6SnmpProfileId returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasServer6SnmpProfileId() bool {
	if o != nil && !IsNil(o.Server6SnmpProfileId) {
		return true
	}

	return false
}

// SetServer6SnmpProfileId gets a reference to the given string and assigns it to the Server6SnmpProfileId field.
func (o *DataInnerDhcpServer6Data) SetServer6SnmpProfileId(v string) {
	o.Server6SnmpProfileId = &v
}

// GetServer6SnmpRetry returns the Server6SnmpRetry field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetServer6SnmpRetry() string {
	if o == nil || IsNil(o.Server6SnmpRetry) {
		var ret string
		return ret
	}
	return *o.Server6SnmpRetry
}

// GetServer6SnmpRetryOk returns a tuple with the Server6SnmpRetry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetServer6SnmpRetryOk() (*string, bool) {
	if o == nil || IsNil(o.Server6SnmpRetry) {
		return nil, false
	}
	return o.Server6SnmpRetry, true
}

// HasServer6SnmpRetry returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasServer6SnmpRetry() bool {
	if o != nil && !IsNil(o.Server6SnmpRetry) {
		return true
	}

	return false
}

// SetServer6SnmpRetry gets a reference to the given string and assigns it to the Server6SnmpRetry field.
func (o *DataInnerDhcpServer6Data) SetServer6SnmpRetry(v string) {
	o.Server6SnmpRetry = &v
}

// GetServer6SnmpTimeout returns the Server6SnmpTimeout field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetServer6SnmpTimeout() string {
	if o == nil || IsNil(o.Server6SnmpTimeout) {
		var ret string
		return ret
	}
	return *o.Server6SnmpTimeout
}

// GetServer6SnmpTimeoutOk returns a tuple with the Server6SnmpTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetServer6SnmpTimeoutOk() (*string, bool) {
	if o == nil || IsNil(o.Server6SnmpTimeout) {
		return nil, false
	}
	return o.Server6SnmpTimeout, true
}

// HasServer6SnmpTimeout returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasServer6SnmpTimeout() bool {
	if o != nil && !IsNil(o.Server6SnmpTimeout) {
		return true
	}

	return false
}

// SetServer6SnmpTimeout gets a reference to the given string and assigns it to the Server6SnmpTimeout field.
func (o *DataInnerDhcpServer6Data) SetServer6SnmpTimeout(v string) {
	o.Server6SnmpTimeout = &v
}

// GetServer6SnmpUseTcp returns the Server6SnmpUseTcp field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetServer6SnmpUseTcp() string {
	if o == nil || IsNil(o.Server6SnmpUseTcp) {
		var ret string
		return ret
	}
	return *o.Server6SnmpUseTcp
}

// GetServer6SnmpUseTcpOk returns a tuple with the Server6SnmpUseTcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetServer6SnmpUseTcpOk() (*string, bool) {
	if o == nil || IsNil(o.Server6SnmpUseTcp) {
		return nil, false
	}
	return o.Server6SnmpUseTcp, true
}

// HasServer6SnmpUseTcp returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasServer6SnmpUseTcp() bool {
	if o != nil && !IsNil(o.Server6SnmpUseTcp) {
		return true
	}

	return false
}

// SetServer6SnmpUseTcp gets a reference to the given string and assigns it to the Server6SnmpUseTcp field.
func (o *DataInnerDhcpServer6Data) SetServer6SnmpUseTcp(v string) {
	o.Server6SnmpUseTcp = &v
}

// GetServer6StatEnabled returns the Server6StatEnabled field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetServer6StatEnabled() string {
	if o == nil || IsNil(o.Server6StatEnabled) {
		var ret string
		return ret
	}
	return *o.Server6StatEnabled
}

// GetServer6StatEnabledOk returns a tuple with the Server6StatEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetServer6StatEnabledOk() (*string, bool) {
	if o == nil || IsNil(o.Server6StatEnabled) {
		return nil, false
	}
	return o.Server6StatEnabled, true
}

// HasServer6StatEnabled returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasServer6StatEnabled() bool {
	if o != nil && !IsNil(o.Server6StatEnabled) {
		return true
	}

	return false
}

// SetServer6StatEnabled gets a reference to the given string and assigns it to the Server6StatEnabled field.
func (o *DataInnerDhcpServer6Data) SetServer6StatEnabled(v string) {
	o.Server6StatEnabled = &v
}

// GetServer6StatNiceness returns the Server6StatNiceness field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetServer6StatNiceness() string {
	if o == nil || IsNil(o.Server6StatNiceness) {
		var ret string
		return ret
	}
	return *o.Server6StatNiceness
}

// GetServer6StatNicenessOk returns a tuple with the Server6StatNiceness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetServer6StatNicenessOk() (*string, bool) {
	if o == nil || IsNil(o.Server6StatNiceness) {
		return nil, false
	}
	return o.Server6StatNiceness, true
}

// HasServer6StatNiceness returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasServer6StatNiceness() bool {
	if o != nil && !IsNil(o.Server6StatNiceness) {
		return true
	}

	return false
}

// SetServer6StatNiceness gets a reference to the given string and assigns it to the Server6StatNiceness field.
func (o *DataInnerDhcpServer6Data) SetServer6StatNiceness(v string) {
	o.Server6StatNiceness = &v
}

// GetServer6StatPeriod returns the Server6StatPeriod field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetServer6StatPeriod() string {
	if o == nil || IsNil(o.Server6StatPeriod) {
		var ret string
		return ret
	}
	return *o.Server6StatPeriod
}

// GetServer6StatPeriodOk returns a tuple with the Server6StatPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetServer6StatPeriodOk() (*string, bool) {
	if o == nil || IsNil(o.Server6StatPeriod) {
		return nil, false
	}
	return o.Server6StatPeriod, true
}

// HasServer6StatPeriod returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasServer6StatPeriod() bool {
	if o != nil && !IsNil(o.Server6StatPeriod) {
		return true
	}

	return false
}

// SetServer6StatPeriod gets a reference to the given string and assigns it to the Server6StatPeriod field.
func (o *DataInnerDhcpServer6Data) SetServer6StatPeriod(v string) {
	o.Server6StatPeriod = &v
}

// GetServer6StatTime returns the Server6StatTime field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetServer6StatTime() string {
	if o == nil || IsNil(o.Server6StatTime) {
		var ret string
		return ret
	}
	return *o.Server6StatTime
}

// GetServer6StatTimeOk returns a tuple with the Server6StatTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetServer6StatTimeOk() (*string, bool) {
	if o == nil || IsNil(o.Server6StatTime) {
		return nil, false
	}
	return o.Server6StatTime, true
}

// HasServer6StatTime returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasServer6StatTime() bool {
	if o != nil && !IsNil(o.Server6StatTime) {
		return true
	}

	return false
}

// SetServer6StatTime gets a reference to the given string and assigns it to the Server6StatTime field.
func (o *DataInnerDhcpServer6Data) SetServer6StatTime(v string) {
	o.Server6StatTime = &v
}

// GetTotalSmartMembers returns the TotalSmartMembers field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetTotalSmartMembers() string {
	if o == nil || IsNil(o.TotalSmartMembers) {
		var ret string
		return ret
	}
	return *o.TotalSmartMembers
}

// GetTotalSmartMembersOk returns a tuple with the TotalSmartMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetTotalSmartMembersOk() (*string, bool) {
	if o == nil || IsNil(o.TotalSmartMembers) {
		return nil, false
	}
	return o.TotalSmartMembers, true
}

// HasTotalSmartMembers returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasTotalSmartMembers() bool {
	if o != nil && !IsNil(o.TotalSmartMembers) {
		return true
	}

	return false
}

// SetTotalSmartMembers gets a reference to the given string and assigns it to the TotalSmartMembers field.
func (o *DataInnerDhcpServer6Data) SetTotalSmartMembers(v string) {
	o.TotalSmartMembers = &v
}

// GetSmartArch returns the SmartArch field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetSmartArch() string {
	if o == nil || IsNil(o.SmartArch) {
		var ret string
		return ret
	}
	return *o.SmartArch
}

// GetSmartArchOk returns a tuple with the SmartArch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetSmartArchOk() (*string, bool) {
	if o == nil || IsNil(o.SmartArch) {
		return nil, false
	}
	return o.SmartArch, true
}

// HasSmartArch returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasSmartArch() bool {
	if o != nil && !IsNil(o.SmartArch) {
		return true
	}

	return false
}

// SetSmartArch gets a reference to the given string and assigns it to the SmartArch field.
func (o *DataInnerDhcpServer6Data) SetSmartArch(v string) {
	o.SmartArch = &v
}

// GetSmartMembersName returns the SmartMembersName field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetSmartMembersName() string {
	if o == nil || IsNil(o.SmartMembersName) {
		var ret string
		return ret
	}
	return *o.SmartMembersName
}

// GetSmartMembersNameOk returns a tuple with the SmartMembersName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetSmartMembersNameOk() (*string, bool) {
	if o == nil || IsNil(o.SmartMembersName) {
		return nil, false
	}
	return o.SmartMembersName, true
}

// HasSmartMembersName returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasSmartMembersName() bool {
	if o != nil && !IsNil(o.SmartMembersName) {
		return true
	}

	return false
}

// SetSmartMembersName gets a reference to the given string and assigns it to the SmartMembersName field.
func (o *DataInnerDhcpServer6Data) SetSmartMembersName(v string) {
	o.SmartMembersName = &v
}

// GetSmartParam1 returns the SmartParam1 field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetSmartParam1() string {
	if o == nil || IsNil(o.SmartParam1) {
		var ret string
		return ret
	}
	return *o.SmartParam1
}

// GetSmartParam1Ok returns a tuple with the SmartParam1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetSmartParam1Ok() (*string, bool) {
	if o == nil || IsNil(o.SmartParam1) {
		return nil, false
	}
	return o.SmartParam1, true
}

// HasSmartParam1 returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasSmartParam1() bool {
	if o != nil && !IsNil(o.SmartParam1) {
		return true
	}

	return false
}

// SetSmartParam1 gets a reference to the given string and assigns it to the SmartParam1 field.
func (o *DataInnerDhcpServer6Data) SetSmartParam1(v string) {
	o.SmartParam1 = &v
}

// GetSmartParentArch returns the SmartParentArch field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetSmartParentArch() string {
	if o == nil || IsNil(o.SmartParentArch) {
		var ret string
		return ret
	}
	return *o.SmartParentArch
}

// GetSmartParentArchOk returns a tuple with the SmartParentArch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetSmartParentArchOk() (*string, bool) {
	if o == nil || IsNil(o.SmartParentArch) {
		return nil, false
	}
	return o.SmartParentArch, true
}

// HasSmartParentArch returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasSmartParentArch() bool {
	if o != nil && !IsNil(o.SmartParentArch) {
		return true
	}

	return false
}

// SetSmartParentArch gets a reference to the given string and assigns it to the SmartParentArch field.
func (o *DataInnerDhcpServer6Data) SetSmartParentArch(v string) {
	o.SmartParentArch = &v
}

// GetSmartParentId returns the SmartParentId field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetSmartParentId() string {
	if o == nil || IsNil(o.SmartParentId) {
		var ret string
		return ret
	}
	return *o.SmartParentId
}

// GetSmartParentIdOk returns a tuple with the SmartParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetSmartParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.SmartParentId) {
		return nil, false
	}
	return o.SmartParentId, true
}

// HasSmartParentId returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasSmartParentId() bool {
	if o != nil && !IsNil(o.SmartParentId) {
		return true
	}

	return false
}

// SetSmartParentId gets a reference to the given string and assigns it to the SmartParentId field.
func (o *DataInnerDhcpServer6Data) SetSmartParentId(v string) {
	o.SmartParentId = &v
}

// GetSmartParentName returns the SmartParentName field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetSmartParentName() string {
	if o == nil || IsNil(o.SmartParentName) {
		var ret string
		return ret
	}
	return *o.SmartParentName
}

// GetSmartParentNameOk returns a tuple with the SmartParentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetSmartParentNameOk() (*string, bool) {
	if o == nil || IsNil(o.SmartParentName) {
		return nil, false
	}
	return o.SmartParentName, true
}

// HasSmartParentName returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasSmartParentName() bool {
	if o != nil && !IsNil(o.SmartParentName) {
		return true
	}

	return false
}

// SetSmartParentName gets a reference to the given string and assigns it to the SmartParentName field.
func (o *DataInnerDhcpServer6Data) SetSmartParentName(v string) {
	o.SmartParentName = &v
}

// GetSmartRef1Server6Id returns the SmartRef1Server6Id field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetSmartRef1Server6Id() string {
	if o == nil || IsNil(o.SmartRef1Server6Id) {
		var ret string
		return ret
	}
	return *o.SmartRef1Server6Id
}

// GetSmartRef1Server6IdOk returns a tuple with the SmartRef1Server6Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetSmartRef1Server6IdOk() (*string, bool) {
	if o == nil || IsNil(o.SmartRef1Server6Id) {
		return nil, false
	}
	return o.SmartRef1Server6Id, true
}

// HasSmartRef1Server6Id returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasSmartRef1Server6Id() bool {
	if o != nil && !IsNil(o.SmartRef1Server6Id) {
		return true
	}

	return false
}

// SetSmartRef1Server6Id gets a reference to the given string and assigns it to the SmartRef1Server6Id field.
func (o *DataInnerDhcpServer6Data) SetSmartRef1Server6Id(v string) {
	o.SmartRef1Server6Id = &v
}

// GetSmartRef1Server6Name returns the SmartRef1Server6Name field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetSmartRef1Server6Name() string {
	if o == nil || IsNil(o.SmartRef1Server6Name) {
		var ret string
		return ret
	}
	return *o.SmartRef1Server6Name
}

// GetSmartRef1Server6NameOk returns a tuple with the SmartRef1Server6Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetSmartRef1Server6NameOk() (*string, bool) {
	if o == nil || IsNil(o.SmartRef1Server6Name) {
		return nil, false
	}
	return o.SmartRef1Server6Name, true
}

// HasSmartRef1Server6Name returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasSmartRef1Server6Name() bool {
	if o != nil && !IsNil(o.SmartRef1Server6Name) {
		return true
	}

	return false
}

// SetSmartRef1Server6Name gets a reference to the given string and assigns it to the SmartRef1Server6Name field.
func (o *DataInnerDhcpServer6Data) SetSmartRef1Server6Name(v string) {
	o.SmartRef1Server6Name = &v
}

// GetSmartRef2Server6Id returns the SmartRef2Server6Id field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetSmartRef2Server6Id() string {
	if o == nil || IsNil(o.SmartRef2Server6Id) {
		var ret string
		return ret
	}
	return *o.SmartRef2Server6Id
}

// GetSmartRef2Server6IdOk returns a tuple with the SmartRef2Server6Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetSmartRef2Server6IdOk() (*string, bool) {
	if o == nil || IsNil(o.SmartRef2Server6Id) {
		return nil, false
	}
	return o.SmartRef2Server6Id, true
}

// HasSmartRef2Server6Id returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasSmartRef2Server6Id() bool {
	if o != nil && !IsNil(o.SmartRef2Server6Id) {
		return true
	}

	return false
}

// SetSmartRef2Server6Id gets a reference to the given string and assigns it to the SmartRef2Server6Id field.
func (o *DataInnerDhcpServer6Data) SetSmartRef2Server6Id(v string) {
	o.SmartRef2Server6Id = &v
}

// GetSmartRef2Server6Name returns the SmartRef2Server6Name field value if set, zero value otherwise.
func (o *DataInnerDhcpServer6Data) GetSmartRef2Server6Name() string {
	if o == nil || IsNil(o.SmartRef2Server6Name) {
		var ret string
		return ret
	}
	return *o.SmartRef2Server6Name
}

// GetSmartRef2Server6NameOk returns a tuple with the SmartRef2Server6Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServer6Data) GetSmartRef2Server6NameOk() (*string, bool) {
	if o == nil || IsNil(o.SmartRef2Server6Name) {
		return nil, false
	}
	return o.SmartRef2Server6Name, true
}

// HasSmartRef2Server6Name returns a boolean if a field has been set.
func (o *DataInnerDhcpServer6Data) HasSmartRef2Server6Name() bool {
	if o != nil && !IsNil(o.SmartRef2Server6Name) {
		return true
	}

	return false
}

// SetSmartRef2Server6Name gets a reference to the given string and assigns it to the SmartRef2Server6Name field.
func (o *DataInnerDhcpServer6Data) SetSmartRef2Server6Name(v string) {
	o.SmartRef2Server6Name = &v
}

func (o DataInnerDhcpServer6Data) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataInnerDhcpServer6Data) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConnectionprofileName) {
		toSerialize["connectionprofile_name"] = o.ConnectionprofileName
	}
	if !IsNil(o.Server6ClassName) {
		toSerialize["server6_class_name"] = o.Server6ClassName
	}
	if !IsNil(o.Server6ClassParameters) {
		toSerialize["server6_class_parameters"] = o.Server6ClassParameters
	}
	if !IsNil(o.Server6Comment) {
		toSerialize["server6_comment"] = o.Server6Comment
	}
	if !IsNil(o.Server6Id) {
		toSerialize["server6_id"] = o.Server6Id
	}
	if !IsNil(o.Server6LastRefreshTime) {
		toSerialize["server6_last_refresh_time"] = o.Server6LastRefreshTime
	}
	if !IsNil(o.Server6Name) {
		toSerialize["server6_name"] = o.Server6Name
	}
	if !IsNil(o.Server6State) {
		toSerialize["server6_state"] = o.Server6State
	}
	if !IsNil(o.Server6Synching) {
		toSerialize["server6_synching"] = o.Server6Synching
	}
	if !IsNil(o.Server6Type) {
		toSerialize["server6_type"] = o.Server6Type
	}
	if !IsNil(o.Server6Uboottime) {
		toSerialize["server6_uboottime"] = o.Server6Uboottime
	}
	if !IsNil(o.Server6Version) {
		toSerialize["server6_version"] = o.Server6Version
	}
	if !IsNil(o.Server6Hostaddr) {
		toSerialize["server6_hostaddr"] = o.Server6Hostaddr
	}
	if !IsNil(o.Server6Addr6) {
		toSerialize["server6_addr6"] = o.Server6Addr6
	}
	if !IsNil(o.Server6Addr) {
		toSerialize["server6_addr"] = o.Server6Addr
	}
	if !IsNil(o.Server6HttpsLogin) {
		toSerialize["server6_https_login"] = o.Server6HttpsLogin
	}
	if !IsNil(o.Server6IsPackage) {
		toSerialize["server6_is_package"] = o.Server6IsPackage
	}
	if !IsNil(o.Server6Isolated) {
		toSerialize["server6_isolated"] = o.Server6Isolated
	}
	if !IsNil(o.Server6Multistatus) {
		toSerialize["server6_multistatus"] = o.Server6Multistatus
	}
	if !IsNil(o.ReverseProxyConf) {
		toSerialize["reverse_proxy_conf"] = o.ReverseProxyConf
	}
	if !IsNil(o.Server6SnmpId) {
		toSerialize["server6_snmp_id"] = o.Server6SnmpId
	}
	if !IsNil(o.Server6SnmpPort) {
		toSerialize["server6_snmp_port"] = o.Server6SnmpPort
	}
	if !IsNil(o.Server6SnmpProfileId) {
		toSerialize["server6_snmp_profile_id"] = o.Server6SnmpProfileId
	}
	if !IsNil(o.Server6SnmpRetry) {
		toSerialize["server6_snmp_retry"] = o.Server6SnmpRetry
	}
	if !IsNil(o.Server6SnmpTimeout) {
		toSerialize["server6_snmp_timeout"] = o.Server6SnmpTimeout
	}
	if !IsNil(o.Server6SnmpUseTcp) {
		toSerialize["server6_snmp_use_tcp"] = o.Server6SnmpUseTcp
	}
	if !IsNil(o.Server6StatEnabled) {
		toSerialize["server6_stat_enabled"] = o.Server6StatEnabled
	}
	if !IsNil(o.Server6StatNiceness) {
		toSerialize["server6_stat_niceness"] = o.Server6StatNiceness
	}
	if !IsNil(o.Server6StatPeriod) {
		toSerialize["server6_stat_period"] = o.Server6StatPeriod
	}
	if !IsNil(o.Server6StatTime) {
		toSerialize["server6_stat_time"] = o.Server6StatTime
	}
	if !IsNil(o.TotalSmartMembers) {
		toSerialize["total_smart_members"] = o.TotalSmartMembers
	}
	if !IsNil(o.SmartArch) {
		toSerialize["smart_arch"] = o.SmartArch
	}
	if !IsNil(o.SmartMembersName) {
		toSerialize["smart_members_name"] = o.SmartMembersName
	}
	if !IsNil(o.SmartParam1) {
		toSerialize["smart_param1"] = o.SmartParam1
	}
	if !IsNil(o.SmartParentArch) {
		toSerialize["smart_parent_arch"] = o.SmartParentArch
	}
	if !IsNil(o.SmartParentId) {
		toSerialize["smart_parent_id"] = o.SmartParentId
	}
	if !IsNil(o.SmartParentName) {
		toSerialize["smart_parent_name"] = o.SmartParentName
	}
	if !IsNil(o.SmartRef1Server6Id) {
		toSerialize["smart_ref1_server6_id"] = o.SmartRef1Server6Id
	}
	if !IsNil(o.SmartRef1Server6Name) {
		toSerialize["smart_ref1_server6_name"] = o.SmartRef1Server6Name
	}
	if !IsNil(o.SmartRef2Server6Id) {
		toSerialize["smart_ref2_server6_id"] = o.SmartRef2Server6Id
	}
	if !IsNil(o.SmartRef2Server6Name) {
		toSerialize["smart_ref2_server6_name"] = o.SmartRef2Server6Name
	}
	return toSerialize, nil
}

type NullableDataInnerDhcpServer6Data struct {
	value *DataInnerDhcpServer6Data
	isSet bool
}

func (v NullableDataInnerDhcpServer6Data) Get() *DataInnerDhcpServer6Data {
	return v.value
}

func (v *NullableDataInnerDhcpServer6Data) Set(val *DataInnerDhcpServer6Data) {
	v.value = val
	v.isSet = true
}

func (v NullableDataInnerDhcpServer6Data) IsSet() bool {
	return v.isSet
}

func (v *NullableDataInnerDhcpServer6Data) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataInnerDhcpServer6Data(val *DataInnerDhcpServer6Data) *NullableDataInnerDhcpServer6Data {
	return &NullableDataInnerDhcpServer6Data{value: val, isSet: true}
}

func (v NullableDataInnerDhcpServer6Data) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataInnerDhcpServer6Data) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
