/*
SOLIDserver API

OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2024 EfficientIP</p><p><em>All specifications and information regarding the products in this document are subject to change without notice and should not be construed as a commitment by EfficientIP. EfficientIP assumes no responsibility or liability for any mistakes or inaccuracies that may appear in this document. All statements and recommendations in this document are believed to be accurate but are presented without warranty. Users must take full responsibility for their application of any product.</em></p><p><em>This document aims at detailing EfficientIP proprietary solutions. As our solutions rely on several third-party products, created by other companies or organizations, it may redirect readers to third-party websites and documentation for further information. In such a case, EfficientIP cannot be liable or expected to provide said information on products they do maintain or created.</em></p><p>Generated (Friday 4th of October 2024 03:41:11 PM)</p>

API version: 2.0
Contact: support-api@efficientip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// checks if the DataInnerDnsAclData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataInnerDnsAclData{}

// DataInnerDnsAclData struct for DataInnerDnsAclData
type DataInnerDnsAclData struct {
	// The database identifier (ID) of the DNS server the object belongs to.
	ServerId *string `json:"server_id,omitempty"`
	// The database identifier (ID) of the DNS ACL.
	AclId *string `json:"acl_id,omitempty"`
	// The name of the DNS ACL.
	AclName *string `json:"acl_name,omitempty"`
	// The values of the DNS ACL in order of priority, as follows: &lt;value_1&gt;;&lt;value_2&gt;... .
	AclValue *string `json:"acl_value,omitempty"`
}

// NewDataInnerDnsAclData instantiates a new DataInnerDnsAclData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataInnerDnsAclData() *DataInnerDnsAclData {
	this := DataInnerDnsAclData{}
	return &this
}

// NewDataInnerDnsAclDataWithDefaults instantiates a new DataInnerDnsAclData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataInnerDnsAclDataWithDefaults() *DataInnerDnsAclData {
	this := DataInnerDnsAclData{}
	return &this
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *DataInnerDnsAclData) GetServerId() string {
	if o == nil || IsNil(o.ServerId) {
		var ret string
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsAclData) GetServerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServerId) {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *DataInnerDnsAclData) HasServerId() bool {
	if o != nil && !IsNil(o.ServerId) {
		return true
	}

	return false
}

// SetServerId gets a reference to the given string and assigns it to the ServerId field.
func (o *DataInnerDnsAclData) SetServerId(v string) {
	o.ServerId = &v
}

// GetAclId returns the AclId field value if set, zero value otherwise.
func (o *DataInnerDnsAclData) GetAclId() string {
	if o == nil || IsNil(o.AclId) {
		var ret string
		return ret
	}
	return *o.AclId
}

// GetAclIdOk returns a tuple with the AclId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsAclData) GetAclIdOk() (*string, bool) {
	if o == nil || IsNil(o.AclId) {
		return nil, false
	}
	return o.AclId, true
}

// HasAclId returns a boolean if a field has been set.
func (o *DataInnerDnsAclData) HasAclId() bool {
	if o != nil && !IsNil(o.AclId) {
		return true
	}

	return false
}

// SetAclId gets a reference to the given string and assigns it to the AclId field.
func (o *DataInnerDnsAclData) SetAclId(v string) {
	o.AclId = &v
}

// GetAclName returns the AclName field value if set, zero value otherwise.
func (o *DataInnerDnsAclData) GetAclName() string {
	if o == nil || IsNil(o.AclName) {
		var ret string
		return ret
	}
	return *o.AclName
}

// GetAclNameOk returns a tuple with the AclName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsAclData) GetAclNameOk() (*string, bool) {
	if o == nil || IsNil(o.AclName) {
		return nil, false
	}
	return o.AclName, true
}

// HasAclName returns a boolean if a field has been set.
func (o *DataInnerDnsAclData) HasAclName() bool {
	if o != nil && !IsNil(o.AclName) {
		return true
	}

	return false
}

// SetAclName gets a reference to the given string and assigns it to the AclName field.
func (o *DataInnerDnsAclData) SetAclName(v string) {
	o.AclName = &v
}

// GetAclValue returns the AclValue field value if set, zero value otherwise.
func (o *DataInnerDnsAclData) GetAclValue() string {
	if o == nil || IsNil(o.AclValue) {
		var ret string
		return ret
	}
	return *o.AclValue
}

// GetAclValueOk returns a tuple with the AclValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDnsAclData) GetAclValueOk() (*string, bool) {
	if o == nil || IsNil(o.AclValue) {
		return nil, false
	}
	return o.AclValue, true
}

// HasAclValue returns a boolean if a field has been set.
func (o *DataInnerDnsAclData) HasAclValue() bool {
	if o != nil && !IsNil(o.AclValue) {
		return true
	}

	return false
}

// SetAclValue gets a reference to the given string and assigns it to the AclValue field.
func (o *DataInnerDnsAclData) SetAclValue(v string) {
	o.AclValue = &v
}

func (o DataInnerDnsAclData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataInnerDnsAclData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ServerId) {
		toSerialize["server_id"] = o.ServerId
	}
	if !IsNil(o.AclId) {
		toSerialize["acl_id"] = o.AclId
	}
	if !IsNil(o.AclName) {
		toSerialize["acl_name"] = o.AclName
	}
	if !IsNil(o.AclValue) {
		toSerialize["acl_value"] = o.AclValue
	}
	return toSerialize, nil
}

type NullableDataInnerDnsAclData struct {
	value *DataInnerDnsAclData
	isSet bool
}

func (v NullableDataInnerDnsAclData) Get() *DataInnerDnsAclData {
	return v.value
}

func (v *NullableDataInnerDnsAclData) Set(val *DataInnerDnsAclData) {
	v.value = val
	v.isSet = true
}

func (v NullableDataInnerDnsAclData) IsSet() bool {
	return v.isSet
}

func (v *NullableDataInnerDnsAclData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataInnerDnsAclData(val *DataInnerDnsAclData) *NullableDataInnerDnsAclData {
	return &NullableDataInnerDnsAclData{value: val, isSet: true}
}

func (v NullableDataInnerDnsAclData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataInnerDnsAclData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
