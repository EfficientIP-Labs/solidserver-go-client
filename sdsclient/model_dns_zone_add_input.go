/*
 * SOLIDserver API
 *
 * OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2021 EfficientIP</p><p><em>All specifications and information regarding the products in  this document are subject to change without notice and should not be  construed as a commitment by EfficientIP. EfficientIP assumes no  responsibility or liability for any mistakes or inaccuracies that may appear  in this document. All statements and recommendations in this document are  believed to be accurate but are presented without warranty. Users must take  full responsibility for their application of any product.</em></p><p>Generated (Monday 14th of June 2021 12:30:34 PM)</p>
 *
 * API version: 2.0
 * Contact: support-api@efficientip.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// DnsZoneAddInput struct for DnsZoneAddInput
type DnsZoneAddInput struct {
	// The database identifier (ID) of the DNS server, a unique numeric key value automatically incremented when you add a DNS server. Use the ID to specify the DNS server of your choice.
	ServerId *int32 `json:"server_id,omitempty"`
	// The name of the DNS server.
	ServerName *string `json:"server_name,omitempty"`
	// The database identifier (ID) of the DNS view the object belongs to.
	ViewId *int32 `json:"view_id,omitempty"`
	// The name of the DNS view the object belongs to.
	ViewName *string `json:"view_name,omitempty"`
	// The name of the DNS zone, each DNS zone must have a unique name. For hint zones (<b>dnszone_type</b>: <b>hint</b>), you must specify <b>.</b> (dot) as <b>dnszone_name</b>.
	ZoneName *string `json:"zone_name,omitempty"`
	// The type of the DNS zone, either <b>master</b>, <b>slave</b>, <b>forward</b>, <b>stub</b>, <b>hint</b> or <b>delegation-only</b>.
	ZoneType *string `json:"zone_type,omitempty"`
	// The IP address of the DNS server.
	ServerHostaddr *string `json:"server_hostaddr,omitempty"`
	// The AD integrated status of the DNS zone. Set it to <b>1</b> to indicate that the DNS zone belongs to an Active Directory integrated Microsoft DNS server.
	ZoneAdIntegrated *int32 `json:"zone_ad_integrated,omitempty"`
	// The ACL values associated with the allow-query configuration of the DNS zone, as follows: <b>&lt;value1&gt;;&lt;value2&gt;;... </b>. Values may include IP and network addresses, the name of TSIG keys and ACLs, preceded by <b>!</b> if the access is denied.
	ZoneAllowQuery *string `json:"zone_allow_query,omitempty"`
	// The ACL values associated with the allow-transfer configuration of the DNS zone, as follows: <b>&lt;value1&gt;;&lt;value2&gt;;... </b>. Values may include IP and network addresses, the name of TSIG keys and ACLs, preceded by <b>!</b> if the access is denied.
	ZoneAllowTransfer *string `json:"zone_allow_transfer,omitempty"`
	// The ACL values associated with the allow-update configuration of the DNS zone, as follows: <b>&lt;value1&gt;;&lt;value2&gt;;... </b>. Values may include IP and network addresses, the name of TSIG keys and ACLs, preceded by <b>!</b> if the access is denied.
	ZoneAllowUpdate *string `json:"zone_allow_update,omitempty"`
	// The IP address and port of the DNS server managing the smart architecture the DNS zone belongs to. If the parameter <b>dnszone_notify</b> is set to <b>yes</b> or <b>explicit</b>, the server specified is instantly notified of any slave zones updates.
	ZoneAlsoNotify *string `json:"zone_also_notify,omitempty"`
	// The forwarding mode of the DNS zone.<table><caption>dnszone_forward possible values</caption><br/><thead><tr><th>Status</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >first</td><td >The zone sends the queries to the forwarder(s). If no answer is returned, it attempts to answer the queries on its own.</td></tr><tr><td >only</td><td >The zone only forwards the queries to the forwarder(s). Required by some reverse forward zones (e.g., in the case of private addresses).</td></tr></tbody></table></p><br/> If the parameter has no value, it indicates that the forwarding is disabled.
	ZoneForward *string `json:"zone_forward,omitempty"`
	// The IP address(es) of the forwarder(s) associated with the DNS zone. It lists the DNS servers to which any unknown query on this zone should be sent, as follows: <b>&lt;ip_address1&gt;;&lt;ip_address2&gt;;...</b> .
	ZoneForwarders *string `json:"zone_forwarders,omitempty"`
	// The RPZ status of the DNS zone. Set it to <b>1</b> to indicate that the DNS zone is a Response Policy Zone.
	ZoneIsRpz *int32 `json:"zone_is_rpz,omitempty"`
	// For slave DNS zones, the IP address of the DNS server and, if relevant, the name of the DNS view that contain the master DNS zone, as follows: <b>&lt;ip_addr&gt;;</b> or <b>&lt;ip_addr&gt; key &lt;dnsview_name&gt;;</b> .
	ZoneMasters *string `json:"zone_masters,omitempty"`
	// The notify status of the DNS zone.<table><caption>dnszone_notify possible values</caption><br/><thead><tr><th>Status</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >no</td><td >No notify message is sent.</td></tr><tr><td >yes</td><td >A notify message is sent to the name servers defined in the NS records of the zone and to the IP address(es) specified in the parameter .</td></tr><tr><td >explicit</td><td >A notify message is sent only to the IP address(es) specified in the parameter .</td></tr></tbody></table></p><br/>The notify message is not sent to the server itself or to the primary server defined in the SOA record of the zone.
	ZoneNotify *string `json:"zone_notify,omitempty"`
	// The level of the DNS RPZ zone, where 0 represents the highest level in the views hierarchy. The RPZ rules of each zone are reviewed following this order. For non-RPZ zones, that have their parameter zone_is_rpz set to <b>0</b>, you do not need to set this parameter.
	ZoneOrder *int32 `json:"zone_order,omitempty"`
	// The response policy of the DNS zone.<table><caption>dnszone_response_policy possible values</caption><br/><thead><tr><th>Policy</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >given</td><td >All the rules specified in the RPZ zone are applied normally.</td></tr><tr><td >disabled</td><td >The RPZ zone rules configuration is not applied. All the rules it contains are ignored.</td></tr><tr><td >passthru</td><td >The rules specified in the RPZ matching the listed RR names are ignored, no matter the RPZ zone they belong to.</td></tr><tr><td >nxdomain</td><td >The rules specified in the RPZ return an NXDOMAIN response.</td></tr><tr><td >nodata</td><td >The rules specified in the RPZ return a NODATA response.</td></tr><tr><td >cname <domain-name></td><td >All the rules specified in the RPZ are redirected toward the specified domain name.</td></tr></tbody></table></p><br/>You can only add RPZ zones on EfficientIP or BIND DNS servers.
	ZoneResponsePolicy *string `json:"zone_response_policy,omitempty"`
	// TODO:dns_zone_add.input.zone_rpz_log
	ZoneRpzLog *int32 `json:"zone_rpz_log,omitempty"`
	// The database identifier (ID) of the space associated with the DNS zone the record belongs to.
	ZoneSpaceId *int32 `json:"zone_space_id,omitempty"`
	// The name of the space associated with the DNS zone the record belongs to.
	ZoneSpaceName *string `json:"zone_space_name,omitempty"`
	// The object activation status.<ul class=dashed ><li>                                                If set to <b>0</b>, the object is present in the database but ignored, i.e. it cannot be managed, counted or listed. This status is applied on objects deleted from the GUI.<br/>                                            </li><li>                                                If set to <b>1</b>, the object is enabled and managed.<br/>                                            </li><li>                                                If set to <b>2</b>, the object is unmanaged, disabled or both depending on the context.<br/>                                            </li></ul>By default, <b>row_enabled</b> is set to <b>1</b> when an object is created.
	RowState *int32 `json:"row_state,omitempty"`
	// The update policy status of the DNS zone. Set it to <b>1</b> to indicate that the DNS zone uses a specific GSS-TSIG/update-policy. You can only configure the zone update policy if the parameter <b>gss_enabled</b> of the server it belongs to is set to <b>1</b>.
	ZoneUseUpdatePolicy *int32 `json:"zone_use_update_policy,omitempty"`
	// class parameters you want to delete from the object
	ClassParametersToDelete *[]string `json:"class_parameters_to_delete,omitempty"`
	// The name of the class to apply to the object you are adding. You must specify the class file directory, e.g. <b>my_directory/my_class.class</b> . You cannot use the classes <b>global</b> and <b>default</b>, they are reserved by the system.
	ZoneClassName *string `json:"zone_class_name,omitempty"`
	// class parameters in json format
	ZoneClassParameters *[]ApiClassParameterInputEntry `json:"zone_class_parameters,omitempty"`
	// A way to bypass <b>(accept) </b>any enabled rule that would return warning messages. If the service returns an error message, you cannot bypass the enabled rules.
	Warnings *string `json:"warnings,omitempty"`
}

// NewDnsZoneAddInput instantiates a new DnsZoneAddInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnsZoneAddInput() *DnsZoneAddInput {
	this := DnsZoneAddInput{}
	return &this
}

// NewDnsZoneAddInputWithDefaults instantiates a new DnsZoneAddInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsZoneAddInputWithDefaults() *DnsZoneAddInput {
	this := DnsZoneAddInput{}
	return &this
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *DnsZoneAddInput) GetServerId() int32 {
	if o == nil || o.ServerId == nil {
		var ret int32
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneAddInput) GetServerIdOk() (*int32, bool) {
	if o == nil || o.ServerId == nil {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *DnsZoneAddInput) HasServerId() bool {
	if o != nil && o.ServerId != nil {
		return true
	}

	return false
}

// SetServerId gets a reference to the given int32 and assigns it to the ServerId field.
func (o *DnsZoneAddInput) SetServerId(v int32) {
	o.ServerId = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *DnsZoneAddInput) GetServerName() string {
	if o == nil || o.ServerName == nil {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneAddInput) GetServerNameOk() (*string, bool) {
	if o == nil || o.ServerName == nil {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *DnsZoneAddInput) HasServerName() bool {
	if o != nil && o.ServerName != nil {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *DnsZoneAddInput) SetServerName(v string) {
	o.ServerName = &v
}

// GetViewId returns the ViewId field value if set, zero value otherwise.
func (o *DnsZoneAddInput) GetViewId() int32 {
	if o == nil || o.ViewId == nil {
		var ret int32
		return ret
	}
	return *o.ViewId
}

// GetViewIdOk returns a tuple with the ViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneAddInput) GetViewIdOk() (*int32, bool) {
	if o == nil || o.ViewId == nil {
		return nil, false
	}
	return o.ViewId, true
}

// HasViewId returns a boolean if a field has been set.
func (o *DnsZoneAddInput) HasViewId() bool {
	if o != nil && o.ViewId != nil {
		return true
	}

	return false
}

// SetViewId gets a reference to the given int32 and assigns it to the ViewId field.
func (o *DnsZoneAddInput) SetViewId(v int32) {
	o.ViewId = &v
}

// GetViewName returns the ViewName field value if set, zero value otherwise.
func (o *DnsZoneAddInput) GetViewName() string {
	if o == nil || o.ViewName == nil {
		var ret string
		return ret
	}
	return *o.ViewName
}

// GetViewNameOk returns a tuple with the ViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneAddInput) GetViewNameOk() (*string, bool) {
	if o == nil || o.ViewName == nil {
		return nil, false
	}
	return o.ViewName, true
}

// HasViewName returns a boolean if a field has been set.
func (o *DnsZoneAddInput) HasViewName() bool {
	if o != nil && o.ViewName != nil {
		return true
	}

	return false
}

// SetViewName gets a reference to the given string and assigns it to the ViewName field.
func (o *DnsZoneAddInput) SetViewName(v string) {
	o.ViewName = &v
}

// GetZoneName returns the ZoneName field value if set, zero value otherwise.
func (o *DnsZoneAddInput) GetZoneName() string {
	if o == nil || o.ZoneName == nil {
		var ret string
		return ret
	}
	return *o.ZoneName
}

// GetZoneNameOk returns a tuple with the ZoneName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneAddInput) GetZoneNameOk() (*string, bool) {
	if o == nil || o.ZoneName == nil {
		return nil, false
	}
	return o.ZoneName, true
}

// HasZoneName returns a boolean if a field has been set.
func (o *DnsZoneAddInput) HasZoneName() bool {
	if o != nil && o.ZoneName != nil {
		return true
	}

	return false
}

// SetZoneName gets a reference to the given string and assigns it to the ZoneName field.
func (o *DnsZoneAddInput) SetZoneName(v string) {
	o.ZoneName = &v
}

// GetZoneType returns the ZoneType field value if set, zero value otherwise.
func (o *DnsZoneAddInput) GetZoneType() string {
	if o == nil || o.ZoneType == nil {
		var ret string
		return ret
	}
	return *o.ZoneType
}

// GetZoneTypeOk returns a tuple with the ZoneType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneAddInput) GetZoneTypeOk() (*string, bool) {
	if o == nil || o.ZoneType == nil {
		return nil, false
	}
	return o.ZoneType, true
}

// HasZoneType returns a boolean if a field has been set.
func (o *DnsZoneAddInput) HasZoneType() bool {
	if o != nil && o.ZoneType != nil {
		return true
	}

	return false
}

// SetZoneType gets a reference to the given string and assigns it to the ZoneType field.
func (o *DnsZoneAddInput) SetZoneType(v string) {
	o.ZoneType = &v
}

// GetServerHostaddr returns the ServerHostaddr field value if set, zero value otherwise.
func (o *DnsZoneAddInput) GetServerHostaddr() string {
	if o == nil || o.ServerHostaddr == nil {
		var ret string
		return ret
	}
	return *o.ServerHostaddr
}

// GetServerHostaddrOk returns a tuple with the ServerHostaddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneAddInput) GetServerHostaddrOk() (*string, bool) {
	if o == nil || o.ServerHostaddr == nil {
		return nil, false
	}
	return o.ServerHostaddr, true
}

// HasServerHostaddr returns a boolean if a field has been set.
func (o *DnsZoneAddInput) HasServerHostaddr() bool {
	if o != nil && o.ServerHostaddr != nil {
		return true
	}

	return false
}

// SetServerHostaddr gets a reference to the given string and assigns it to the ServerHostaddr field.
func (o *DnsZoneAddInput) SetServerHostaddr(v string) {
	o.ServerHostaddr = &v
}

// GetZoneAdIntegrated returns the ZoneAdIntegrated field value if set, zero value otherwise.
func (o *DnsZoneAddInput) GetZoneAdIntegrated() int32 {
	if o == nil || o.ZoneAdIntegrated == nil {
		var ret int32
		return ret
	}
	return *o.ZoneAdIntegrated
}

// GetZoneAdIntegratedOk returns a tuple with the ZoneAdIntegrated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneAddInput) GetZoneAdIntegratedOk() (*int32, bool) {
	if o == nil || o.ZoneAdIntegrated == nil {
		return nil, false
	}
	return o.ZoneAdIntegrated, true
}

// HasZoneAdIntegrated returns a boolean if a field has been set.
func (o *DnsZoneAddInput) HasZoneAdIntegrated() bool {
	if o != nil && o.ZoneAdIntegrated != nil {
		return true
	}

	return false
}

// SetZoneAdIntegrated gets a reference to the given int32 and assigns it to the ZoneAdIntegrated field.
func (o *DnsZoneAddInput) SetZoneAdIntegrated(v int32) {
	o.ZoneAdIntegrated = &v
}

// GetZoneAllowQuery returns the ZoneAllowQuery field value if set, zero value otherwise.
func (o *DnsZoneAddInput) GetZoneAllowQuery() string {
	if o == nil || o.ZoneAllowQuery == nil {
		var ret string
		return ret
	}
	return *o.ZoneAllowQuery
}

// GetZoneAllowQueryOk returns a tuple with the ZoneAllowQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneAddInput) GetZoneAllowQueryOk() (*string, bool) {
	if o == nil || o.ZoneAllowQuery == nil {
		return nil, false
	}
	return o.ZoneAllowQuery, true
}

// HasZoneAllowQuery returns a boolean if a field has been set.
func (o *DnsZoneAddInput) HasZoneAllowQuery() bool {
	if o != nil && o.ZoneAllowQuery != nil {
		return true
	}

	return false
}

// SetZoneAllowQuery gets a reference to the given string and assigns it to the ZoneAllowQuery field.
func (o *DnsZoneAddInput) SetZoneAllowQuery(v string) {
	o.ZoneAllowQuery = &v
}

// GetZoneAllowTransfer returns the ZoneAllowTransfer field value if set, zero value otherwise.
func (o *DnsZoneAddInput) GetZoneAllowTransfer() string {
	if o == nil || o.ZoneAllowTransfer == nil {
		var ret string
		return ret
	}
	return *o.ZoneAllowTransfer
}

// GetZoneAllowTransferOk returns a tuple with the ZoneAllowTransfer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneAddInput) GetZoneAllowTransferOk() (*string, bool) {
	if o == nil || o.ZoneAllowTransfer == nil {
		return nil, false
	}
	return o.ZoneAllowTransfer, true
}

// HasZoneAllowTransfer returns a boolean if a field has been set.
func (o *DnsZoneAddInput) HasZoneAllowTransfer() bool {
	if o != nil && o.ZoneAllowTransfer != nil {
		return true
	}

	return false
}

// SetZoneAllowTransfer gets a reference to the given string and assigns it to the ZoneAllowTransfer field.
func (o *DnsZoneAddInput) SetZoneAllowTransfer(v string) {
	o.ZoneAllowTransfer = &v
}

// GetZoneAllowUpdate returns the ZoneAllowUpdate field value if set, zero value otherwise.
func (o *DnsZoneAddInput) GetZoneAllowUpdate() string {
	if o == nil || o.ZoneAllowUpdate == nil {
		var ret string
		return ret
	}
	return *o.ZoneAllowUpdate
}

// GetZoneAllowUpdateOk returns a tuple with the ZoneAllowUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneAddInput) GetZoneAllowUpdateOk() (*string, bool) {
	if o == nil || o.ZoneAllowUpdate == nil {
		return nil, false
	}
	return o.ZoneAllowUpdate, true
}

// HasZoneAllowUpdate returns a boolean if a field has been set.
func (o *DnsZoneAddInput) HasZoneAllowUpdate() bool {
	if o != nil && o.ZoneAllowUpdate != nil {
		return true
	}

	return false
}

// SetZoneAllowUpdate gets a reference to the given string and assigns it to the ZoneAllowUpdate field.
func (o *DnsZoneAddInput) SetZoneAllowUpdate(v string) {
	o.ZoneAllowUpdate = &v
}

// GetZoneAlsoNotify returns the ZoneAlsoNotify field value if set, zero value otherwise.
func (o *DnsZoneAddInput) GetZoneAlsoNotify() string {
	if o == nil || o.ZoneAlsoNotify == nil {
		var ret string
		return ret
	}
	return *o.ZoneAlsoNotify
}

// GetZoneAlsoNotifyOk returns a tuple with the ZoneAlsoNotify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneAddInput) GetZoneAlsoNotifyOk() (*string, bool) {
	if o == nil || o.ZoneAlsoNotify == nil {
		return nil, false
	}
	return o.ZoneAlsoNotify, true
}

// HasZoneAlsoNotify returns a boolean if a field has been set.
func (o *DnsZoneAddInput) HasZoneAlsoNotify() bool {
	if o != nil && o.ZoneAlsoNotify != nil {
		return true
	}

	return false
}

// SetZoneAlsoNotify gets a reference to the given string and assigns it to the ZoneAlsoNotify field.
func (o *DnsZoneAddInput) SetZoneAlsoNotify(v string) {
	o.ZoneAlsoNotify = &v
}

// GetZoneForward returns the ZoneForward field value if set, zero value otherwise.
func (o *DnsZoneAddInput) GetZoneForward() string {
	if o == nil || o.ZoneForward == nil {
		var ret string
		return ret
	}
	return *o.ZoneForward
}

// GetZoneForwardOk returns a tuple with the ZoneForward field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneAddInput) GetZoneForwardOk() (*string, bool) {
	if o == nil || o.ZoneForward == nil {
		return nil, false
	}
	return o.ZoneForward, true
}

// HasZoneForward returns a boolean if a field has been set.
func (o *DnsZoneAddInput) HasZoneForward() bool {
	if o != nil && o.ZoneForward != nil {
		return true
	}

	return false
}

// SetZoneForward gets a reference to the given string and assigns it to the ZoneForward field.
func (o *DnsZoneAddInput) SetZoneForward(v string) {
	o.ZoneForward = &v
}

// GetZoneForwarders returns the ZoneForwarders field value if set, zero value otherwise.
func (o *DnsZoneAddInput) GetZoneForwarders() string {
	if o == nil || o.ZoneForwarders == nil {
		var ret string
		return ret
	}
	return *o.ZoneForwarders
}

// GetZoneForwardersOk returns a tuple with the ZoneForwarders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneAddInput) GetZoneForwardersOk() (*string, bool) {
	if o == nil || o.ZoneForwarders == nil {
		return nil, false
	}
	return o.ZoneForwarders, true
}

// HasZoneForwarders returns a boolean if a field has been set.
func (o *DnsZoneAddInput) HasZoneForwarders() bool {
	if o != nil && o.ZoneForwarders != nil {
		return true
	}

	return false
}

// SetZoneForwarders gets a reference to the given string and assigns it to the ZoneForwarders field.
func (o *DnsZoneAddInput) SetZoneForwarders(v string) {
	o.ZoneForwarders = &v
}

// GetZoneIsRpz returns the ZoneIsRpz field value if set, zero value otherwise.
func (o *DnsZoneAddInput) GetZoneIsRpz() int32 {
	if o == nil || o.ZoneIsRpz == nil {
		var ret int32
		return ret
	}
	return *o.ZoneIsRpz
}

// GetZoneIsRpzOk returns a tuple with the ZoneIsRpz field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneAddInput) GetZoneIsRpzOk() (*int32, bool) {
	if o == nil || o.ZoneIsRpz == nil {
		return nil, false
	}
	return o.ZoneIsRpz, true
}

// HasZoneIsRpz returns a boolean if a field has been set.
func (o *DnsZoneAddInput) HasZoneIsRpz() bool {
	if o != nil && o.ZoneIsRpz != nil {
		return true
	}

	return false
}

// SetZoneIsRpz gets a reference to the given int32 and assigns it to the ZoneIsRpz field.
func (o *DnsZoneAddInput) SetZoneIsRpz(v int32) {
	o.ZoneIsRpz = &v
}

// GetZoneMasters returns the ZoneMasters field value if set, zero value otherwise.
func (o *DnsZoneAddInput) GetZoneMasters() string {
	if o == nil || o.ZoneMasters == nil {
		var ret string
		return ret
	}
	return *o.ZoneMasters
}

// GetZoneMastersOk returns a tuple with the ZoneMasters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneAddInput) GetZoneMastersOk() (*string, bool) {
	if o == nil || o.ZoneMasters == nil {
		return nil, false
	}
	return o.ZoneMasters, true
}

// HasZoneMasters returns a boolean if a field has been set.
func (o *DnsZoneAddInput) HasZoneMasters() bool {
	if o != nil && o.ZoneMasters != nil {
		return true
	}

	return false
}

// SetZoneMasters gets a reference to the given string and assigns it to the ZoneMasters field.
func (o *DnsZoneAddInput) SetZoneMasters(v string) {
	o.ZoneMasters = &v
}

// GetZoneNotify returns the ZoneNotify field value if set, zero value otherwise.
func (o *DnsZoneAddInput) GetZoneNotify() string {
	if o == nil || o.ZoneNotify == nil {
		var ret string
		return ret
	}
	return *o.ZoneNotify
}

// GetZoneNotifyOk returns a tuple with the ZoneNotify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneAddInput) GetZoneNotifyOk() (*string, bool) {
	if o == nil || o.ZoneNotify == nil {
		return nil, false
	}
	return o.ZoneNotify, true
}

// HasZoneNotify returns a boolean if a field has been set.
func (o *DnsZoneAddInput) HasZoneNotify() bool {
	if o != nil && o.ZoneNotify != nil {
		return true
	}

	return false
}

// SetZoneNotify gets a reference to the given string and assigns it to the ZoneNotify field.
func (o *DnsZoneAddInput) SetZoneNotify(v string) {
	o.ZoneNotify = &v
}

// GetZoneOrder returns the ZoneOrder field value if set, zero value otherwise.
func (o *DnsZoneAddInput) GetZoneOrder() int32 {
	if o == nil || o.ZoneOrder == nil {
		var ret int32
		return ret
	}
	return *o.ZoneOrder
}

// GetZoneOrderOk returns a tuple with the ZoneOrder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneAddInput) GetZoneOrderOk() (*int32, bool) {
	if o == nil || o.ZoneOrder == nil {
		return nil, false
	}
	return o.ZoneOrder, true
}

// HasZoneOrder returns a boolean if a field has been set.
func (o *DnsZoneAddInput) HasZoneOrder() bool {
	if o != nil && o.ZoneOrder != nil {
		return true
	}

	return false
}

// SetZoneOrder gets a reference to the given int32 and assigns it to the ZoneOrder field.
func (o *DnsZoneAddInput) SetZoneOrder(v int32) {
	o.ZoneOrder = &v
}

// GetZoneResponsePolicy returns the ZoneResponsePolicy field value if set, zero value otherwise.
func (o *DnsZoneAddInput) GetZoneResponsePolicy() string {
	if o == nil || o.ZoneResponsePolicy == nil {
		var ret string
		return ret
	}
	return *o.ZoneResponsePolicy
}

// GetZoneResponsePolicyOk returns a tuple with the ZoneResponsePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneAddInput) GetZoneResponsePolicyOk() (*string, bool) {
	if o == nil || o.ZoneResponsePolicy == nil {
		return nil, false
	}
	return o.ZoneResponsePolicy, true
}

// HasZoneResponsePolicy returns a boolean if a field has been set.
func (o *DnsZoneAddInput) HasZoneResponsePolicy() bool {
	if o != nil && o.ZoneResponsePolicy != nil {
		return true
	}

	return false
}

// SetZoneResponsePolicy gets a reference to the given string and assigns it to the ZoneResponsePolicy field.
func (o *DnsZoneAddInput) SetZoneResponsePolicy(v string) {
	o.ZoneResponsePolicy = &v
}

// GetZoneRpzLog returns the ZoneRpzLog field value if set, zero value otherwise.
func (o *DnsZoneAddInput) GetZoneRpzLog() int32 {
	if o == nil || o.ZoneRpzLog == nil {
		var ret int32
		return ret
	}
	return *o.ZoneRpzLog
}

// GetZoneRpzLogOk returns a tuple with the ZoneRpzLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneAddInput) GetZoneRpzLogOk() (*int32, bool) {
	if o == nil || o.ZoneRpzLog == nil {
		return nil, false
	}
	return o.ZoneRpzLog, true
}

// HasZoneRpzLog returns a boolean if a field has been set.
func (o *DnsZoneAddInput) HasZoneRpzLog() bool {
	if o != nil && o.ZoneRpzLog != nil {
		return true
	}

	return false
}

// SetZoneRpzLog gets a reference to the given int32 and assigns it to the ZoneRpzLog field.
func (o *DnsZoneAddInput) SetZoneRpzLog(v int32) {
	o.ZoneRpzLog = &v
}

// GetZoneSpaceId returns the ZoneSpaceId field value if set, zero value otherwise.
func (o *DnsZoneAddInput) GetZoneSpaceId() int32 {
	if o == nil || o.ZoneSpaceId == nil {
		var ret int32
		return ret
	}
	return *o.ZoneSpaceId
}

// GetZoneSpaceIdOk returns a tuple with the ZoneSpaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneAddInput) GetZoneSpaceIdOk() (*int32, bool) {
	if o == nil || o.ZoneSpaceId == nil {
		return nil, false
	}
	return o.ZoneSpaceId, true
}

// HasZoneSpaceId returns a boolean if a field has been set.
func (o *DnsZoneAddInput) HasZoneSpaceId() bool {
	if o != nil && o.ZoneSpaceId != nil {
		return true
	}

	return false
}

// SetZoneSpaceId gets a reference to the given int32 and assigns it to the ZoneSpaceId field.
func (o *DnsZoneAddInput) SetZoneSpaceId(v int32) {
	o.ZoneSpaceId = &v
}

// GetZoneSpaceName returns the ZoneSpaceName field value if set, zero value otherwise.
func (o *DnsZoneAddInput) GetZoneSpaceName() string {
	if o == nil || o.ZoneSpaceName == nil {
		var ret string
		return ret
	}
	return *o.ZoneSpaceName
}

// GetZoneSpaceNameOk returns a tuple with the ZoneSpaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneAddInput) GetZoneSpaceNameOk() (*string, bool) {
	if o == nil || o.ZoneSpaceName == nil {
		return nil, false
	}
	return o.ZoneSpaceName, true
}

// HasZoneSpaceName returns a boolean if a field has been set.
func (o *DnsZoneAddInput) HasZoneSpaceName() bool {
	if o != nil && o.ZoneSpaceName != nil {
		return true
	}

	return false
}

// SetZoneSpaceName gets a reference to the given string and assigns it to the ZoneSpaceName field.
func (o *DnsZoneAddInput) SetZoneSpaceName(v string) {
	o.ZoneSpaceName = &v
}

// GetRowState returns the RowState field value if set, zero value otherwise.
func (o *DnsZoneAddInput) GetRowState() int32 {
	if o == nil || o.RowState == nil {
		var ret int32
		return ret
	}
	return *o.RowState
}

// GetRowStateOk returns a tuple with the RowState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneAddInput) GetRowStateOk() (*int32, bool) {
	if o == nil || o.RowState == nil {
		return nil, false
	}
	return o.RowState, true
}

// HasRowState returns a boolean if a field has been set.
func (o *DnsZoneAddInput) HasRowState() bool {
	if o != nil && o.RowState != nil {
		return true
	}

	return false
}

// SetRowState gets a reference to the given int32 and assigns it to the RowState field.
func (o *DnsZoneAddInput) SetRowState(v int32) {
	o.RowState = &v
}

// GetZoneUseUpdatePolicy returns the ZoneUseUpdatePolicy field value if set, zero value otherwise.
func (o *DnsZoneAddInput) GetZoneUseUpdatePolicy() int32 {
	if o == nil || o.ZoneUseUpdatePolicy == nil {
		var ret int32
		return ret
	}
	return *o.ZoneUseUpdatePolicy
}

// GetZoneUseUpdatePolicyOk returns a tuple with the ZoneUseUpdatePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneAddInput) GetZoneUseUpdatePolicyOk() (*int32, bool) {
	if o == nil || o.ZoneUseUpdatePolicy == nil {
		return nil, false
	}
	return o.ZoneUseUpdatePolicy, true
}

// HasZoneUseUpdatePolicy returns a boolean if a field has been set.
func (o *DnsZoneAddInput) HasZoneUseUpdatePolicy() bool {
	if o != nil && o.ZoneUseUpdatePolicy != nil {
		return true
	}

	return false
}

// SetZoneUseUpdatePolicy gets a reference to the given int32 and assigns it to the ZoneUseUpdatePolicy field.
func (o *DnsZoneAddInput) SetZoneUseUpdatePolicy(v int32) {
	o.ZoneUseUpdatePolicy = &v
}

// GetClassParametersToDelete returns the ClassParametersToDelete field value if set, zero value otherwise.
func (o *DnsZoneAddInput) GetClassParametersToDelete() []string {
	if o == nil || o.ClassParametersToDelete == nil {
		var ret []string
		return ret
	}
	return *o.ClassParametersToDelete
}

// GetClassParametersToDeleteOk returns a tuple with the ClassParametersToDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneAddInput) GetClassParametersToDeleteOk() (*[]string, bool) {
	if o == nil || o.ClassParametersToDelete == nil {
		return nil, false
	}
	return o.ClassParametersToDelete, true
}

// HasClassParametersToDelete returns a boolean if a field has been set.
func (o *DnsZoneAddInput) HasClassParametersToDelete() bool {
	if o != nil && o.ClassParametersToDelete != nil {
		return true
	}

	return false
}

// SetClassParametersToDelete gets a reference to the given []string and assigns it to the ClassParametersToDelete field.
func (o *DnsZoneAddInput) SetClassParametersToDelete(v []string) {
	o.ClassParametersToDelete = &v
}

// GetZoneClassName returns the ZoneClassName field value if set, zero value otherwise.
func (o *DnsZoneAddInput) GetZoneClassName() string {
	if o == nil || o.ZoneClassName == nil {
		var ret string
		return ret
	}
	return *o.ZoneClassName
}

// GetZoneClassNameOk returns a tuple with the ZoneClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneAddInput) GetZoneClassNameOk() (*string, bool) {
	if o == nil || o.ZoneClassName == nil {
		return nil, false
	}
	return o.ZoneClassName, true
}

// HasZoneClassName returns a boolean if a field has been set.
func (o *DnsZoneAddInput) HasZoneClassName() bool {
	if o != nil && o.ZoneClassName != nil {
		return true
	}

	return false
}

// SetZoneClassName gets a reference to the given string and assigns it to the ZoneClassName field.
func (o *DnsZoneAddInput) SetZoneClassName(v string) {
	o.ZoneClassName = &v
}

// GetZoneClassParameters returns the ZoneClassParameters field value if set, zero value otherwise.
func (o *DnsZoneAddInput) GetZoneClassParameters() []ApiClassParameterInputEntry {
	if o == nil || o.ZoneClassParameters == nil {
		var ret []ApiClassParameterInputEntry
		return ret
	}
	return *o.ZoneClassParameters
}

// GetZoneClassParametersOk returns a tuple with the ZoneClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneAddInput) GetZoneClassParametersOk() (*[]ApiClassParameterInputEntry, bool) {
	if o == nil || o.ZoneClassParameters == nil {
		return nil, false
	}
	return o.ZoneClassParameters, true
}

// HasZoneClassParameters returns a boolean if a field has been set.
func (o *DnsZoneAddInput) HasZoneClassParameters() bool {
	if o != nil && o.ZoneClassParameters != nil {
		return true
	}

	return false
}

// SetZoneClassParameters gets a reference to the given []ApiClassParameterInputEntry and assigns it to the ZoneClassParameters field.
func (o *DnsZoneAddInput) SetZoneClassParameters(v []ApiClassParameterInputEntry) {
	o.ZoneClassParameters = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *DnsZoneAddInput) GetWarnings() string {
	if o == nil || o.Warnings == nil {
		var ret string
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsZoneAddInput) GetWarningsOk() (*string, bool) {
	if o == nil || o.Warnings == nil {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *DnsZoneAddInput) HasWarnings() bool {
	if o != nil && o.Warnings != nil {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given string and assigns it to the Warnings field.
func (o *DnsZoneAddInput) SetWarnings(v string) {
	o.Warnings = &v
}

func (o DnsZoneAddInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ServerId != nil {
		toSerialize["server_id"] = o.ServerId
	}
	if o.ServerName != nil {
		toSerialize["server_name"] = o.ServerName
	}
	if o.ViewId != nil {
		toSerialize["view_id"] = o.ViewId
	}
	if o.ViewName != nil {
		toSerialize["view_name"] = o.ViewName
	}
	if o.ZoneName != nil {
		toSerialize["zone_name"] = o.ZoneName
	}
	if o.ZoneType != nil {
		toSerialize["zone_type"] = o.ZoneType
	}
	if o.ServerHostaddr != nil {
		toSerialize["server_hostaddr"] = o.ServerHostaddr
	}
	if o.ZoneAdIntegrated != nil {
		toSerialize["zone_ad_integrated"] = o.ZoneAdIntegrated
	}
	if o.ZoneAllowQuery != nil {
		toSerialize["zone_allow_query"] = o.ZoneAllowQuery
	}
	if o.ZoneAllowTransfer != nil {
		toSerialize["zone_allow_transfer"] = o.ZoneAllowTransfer
	}
	if o.ZoneAllowUpdate != nil {
		toSerialize["zone_allow_update"] = o.ZoneAllowUpdate
	}
	if o.ZoneAlsoNotify != nil {
		toSerialize["zone_also_notify"] = o.ZoneAlsoNotify
	}
	if o.ZoneForward != nil {
		toSerialize["zone_forward"] = o.ZoneForward
	}
	if o.ZoneForwarders != nil {
		toSerialize["zone_forwarders"] = o.ZoneForwarders
	}
	if o.ZoneIsRpz != nil {
		toSerialize["zone_is_rpz"] = o.ZoneIsRpz
	}
	if o.ZoneMasters != nil {
		toSerialize["zone_masters"] = o.ZoneMasters
	}
	if o.ZoneNotify != nil {
		toSerialize["zone_notify"] = o.ZoneNotify
	}
	if o.ZoneOrder != nil {
		toSerialize["zone_order"] = o.ZoneOrder
	}
	if o.ZoneResponsePolicy != nil {
		toSerialize["zone_response_policy"] = o.ZoneResponsePolicy
	}
	if o.ZoneRpzLog != nil {
		toSerialize["zone_rpz_log"] = o.ZoneRpzLog
	}
	if o.ZoneSpaceId != nil {
		toSerialize["zone_space_id"] = o.ZoneSpaceId
	}
	if o.ZoneSpaceName != nil {
		toSerialize["zone_space_name"] = o.ZoneSpaceName
	}
	if o.RowState != nil {
		toSerialize["row_state"] = o.RowState
	}
	if o.ZoneUseUpdatePolicy != nil {
		toSerialize["zone_use_update_policy"] = o.ZoneUseUpdatePolicy
	}
	if o.ClassParametersToDelete != nil {
		toSerialize["class_parameters_to_delete"] = o.ClassParametersToDelete
	}
	if o.ZoneClassName != nil {
		toSerialize["zone_class_name"] = o.ZoneClassName
	}
	if o.ZoneClassParameters != nil {
		toSerialize["zone_class_parameters"] = o.ZoneClassParameters
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	return json.Marshal(toSerialize)
}

type NullableDnsZoneAddInput struct {
	value *DnsZoneAddInput
	isSet bool
}

func (v NullableDnsZoneAddInput) Get() *DnsZoneAddInput {
	return v.value
}

func (v *NullableDnsZoneAddInput) Set(val *DnsZoneAddInput) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsZoneAddInput) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsZoneAddInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsZoneAddInput(val *DnsZoneAddInput) *NullableDnsZoneAddInput {
	return &NullableDnsZoneAddInput{value: val, isSet: true}
}

func (v NullableDnsZoneAddInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsZoneAddInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


