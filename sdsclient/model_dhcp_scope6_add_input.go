/*
 * SOLIDserver API
 *
 * OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2021 EfficientIP</p><p><em>All specifications and information regarding the products in  this document are subject to change without notice and should not be  construed as a commitment by EfficientIP. EfficientIP assumes no  responsibility or liability for any mistakes or inaccuracies that may appear  in this document. All statements and recommendations in this document are  believed to be accurate but are presented without warranty. Users must take  full responsibility for their application of any product.</em></p><p>Generated (Monday 14th of June 2021 12:30:34 PM)</p>
 *
 * API version: 2.0
 * Contact: support-api@efficientip.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// DhcpScope6AddInput struct for DhcpScope6AddInput
type DhcpScope6AddInput struct {
	// The database identifier (ID) of the DHCPv6 server, a unique numeric key value automatically incremented when you add a DHCPv6 server. Use the ID to specify the DHCPv6 server of your choice.
	Server6Id *int32 `json:"server6_id,omitempty"`
	// The name of the DHCPv6 server.
	Server6Name *string `json:"server6_name,omitempty"`
	// The last IP address of the DHCPv6 scope.
	Scope6EndAddr *string `json:"scope6_end_addr,omitempty"`
	// The prefix of the DHCPv6 scope, an integer that defines the number of address the scope contains.
	Scope6Prefix *string `json:"scope6_prefix,omitempty"`
	// The first IP address of the DHCPv6 scope.
	Scope6StartAddr *string `json:"scope6_start_addr,omitempty"`
	// The IP address of the DHCP server.
	Server6Hostaddr *string `json:"server6_hostaddr,omitempty"`
	// The database identifier (ID) of the DHCPv6 failover channel, a unique numeric key value automatically incremented when you add a DHCPv6 failover channel. Use the ID to specify the DHCPv6 failover channel of your choice.
	Failover6Id *int32 `json:"failover6_id,omitempty"`
	// The name of the DHCPv6 failover channel.
	Failover6Name *string `json:"failover6_name,omitempty"`
	// The name of the DHCPv6 scope, each DHCPv6 scope must have a unique name.
	Scope6Name *string `json:"scope6_name,omitempty"`
	// The database identifier (ID) of an existing space you want to associate with the DHCPv6 scope.
	Scope6SpaceId *int32 `json:"scope6_space_id,omitempty"`
	// The name of an existing space you want to associate with the DHCPv6 scope.
	Scope6SpaceName *string `json:"scope6_space_name,omitempty"`
	// class parameters you want to delete from the object
	ClassParametersToDelete *[]string `json:"class_parameters_to_delete,omitempty"`
	// The name of the class to apply to the object you are adding. You must specify the class file directory, e.g. <b>my_directory/my_class.class</b> . You cannot use the classes <b>global</b> and <b>default</b>, they are reserved by the system.
	Scope6ClassName *string `json:"scope6_class_name,omitempty"`
	// class parameters in json format
	Scope6ClassParameters *[]ApiClassParameterInputEntry `json:"scope6_class_parameters,omitempty"`
	// A way to bypass <b>(accept) </b>any enabled rule that would return warning messages. If the service returns an error message, you cannot bypass the enabled rules.
	Warnings *string `json:"warnings,omitempty"`
}

// NewDhcpScope6AddInput instantiates a new DhcpScope6AddInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDhcpScope6AddInput() *DhcpScope6AddInput {
	this := DhcpScope6AddInput{}
	return &this
}

// NewDhcpScope6AddInputWithDefaults instantiates a new DhcpScope6AddInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDhcpScope6AddInputWithDefaults() *DhcpScope6AddInput {
	this := DhcpScope6AddInput{}
	return &this
}

// GetServer6Id returns the Server6Id field value if set, zero value otherwise.
func (o *DhcpScope6AddInput) GetServer6Id() int32 {
	if o == nil || o.Server6Id == nil {
		var ret int32
		return ret
	}
	return *o.Server6Id
}

// GetServer6IdOk returns a tuple with the Server6Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScope6AddInput) GetServer6IdOk() (*int32, bool) {
	if o == nil || o.Server6Id == nil {
		return nil, false
	}
	return o.Server6Id, true
}

// HasServer6Id returns a boolean if a field has been set.
func (o *DhcpScope6AddInput) HasServer6Id() bool {
	if o != nil && o.Server6Id != nil {
		return true
	}

	return false
}

// SetServer6Id gets a reference to the given int32 and assigns it to the Server6Id field.
func (o *DhcpScope6AddInput) SetServer6Id(v int32) {
	o.Server6Id = &v
}

// GetServer6Name returns the Server6Name field value if set, zero value otherwise.
func (o *DhcpScope6AddInput) GetServer6Name() string {
	if o == nil || o.Server6Name == nil {
		var ret string
		return ret
	}
	return *o.Server6Name
}

// GetServer6NameOk returns a tuple with the Server6Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScope6AddInput) GetServer6NameOk() (*string, bool) {
	if o == nil || o.Server6Name == nil {
		return nil, false
	}
	return o.Server6Name, true
}

// HasServer6Name returns a boolean if a field has been set.
func (o *DhcpScope6AddInput) HasServer6Name() bool {
	if o != nil && o.Server6Name != nil {
		return true
	}

	return false
}

// SetServer6Name gets a reference to the given string and assigns it to the Server6Name field.
func (o *DhcpScope6AddInput) SetServer6Name(v string) {
	o.Server6Name = &v
}

// GetScope6EndAddr returns the Scope6EndAddr field value if set, zero value otherwise.
func (o *DhcpScope6AddInput) GetScope6EndAddr() string {
	if o == nil || o.Scope6EndAddr == nil {
		var ret string
		return ret
	}
	return *o.Scope6EndAddr
}

// GetScope6EndAddrOk returns a tuple with the Scope6EndAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScope6AddInput) GetScope6EndAddrOk() (*string, bool) {
	if o == nil || o.Scope6EndAddr == nil {
		return nil, false
	}
	return o.Scope6EndAddr, true
}

// HasScope6EndAddr returns a boolean if a field has been set.
func (o *DhcpScope6AddInput) HasScope6EndAddr() bool {
	if o != nil && o.Scope6EndAddr != nil {
		return true
	}

	return false
}

// SetScope6EndAddr gets a reference to the given string and assigns it to the Scope6EndAddr field.
func (o *DhcpScope6AddInput) SetScope6EndAddr(v string) {
	o.Scope6EndAddr = &v
}

// GetScope6Prefix returns the Scope6Prefix field value if set, zero value otherwise.
func (o *DhcpScope6AddInput) GetScope6Prefix() string {
	if o == nil || o.Scope6Prefix == nil {
		var ret string
		return ret
	}
	return *o.Scope6Prefix
}

// GetScope6PrefixOk returns a tuple with the Scope6Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScope6AddInput) GetScope6PrefixOk() (*string, bool) {
	if o == nil || o.Scope6Prefix == nil {
		return nil, false
	}
	return o.Scope6Prefix, true
}

// HasScope6Prefix returns a boolean if a field has been set.
func (o *DhcpScope6AddInput) HasScope6Prefix() bool {
	if o != nil && o.Scope6Prefix != nil {
		return true
	}

	return false
}

// SetScope6Prefix gets a reference to the given string and assigns it to the Scope6Prefix field.
func (o *DhcpScope6AddInput) SetScope6Prefix(v string) {
	o.Scope6Prefix = &v
}

// GetScope6StartAddr returns the Scope6StartAddr field value if set, zero value otherwise.
func (o *DhcpScope6AddInput) GetScope6StartAddr() string {
	if o == nil || o.Scope6StartAddr == nil {
		var ret string
		return ret
	}
	return *o.Scope6StartAddr
}

// GetScope6StartAddrOk returns a tuple with the Scope6StartAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScope6AddInput) GetScope6StartAddrOk() (*string, bool) {
	if o == nil || o.Scope6StartAddr == nil {
		return nil, false
	}
	return o.Scope6StartAddr, true
}

// HasScope6StartAddr returns a boolean if a field has been set.
func (o *DhcpScope6AddInput) HasScope6StartAddr() bool {
	if o != nil && o.Scope6StartAddr != nil {
		return true
	}

	return false
}

// SetScope6StartAddr gets a reference to the given string and assigns it to the Scope6StartAddr field.
func (o *DhcpScope6AddInput) SetScope6StartAddr(v string) {
	o.Scope6StartAddr = &v
}

// GetServer6Hostaddr returns the Server6Hostaddr field value if set, zero value otherwise.
func (o *DhcpScope6AddInput) GetServer6Hostaddr() string {
	if o == nil || o.Server6Hostaddr == nil {
		var ret string
		return ret
	}
	return *o.Server6Hostaddr
}

// GetServer6HostaddrOk returns a tuple with the Server6Hostaddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScope6AddInput) GetServer6HostaddrOk() (*string, bool) {
	if o == nil || o.Server6Hostaddr == nil {
		return nil, false
	}
	return o.Server6Hostaddr, true
}

// HasServer6Hostaddr returns a boolean if a field has been set.
func (o *DhcpScope6AddInput) HasServer6Hostaddr() bool {
	if o != nil && o.Server6Hostaddr != nil {
		return true
	}

	return false
}

// SetServer6Hostaddr gets a reference to the given string and assigns it to the Server6Hostaddr field.
func (o *DhcpScope6AddInput) SetServer6Hostaddr(v string) {
	o.Server6Hostaddr = &v
}

// GetFailover6Id returns the Failover6Id field value if set, zero value otherwise.
func (o *DhcpScope6AddInput) GetFailover6Id() int32 {
	if o == nil || o.Failover6Id == nil {
		var ret int32
		return ret
	}
	return *o.Failover6Id
}

// GetFailover6IdOk returns a tuple with the Failover6Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScope6AddInput) GetFailover6IdOk() (*int32, bool) {
	if o == nil || o.Failover6Id == nil {
		return nil, false
	}
	return o.Failover6Id, true
}

// HasFailover6Id returns a boolean if a field has been set.
func (o *DhcpScope6AddInput) HasFailover6Id() bool {
	if o != nil && o.Failover6Id != nil {
		return true
	}

	return false
}

// SetFailover6Id gets a reference to the given int32 and assigns it to the Failover6Id field.
func (o *DhcpScope6AddInput) SetFailover6Id(v int32) {
	o.Failover6Id = &v
}

// GetFailover6Name returns the Failover6Name field value if set, zero value otherwise.
func (o *DhcpScope6AddInput) GetFailover6Name() string {
	if o == nil || o.Failover6Name == nil {
		var ret string
		return ret
	}
	return *o.Failover6Name
}

// GetFailover6NameOk returns a tuple with the Failover6Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScope6AddInput) GetFailover6NameOk() (*string, bool) {
	if o == nil || o.Failover6Name == nil {
		return nil, false
	}
	return o.Failover6Name, true
}

// HasFailover6Name returns a boolean if a field has been set.
func (o *DhcpScope6AddInput) HasFailover6Name() bool {
	if o != nil && o.Failover6Name != nil {
		return true
	}

	return false
}

// SetFailover6Name gets a reference to the given string and assigns it to the Failover6Name field.
func (o *DhcpScope6AddInput) SetFailover6Name(v string) {
	o.Failover6Name = &v
}

// GetScope6Name returns the Scope6Name field value if set, zero value otherwise.
func (o *DhcpScope6AddInput) GetScope6Name() string {
	if o == nil || o.Scope6Name == nil {
		var ret string
		return ret
	}
	return *o.Scope6Name
}

// GetScope6NameOk returns a tuple with the Scope6Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScope6AddInput) GetScope6NameOk() (*string, bool) {
	if o == nil || o.Scope6Name == nil {
		return nil, false
	}
	return o.Scope6Name, true
}

// HasScope6Name returns a boolean if a field has been set.
func (o *DhcpScope6AddInput) HasScope6Name() bool {
	if o != nil && o.Scope6Name != nil {
		return true
	}

	return false
}

// SetScope6Name gets a reference to the given string and assigns it to the Scope6Name field.
func (o *DhcpScope6AddInput) SetScope6Name(v string) {
	o.Scope6Name = &v
}

// GetScope6SpaceId returns the Scope6SpaceId field value if set, zero value otherwise.
func (o *DhcpScope6AddInput) GetScope6SpaceId() int32 {
	if o == nil || o.Scope6SpaceId == nil {
		var ret int32
		return ret
	}
	return *o.Scope6SpaceId
}

// GetScope6SpaceIdOk returns a tuple with the Scope6SpaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScope6AddInput) GetScope6SpaceIdOk() (*int32, bool) {
	if o == nil || o.Scope6SpaceId == nil {
		return nil, false
	}
	return o.Scope6SpaceId, true
}

// HasScope6SpaceId returns a boolean if a field has been set.
func (o *DhcpScope6AddInput) HasScope6SpaceId() bool {
	if o != nil && o.Scope6SpaceId != nil {
		return true
	}

	return false
}

// SetScope6SpaceId gets a reference to the given int32 and assigns it to the Scope6SpaceId field.
func (o *DhcpScope6AddInput) SetScope6SpaceId(v int32) {
	o.Scope6SpaceId = &v
}

// GetScope6SpaceName returns the Scope6SpaceName field value if set, zero value otherwise.
func (o *DhcpScope6AddInput) GetScope6SpaceName() string {
	if o == nil || o.Scope6SpaceName == nil {
		var ret string
		return ret
	}
	return *o.Scope6SpaceName
}

// GetScope6SpaceNameOk returns a tuple with the Scope6SpaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScope6AddInput) GetScope6SpaceNameOk() (*string, bool) {
	if o == nil || o.Scope6SpaceName == nil {
		return nil, false
	}
	return o.Scope6SpaceName, true
}

// HasScope6SpaceName returns a boolean if a field has been set.
func (o *DhcpScope6AddInput) HasScope6SpaceName() bool {
	if o != nil && o.Scope6SpaceName != nil {
		return true
	}

	return false
}

// SetScope6SpaceName gets a reference to the given string and assigns it to the Scope6SpaceName field.
func (o *DhcpScope6AddInput) SetScope6SpaceName(v string) {
	o.Scope6SpaceName = &v
}

// GetClassParametersToDelete returns the ClassParametersToDelete field value if set, zero value otherwise.
func (o *DhcpScope6AddInput) GetClassParametersToDelete() []string {
	if o == nil || o.ClassParametersToDelete == nil {
		var ret []string
		return ret
	}
	return *o.ClassParametersToDelete
}

// GetClassParametersToDeleteOk returns a tuple with the ClassParametersToDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScope6AddInput) GetClassParametersToDeleteOk() (*[]string, bool) {
	if o == nil || o.ClassParametersToDelete == nil {
		return nil, false
	}
	return o.ClassParametersToDelete, true
}

// HasClassParametersToDelete returns a boolean if a field has been set.
func (o *DhcpScope6AddInput) HasClassParametersToDelete() bool {
	if o != nil && o.ClassParametersToDelete != nil {
		return true
	}

	return false
}

// SetClassParametersToDelete gets a reference to the given []string and assigns it to the ClassParametersToDelete field.
func (o *DhcpScope6AddInput) SetClassParametersToDelete(v []string) {
	o.ClassParametersToDelete = &v
}

// GetScope6ClassName returns the Scope6ClassName field value if set, zero value otherwise.
func (o *DhcpScope6AddInput) GetScope6ClassName() string {
	if o == nil || o.Scope6ClassName == nil {
		var ret string
		return ret
	}
	return *o.Scope6ClassName
}

// GetScope6ClassNameOk returns a tuple with the Scope6ClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScope6AddInput) GetScope6ClassNameOk() (*string, bool) {
	if o == nil || o.Scope6ClassName == nil {
		return nil, false
	}
	return o.Scope6ClassName, true
}

// HasScope6ClassName returns a boolean if a field has been set.
func (o *DhcpScope6AddInput) HasScope6ClassName() bool {
	if o != nil && o.Scope6ClassName != nil {
		return true
	}

	return false
}

// SetScope6ClassName gets a reference to the given string and assigns it to the Scope6ClassName field.
func (o *DhcpScope6AddInput) SetScope6ClassName(v string) {
	o.Scope6ClassName = &v
}

// GetScope6ClassParameters returns the Scope6ClassParameters field value if set, zero value otherwise.
func (o *DhcpScope6AddInput) GetScope6ClassParameters() []ApiClassParameterInputEntry {
	if o == nil || o.Scope6ClassParameters == nil {
		var ret []ApiClassParameterInputEntry
		return ret
	}
	return *o.Scope6ClassParameters
}

// GetScope6ClassParametersOk returns a tuple with the Scope6ClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScope6AddInput) GetScope6ClassParametersOk() (*[]ApiClassParameterInputEntry, bool) {
	if o == nil || o.Scope6ClassParameters == nil {
		return nil, false
	}
	return o.Scope6ClassParameters, true
}

// HasScope6ClassParameters returns a boolean if a field has been set.
func (o *DhcpScope6AddInput) HasScope6ClassParameters() bool {
	if o != nil && o.Scope6ClassParameters != nil {
		return true
	}

	return false
}

// SetScope6ClassParameters gets a reference to the given []ApiClassParameterInputEntry and assigns it to the Scope6ClassParameters field.
func (o *DhcpScope6AddInput) SetScope6ClassParameters(v []ApiClassParameterInputEntry) {
	o.Scope6ClassParameters = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *DhcpScope6AddInput) GetWarnings() string {
	if o == nil || o.Warnings == nil {
		var ret string
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScope6AddInput) GetWarningsOk() (*string, bool) {
	if o == nil || o.Warnings == nil {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *DhcpScope6AddInput) HasWarnings() bool {
	if o != nil && o.Warnings != nil {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given string and assigns it to the Warnings field.
func (o *DhcpScope6AddInput) SetWarnings(v string) {
	o.Warnings = &v
}

func (o DhcpScope6AddInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Server6Id != nil {
		toSerialize["server6_id"] = o.Server6Id
	}
	if o.Server6Name != nil {
		toSerialize["server6_name"] = o.Server6Name
	}
	if o.Scope6EndAddr != nil {
		toSerialize["scope6_end_addr"] = o.Scope6EndAddr
	}
	if o.Scope6Prefix != nil {
		toSerialize["scope6_prefix"] = o.Scope6Prefix
	}
	if o.Scope6StartAddr != nil {
		toSerialize["scope6_start_addr"] = o.Scope6StartAddr
	}
	if o.Server6Hostaddr != nil {
		toSerialize["server6_hostaddr"] = o.Server6Hostaddr
	}
	if o.Failover6Id != nil {
		toSerialize["failover6_id"] = o.Failover6Id
	}
	if o.Failover6Name != nil {
		toSerialize["failover6_name"] = o.Failover6Name
	}
	if o.Scope6Name != nil {
		toSerialize["scope6_name"] = o.Scope6Name
	}
	if o.Scope6SpaceId != nil {
		toSerialize["scope6_space_id"] = o.Scope6SpaceId
	}
	if o.Scope6SpaceName != nil {
		toSerialize["scope6_space_name"] = o.Scope6SpaceName
	}
	if o.ClassParametersToDelete != nil {
		toSerialize["class_parameters_to_delete"] = o.ClassParametersToDelete
	}
	if o.Scope6ClassName != nil {
		toSerialize["scope6_class_name"] = o.Scope6ClassName
	}
	if o.Scope6ClassParameters != nil {
		toSerialize["scope6_class_parameters"] = o.Scope6ClassParameters
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	return json.Marshal(toSerialize)
}

type NullableDhcpScope6AddInput struct {
	value *DhcpScope6AddInput
	isSet bool
}

func (v NullableDhcpScope6AddInput) Get() *DhcpScope6AddInput {
	return v.value
}

func (v *NullableDhcpScope6AddInput) Set(val *DhcpScope6AddInput) {
	v.value = val
	v.isSet = true
}

func (v NullableDhcpScope6AddInput) IsSet() bool {
	return v.isSet
}

func (v *NullableDhcpScope6AddInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDhcpScope6AddInput(val *DhcpScope6AddInput) *NullableDhcpScope6AddInput {
	return &NullableDhcpScope6AddInput{value: val, isSet: true}
}

func (v NullableDhcpScope6AddInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDhcpScope6AddInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


