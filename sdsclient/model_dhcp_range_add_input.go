/*
 * SOLIDserver API
 *
 * OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2021 EfficientIP</p><p><em>All specifications and information regarding the products in  this document are subject to change without notice and should not be  construed as a commitment by EfficientIP. EfficientIP assumes no  responsibility or liability for any mistakes or inaccuracies that may appear  in this document. All statements and recommendations in this document are  believed to be accurate but are presented without warranty. Users must take  full responsibility for their application of any product.</em></p><p>Generated (Monday 14th of June 2021 12:30:34 PM)</p>
 *
 * API version: 2.0
 * Contact: support-api@efficientip.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// DhcpRangeAddInput struct for DhcpRangeAddInput
type DhcpRangeAddInput struct {
	// The database identifier (ID) of the DHCPv4 server, a unique numeric key value automatically incremented when you add a DHCPv4 server. Use the ID to specify the DHCPv4 server of your choice.
	ServerId *int32 `json:"server_id,omitempty"`
	// The name of the DHCPv4 server.
	ServerName *string `json:"server_name,omitempty"`
	// The last IP address of the DHCPv4 range.
	RangeEndAddr *string `json:"range_end_addr,omitempty"`
	// The first IP address of the DHCPv4 range.
	RangeStartAddr *string `json:"range_start_addr,omitempty"`
	// The database identifier (ID) of the DHCPv4 scope, a unique numeric key value automatically incremented when you add a DHCPv4 scope. Use the ID to specify the DHCPv4 scope of your choice.
	ScopeId *int32 `json:"scope_id,omitempty"`
	// The IP address of the DHCP server.
	ServerHostaddr *string `json:"server_hostaddr,omitempty"`
	// The list of ACLs associated with the DHCPv4 range, as follows: <b>&lt;ACL_name&gt;;&lt;ACL_name&gt;;</b>... .
	RangeAcl *string `json:"range_acl,omitempty"`
	// The name of the DHCPv4 range, each DHCPv4 range must have a unique name.
	RangeName *string `json:"range_name,omitempty"`
	// The name of the DHCPv4 scope.
	ScopeName *string `json:"scope_name,omitempty"`
	// class parameters you want to delete from the object
	ClassParametersToDelete *[]string `json:"class_parameters_to_delete,omitempty"`
	// The name of the class to apply to the object you are adding. You must specify the class file directory, e.g. <b>my_directory/my_class.class</b> . You cannot use the classes <b>global</b> and <b>default</b>, they are reserved by the system.
	RangeClassName *string `json:"range_class_name,omitempty"`
	// class parameters in json format
	RangeClassParameters *[]ApiClassParameterInputEntry `json:"range_class_parameters,omitempty"`
	// A way to bypass <b>(accept) </b>any enabled rule that would return warning messages. If the service returns an error message, you cannot bypass the enabled rules.
	Warnings *string `json:"warnings,omitempty"`
}

// NewDhcpRangeAddInput instantiates a new DhcpRangeAddInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDhcpRangeAddInput() *DhcpRangeAddInput {
	this := DhcpRangeAddInput{}
	return &this
}

// NewDhcpRangeAddInputWithDefaults instantiates a new DhcpRangeAddInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDhcpRangeAddInputWithDefaults() *DhcpRangeAddInput {
	this := DhcpRangeAddInput{}
	return &this
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *DhcpRangeAddInput) GetServerId() int32 {
	if o == nil || o.ServerId == nil {
		var ret int32
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpRangeAddInput) GetServerIdOk() (*int32, bool) {
	if o == nil || o.ServerId == nil {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *DhcpRangeAddInput) HasServerId() bool {
	if o != nil && o.ServerId != nil {
		return true
	}

	return false
}

// SetServerId gets a reference to the given int32 and assigns it to the ServerId field.
func (o *DhcpRangeAddInput) SetServerId(v int32) {
	o.ServerId = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *DhcpRangeAddInput) GetServerName() string {
	if o == nil || o.ServerName == nil {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpRangeAddInput) GetServerNameOk() (*string, bool) {
	if o == nil || o.ServerName == nil {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *DhcpRangeAddInput) HasServerName() bool {
	if o != nil && o.ServerName != nil {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *DhcpRangeAddInput) SetServerName(v string) {
	o.ServerName = &v
}

// GetRangeEndAddr returns the RangeEndAddr field value if set, zero value otherwise.
func (o *DhcpRangeAddInput) GetRangeEndAddr() string {
	if o == nil || o.RangeEndAddr == nil {
		var ret string
		return ret
	}
	return *o.RangeEndAddr
}

// GetRangeEndAddrOk returns a tuple with the RangeEndAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpRangeAddInput) GetRangeEndAddrOk() (*string, bool) {
	if o == nil || o.RangeEndAddr == nil {
		return nil, false
	}
	return o.RangeEndAddr, true
}

// HasRangeEndAddr returns a boolean if a field has been set.
func (o *DhcpRangeAddInput) HasRangeEndAddr() bool {
	if o != nil && o.RangeEndAddr != nil {
		return true
	}

	return false
}

// SetRangeEndAddr gets a reference to the given string and assigns it to the RangeEndAddr field.
func (o *DhcpRangeAddInput) SetRangeEndAddr(v string) {
	o.RangeEndAddr = &v
}

// GetRangeStartAddr returns the RangeStartAddr field value if set, zero value otherwise.
func (o *DhcpRangeAddInput) GetRangeStartAddr() string {
	if o == nil || o.RangeStartAddr == nil {
		var ret string
		return ret
	}
	return *o.RangeStartAddr
}

// GetRangeStartAddrOk returns a tuple with the RangeStartAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpRangeAddInput) GetRangeStartAddrOk() (*string, bool) {
	if o == nil || o.RangeStartAddr == nil {
		return nil, false
	}
	return o.RangeStartAddr, true
}

// HasRangeStartAddr returns a boolean if a field has been set.
func (o *DhcpRangeAddInput) HasRangeStartAddr() bool {
	if o != nil && o.RangeStartAddr != nil {
		return true
	}

	return false
}

// SetRangeStartAddr gets a reference to the given string and assigns it to the RangeStartAddr field.
func (o *DhcpRangeAddInput) SetRangeStartAddr(v string) {
	o.RangeStartAddr = &v
}

// GetScopeId returns the ScopeId field value if set, zero value otherwise.
func (o *DhcpRangeAddInput) GetScopeId() int32 {
	if o == nil || o.ScopeId == nil {
		var ret int32
		return ret
	}
	return *o.ScopeId
}

// GetScopeIdOk returns a tuple with the ScopeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpRangeAddInput) GetScopeIdOk() (*int32, bool) {
	if o == nil || o.ScopeId == nil {
		return nil, false
	}
	return o.ScopeId, true
}

// HasScopeId returns a boolean if a field has been set.
func (o *DhcpRangeAddInput) HasScopeId() bool {
	if o != nil && o.ScopeId != nil {
		return true
	}

	return false
}

// SetScopeId gets a reference to the given int32 and assigns it to the ScopeId field.
func (o *DhcpRangeAddInput) SetScopeId(v int32) {
	o.ScopeId = &v
}

// GetServerHostaddr returns the ServerHostaddr field value if set, zero value otherwise.
func (o *DhcpRangeAddInput) GetServerHostaddr() string {
	if o == nil || o.ServerHostaddr == nil {
		var ret string
		return ret
	}
	return *o.ServerHostaddr
}

// GetServerHostaddrOk returns a tuple with the ServerHostaddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpRangeAddInput) GetServerHostaddrOk() (*string, bool) {
	if o == nil || o.ServerHostaddr == nil {
		return nil, false
	}
	return o.ServerHostaddr, true
}

// HasServerHostaddr returns a boolean if a field has been set.
func (o *DhcpRangeAddInput) HasServerHostaddr() bool {
	if o != nil && o.ServerHostaddr != nil {
		return true
	}

	return false
}

// SetServerHostaddr gets a reference to the given string and assigns it to the ServerHostaddr field.
func (o *DhcpRangeAddInput) SetServerHostaddr(v string) {
	o.ServerHostaddr = &v
}

// GetRangeAcl returns the RangeAcl field value if set, zero value otherwise.
func (o *DhcpRangeAddInput) GetRangeAcl() string {
	if o == nil || o.RangeAcl == nil {
		var ret string
		return ret
	}
	return *o.RangeAcl
}

// GetRangeAclOk returns a tuple with the RangeAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpRangeAddInput) GetRangeAclOk() (*string, bool) {
	if o == nil || o.RangeAcl == nil {
		return nil, false
	}
	return o.RangeAcl, true
}

// HasRangeAcl returns a boolean if a field has been set.
func (o *DhcpRangeAddInput) HasRangeAcl() bool {
	if o != nil && o.RangeAcl != nil {
		return true
	}

	return false
}

// SetRangeAcl gets a reference to the given string and assigns it to the RangeAcl field.
func (o *DhcpRangeAddInput) SetRangeAcl(v string) {
	o.RangeAcl = &v
}

// GetRangeName returns the RangeName field value if set, zero value otherwise.
func (o *DhcpRangeAddInput) GetRangeName() string {
	if o == nil || o.RangeName == nil {
		var ret string
		return ret
	}
	return *o.RangeName
}

// GetRangeNameOk returns a tuple with the RangeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpRangeAddInput) GetRangeNameOk() (*string, bool) {
	if o == nil || o.RangeName == nil {
		return nil, false
	}
	return o.RangeName, true
}

// HasRangeName returns a boolean if a field has been set.
func (o *DhcpRangeAddInput) HasRangeName() bool {
	if o != nil && o.RangeName != nil {
		return true
	}

	return false
}

// SetRangeName gets a reference to the given string and assigns it to the RangeName field.
func (o *DhcpRangeAddInput) SetRangeName(v string) {
	o.RangeName = &v
}

// GetScopeName returns the ScopeName field value if set, zero value otherwise.
func (o *DhcpRangeAddInput) GetScopeName() string {
	if o == nil || o.ScopeName == nil {
		var ret string
		return ret
	}
	return *o.ScopeName
}

// GetScopeNameOk returns a tuple with the ScopeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpRangeAddInput) GetScopeNameOk() (*string, bool) {
	if o == nil || o.ScopeName == nil {
		return nil, false
	}
	return o.ScopeName, true
}

// HasScopeName returns a boolean if a field has been set.
func (o *DhcpRangeAddInput) HasScopeName() bool {
	if o != nil && o.ScopeName != nil {
		return true
	}

	return false
}

// SetScopeName gets a reference to the given string and assigns it to the ScopeName field.
func (o *DhcpRangeAddInput) SetScopeName(v string) {
	o.ScopeName = &v
}

// GetClassParametersToDelete returns the ClassParametersToDelete field value if set, zero value otherwise.
func (o *DhcpRangeAddInput) GetClassParametersToDelete() []string {
	if o == nil || o.ClassParametersToDelete == nil {
		var ret []string
		return ret
	}
	return *o.ClassParametersToDelete
}

// GetClassParametersToDeleteOk returns a tuple with the ClassParametersToDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpRangeAddInput) GetClassParametersToDeleteOk() (*[]string, bool) {
	if o == nil || o.ClassParametersToDelete == nil {
		return nil, false
	}
	return o.ClassParametersToDelete, true
}

// HasClassParametersToDelete returns a boolean if a field has been set.
func (o *DhcpRangeAddInput) HasClassParametersToDelete() bool {
	if o != nil && o.ClassParametersToDelete != nil {
		return true
	}

	return false
}

// SetClassParametersToDelete gets a reference to the given []string and assigns it to the ClassParametersToDelete field.
func (o *DhcpRangeAddInput) SetClassParametersToDelete(v []string) {
	o.ClassParametersToDelete = &v
}

// GetRangeClassName returns the RangeClassName field value if set, zero value otherwise.
func (o *DhcpRangeAddInput) GetRangeClassName() string {
	if o == nil || o.RangeClassName == nil {
		var ret string
		return ret
	}
	return *o.RangeClassName
}

// GetRangeClassNameOk returns a tuple with the RangeClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpRangeAddInput) GetRangeClassNameOk() (*string, bool) {
	if o == nil || o.RangeClassName == nil {
		return nil, false
	}
	return o.RangeClassName, true
}

// HasRangeClassName returns a boolean if a field has been set.
func (o *DhcpRangeAddInput) HasRangeClassName() bool {
	if o != nil && o.RangeClassName != nil {
		return true
	}

	return false
}

// SetRangeClassName gets a reference to the given string and assigns it to the RangeClassName field.
func (o *DhcpRangeAddInput) SetRangeClassName(v string) {
	o.RangeClassName = &v
}

// GetRangeClassParameters returns the RangeClassParameters field value if set, zero value otherwise.
func (o *DhcpRangeAddInput) GetRangeClassParameters() []ApiClassParameterInputEntry {
	if o == nil || o.RangeClassParameters == nil {
		var ret []ApiClassParameterInputEntry
		return ret
	}
	return *o.RangeClassParameters
}

// GetRangeClassParametersOk returns a tuple with the RangeClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpRangeAddInput) GetRangeClassParametersOk() (*[]ApiClassParameterInputEntry, bool) {
	if o == nil || o.RangeClassParameters == nil {
		return nil, false
	}
	return o.RangeClassParameters, true
}

// HasRangeClassParameters returns a boolean if a field has been set.
func (o *DhcpRangeAddInput) HasRangeClassParameters() bool {
	if o != nil && o.RangeClassParameters != nil {
		return true
	}

	return false
}

// SetRangeClassParameters gets a reference to the given []ApiClassParameterInputEntry and assigns it to the RangeClassParameters field.
func (o *DhcpRangeAddInput) SetRangeClassParameters(v []ApiClassParameterInputEntry) {
	o.RangeClassParameters = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *DhcpRangeAddInput) GetWarnings() string {
	if o == nil || o.Warnings == nil {
		var ret string
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpRangeAddInput) GetWarningsOk() (*string, bool) {
	if o == nil || o.Warnings == nil {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *DhcpRangeAddInput) HasWarnings() bool {
	if o != nil && o.Warnings != nil {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given string and assigns it to the Warnings field.
func (o *DhcpRangeAddInput) SetWarnings(v string) {
	o.Warnings = &v
}

func (o DhcpRangeAddInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ServerId != nil {
		toSerialize["server_id"] = o.ServerId
	}
	if o.ServerName != nil {
		toSerialize["server_name"] = o.ServerName
	}
	if o.RangeEndAddr != nil {
		toSerialize["range_end_addr"] = o.RangeEndAddr
	}
	if o.RangeStartAddr != nil {
		toSerialize["range_start_addr"] = o.RangeStartAddr
	}
	if o.ScopeId != nil {
		toSerialize["scope_id"] = o.ScopeId
	}
	if o.ServerHostaddr != nil {
		toSerialize["server_hostaddr"] = o.ServerHostaddr
	}
	if o.RangeAcl != nil {
		toSerialize["range_acl"] = o.RangeAcl
	}
	if o.RangeName != nil {
		toSerialize["range_name"] = o.RangeName
	}
	if o.ScopeName != nil {
		toSerialize["scope_name"] = o.ScopeName
	}
	if o.ClassParametersToDelete != nil {
		toSerialize["class_parameters_to_delete"] = o.ClassParametersToDelete
	}
	if o.RangeClassName != nil {
		toSerialize["range_class_name"] = o.RangeClassName
	}
	if o.RangeClassParameters != nil {
		toSerialize["range_class_parameters"] = o.RangeClassParameters
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	return json.Marshal(toSerialize)
}

type NullableDhcpRangeAddInput struct {
	value *DhcpRangeAddInput
	isSet bool
}

func (v NullableDhcpRangeAddInput) Get() *DhcpRangeAddInput {
	return v.value
}

func (v *NullableDhcpRangeAddInput) Set(val *DhcpRangeAddInput) {
	v.value = val
	v.isSet = true
}

func (v NullableDhcpRangeAddInput) IsSet() bool {
	return v.isSet
}

func (v *NullableDhcpRangeAddInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDhcpRangeAddInput(val *DhcpRangeAddInput) *NullableDhcpRangeAddInput {
	return &NullableDhcpRangeAddInput{value: val, isSet: true}
}

func (v NullableDhcpRangeAddInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDhcpRangeAddInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


