/*
SOLIDserver API

OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2024 EfficientIP</p><p><em>All specifications and information regarding the products in this document are subject to change without notice and should not be construed as a commitment by EfficientIP. EfficientIP assumes no responsibility or liability for any mistakes or inaccuracies that may appear in this document. All statements and recommendations in this document are believed to be accurate but are presented without warranty. Users must take full responsibility for their application of any product.</em></p><p><em>This document aims at detailing EfficientIP proprietary solutions. As our solutions rely on several third-party products, created by other companies or organizations, it may redirect readers to third-party websites and documentation for further information. In such a case, EfficientIP cannot be liable or expected to provide said information on products they do maintain or created.</em></p><p>Generated (Friday 4th of October 2024 03:41:11 PM)</p>

API version: 2.0
Contact: support-api@efficientip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// checks if the DataInnerVlanRangeData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataInnerVlanRangeData{}

// DataInnerVlanRangeData struct for DataInnerVlanRangeData
type DataInnerVlanRangeData struct {
	// The type of virtual network used by the domain the range belongs to, VXLAN (<b>1</b>) or VLAN (<b>0</b>).
	DomainSupportVxlan *string `json:"domain_support_vxlan,omitempty"`
	// The name of the class applied to the VLAN domain the object belongs to, it can be preceded by the class directory.
	DomainClassName *string `json:"domain_class_name,omitempty"`
	// The class parameters applied to the VLAN domain the object belongs to.
	DomainClassParameters []ApiClassParameterOutputEntry `json:"domain_class_parameters,omitempty"`
	// The description of the VLAN domain the object belongs to.
	DomainDescription *string `json:"domain_description,omitempty"`
	// The VLAN identifier (ID) of the last VLAN in the VLAN domain the object belongs to.
	DomainEndVlanId *string `json:"domain_end_vlan_id,omitempty"`
	// The database identifier (ID) of the VLAN domain the object belongs to.
	DomainId *string `json:"domain_id,omitempty"`
	// The name of the VLAN domain the object belongs to.
	DomainName *string `json:"domain_name,omitempty"`
	// The VLAN identifier (ID) of the first VLAN in the VLAN domain the object belongs to.
	DomainStartVlanId *string `json:"domain_start_vlan_id,omitempty"`
	// The name of the class applied to the VLAN range, it can be preceded by the class directory.
	RangeClassName *string `json:"range_class_name,omitempty"`
	// The class parameters applied to the VLAN range.
	RangeClassParameters []ApiClassParameterOutputEntry `json:"range_class_parameters,omitempty"`
	// The description of the VLAN range.
	RangeDescription *string `json:"range_description,omitempty"`
	// The overlapping restriction status of the VLAN range. <b>1</b> indicates that when creating VLANs in the range, their IDs should not overlap.
	RangeDisableOverlapping *string `json:"range_disable_overlapping,omitempty"`
	// The VLAN identifier (ID) of the last VLAN in the VLAN range.
	RangeEndVlanId *string `json:"range_end_vlan_id,omitempty"`
	// The database identifier (ID) of the VLAN range.
	RangeId *string `json:"range_id,omitempty"`
	// The name of the VLAN range.
	RangeName *string `json:"range_name,omitempty"`
	// The VLAN identifier (ID) of the first VLAN in the VLAN range.
	RangeStartVlanId *string `json:"range_start_vlan_id,omitempty"`
}

// NewDataInnerVlanRangeData instantiates a new DataInnerVlanRangeData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataInnerVlanRangeData() *DataInnerVlanRangeData {
	this := DataInnerVlanRangeData{}
	return &this
}

// NewDataInnerVlanRangeDataWithDefaults instantiates a new DataInnerVlanRangeData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataInnerVlanRangeDataWithDefaults() *DataInnerVlanRangeData {
	this := DataInnerVlanRangeData{}
	return &this
}

// GetDomainSupportVxlan returns the DomainSupportVxlan field value if set, zero value otherwise.
func (o *DataInnerVlanRangeData) GetDomainSupportVxlan() string {
	if o == nil || IsNil(o.DomainSupportVxlan) {
		var ret string
		return ret
	}
	return *o.DomainSupportVxlan
}

// GetDomainSupportVxlanOk returns a tuple with the DomainSupportVxlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerVlanRangeData) GetDomainSupportVxlanOk() (*string, bool) {
	if o == nil || IsNil(o.DomainSupportVxlan) {
		return nil, false
	}
	return o.DomainSupportVxlan, true
}

// HasDomainSupportVxlan returns a boolean if a field has been set.
func (o *DataInnerVlanRangeData) HasDomainSupportVxlan() bool {
	if o != nil && !IsNil(o.DomainSupportVxlan) {
		return true
	}

	return false
}

// SetDomainSupportVxlan gets a reference to the given string and assigns it to the DomainSupportVxlan field.
func (o *DataInnerVlanRangeData) SetDomainSupportVxlan(v string) {
	o.DomainSupportVxlan = &v
}

// GetDomainClassName returns the DomainClassName field value if set, zero value otherwise.
func (o *DataInnerVlanRangeData) GetDomainClassName() string {
	if o == nil || IsNil(o.DomainClassName) {
		var ret string
		return ret
	}
	return *o.DomainClassName
}

// GetDomainClassNameOk returns a tuple with the DomainClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerVlanRangeData) GetDomainClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.DomainClassName) {
		return nil, false
	}
	return o.DomainClassName, true
}

// HasDomainClassName returns a boolean if a field has been set.
func (o *DataInnerVlanRangeData) HasDomainClassName() bool {
	if o != nil && !IsNil(o.DomainClassName) {
		return true
	}

	return false
}

// SetDomainClassName gets a reference to the given string and assigns it to the DomainClassName field.
func (o *DataInnerVlanRangeData) SetDomainClassName(v string) {
	o.DomainClassName = &v
}

// GetDomainClassParameters returns the DomainClassParameters field value if set, zero value otherwise.
func (o *DataInnerVlanRangeData) GetDomainClassParameters() []ApiClassParameterOutputEntry {
	if o == nil || IsNil(o.DomainClassParameters) {
		var ret []ApiClassParameterOutputEntry
		return ret
	}
	return o.DomainClassParameters
}

// GetDomainClassParametersOk returns a tuple with the DomainClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerVlanRangeData) GetDomainClassParametersOk() ([]ApiClassParameterOutputEntry, bool) {
	if o == nil || IsNil(o.DomainClassParameters) {
		return nil, false
	}
	return o.DomainClassParameters, true
}

// HasDomainClassParameters returns a boolean if a field has been set.
func (o *DataInnerVlanRangeData) HasDomainClassParameters() bool {
	if o != nil && !IsNil(o.DomainClassParameters) {
		return true
	}

	return false
}

// SetDomainClassParameters gets a reference to the given []ApiClassParameterOutputEntry and assigns it to the DomainClassParameters field.
func (o *DataInnerVlanRangeData) SetDomainClassParameters(v []ApiClassParameterOutputEntry) {
	o.DomainClassParameters = v
}

// GetDomainDescription returns the DomainDescription field value if set, zero value otherwise.
func (o *DataInnerVlanRangeData) GetDomainDescription() string {
	if o == nil || IsNil(o.DomainDescription) {
		var ret string
		return ret
	}
	return *o.DomainDescription
}

// GetDomainDescriptionOk returns a tuple with the DomainDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerVlanRangeData) GetDomainDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.DomainDescription) {
		return nil, false
	}
	return o.DomainDescription, true
}

// HasDomainDescription returns a boolean if a field has been set.
func (o *DataInnerVlanRangeData) HasDomainDescription() bool {
	if o != nil && !IsNil(o.DomainDescription) {
		return true
	}

	return false
}

// SetDomainDescription gets a reference to the given string and assigns it to the DomainDescription field.
func (o *DataInnerVlanRangeData) SetDomainDescription(v string) {
	o.DomainDescription = &v
}

// GetDomainEndVlanId returns the DomainEndVlanId field value if set, zero value otherwise.
func (o *DataInnerVlanRangeData) GetDomainEndVlanId() string {
	if o == nil || IsNil(o.DomainEndVlanId) {
		var ret string
		return ret
	}
	return *o.DomainEndVlanId
}

// GetDomainEndVlanIdOk returns a tuple with the DomainEndVlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerVlanRangeData) GetDomainEndVlanIdOk() (*string, bool) {
	if o == nil || IsNil(o.DomainEndVlanId) {
		return nil, false
	}
	return o.DomainEndVlanId, true
}

// HasDomainEndVlanId returns a boolean if a field has been set.
func (o *DataInnerVlanRangeData) HasDomainEndVlanId() bool {
	if o != nil && !IsNil(o.DomainEndVlanId) {
		return true
	}

	return false
}

// SetDomainEndVlanId gets a reference to the given string and assigns it to the DomainEndVlanId field.
func (o *DataInnerVlanRangeData) SetDomainEndVlanId(v string) {
	o.DomainEndVlanId = &v
}

// GetDomainId returns the DomainId field value if set, zero value otherwise.
func (o *DataInnerVlanRangeData) GetDomainId() string {
	if o == nil || IsNil(o.DomainId) {
		var ret string
		return ret
	}
	return *o.DomainId
}

// GetDomainIdOk returns a tuple with the DomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerVlanRangeData) GetDomainIdOk() (*string, bool) {
	if o == nil || IsNil(o.DomainId) {
		return nil, false
	}
	return o.DomainId, true
}

// HasDomainId returns a boolean if a field has been set.
func (o *DataInnerVlanRangeData) HasDomainId() bool {
	if o != nil && !IsNil(o.DomainId) {
		return true
	}

	return false
}

// SetDomainId gets a reference to the given string and assigns it to the DomainId field.
func (o *DataInnerVlanRangeData) SetDomainId(v string) {
	o.DomainId = &v
}

// GetDomainName returns the DomainName field value if set, zero value otherwise.
func (o *DataInnerVlanRangeData) GetDomainName() string {
	if o == nil || IsNil(o.DomainName) {
		var ret string
		return ret
	}
	return *o.DomainName
}

// GetDomainNameOk returns a tuple with the DomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerVlanRangeData) GetDomainNameOk() (*string, bool) {
	if o == nil || IsNil(o.DomainName) {
		return nil, false
	}
	return o.DomainName, true
}

// HasDomainName returns a boolean if a field has been set.
func (o *DataInnerVlanRangeData) HasDomainName() bool {
	if o != nil && !IsNil(o.DomainName) {
		return true
	}

	return false
}

// SetDomainName gets a reference to the given string and assigns it to the DomainName field.
func (o *DataInnerVlanRangeData) SetDomainName(v string) {
	o.DomainName = &v
}

// GetDomainStartVlanId returns the DomainStartVlanId field value if set, zero value otherwise.
func (o *DataInnerVlanRangeData) GetDomainStartVlanId() string {
	if o == nil || IsNil(o.DomainStartVlanId) {
		var ret string
		return ret
	}
	return *o.DomainStartVlanId
}

// GetDomainStartVlanIdOk returns a tuple with the DomainStartVlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerVlanRangeData) GetDomainStartVlanIdOk() (*string, bool) {
	if o == nil || IsNil(o.DomainStartVlanId) {
		return nil, false
	}
	return o.DomainStartVlanId, true
}

// HasDomainStartVlanId returns a boolean if a field has been set.
func (o *DataInnerVlanRangeData) HasDomainStartVlanId() bool {
	if o != nil && !IsNil(o.DomainStartVlanId) {
		return true
	}

	return false
}

// SetDomainStartVlanId gets a reference to the given string and assigns it to the DomainStartVlanId field.
func (o *DataInnerVlanRangeData) SetDomainStartVlanId(v string) {
	o.DomainStartVlanId = &v
}

// GetRangeClassName returns the RangeClassName field value if set, zero value otherwise.
func (o *DataInnerVlanRangeData) GetRangeClassName() string {
	if o == nil || IsNil(o.RangeClassName) {
		var ret string
		return ret
	}
	return *o.RangeClassName
}

// GetRangeClassNameOk returns a tuple with the RangeClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerVlanRangeData) GetRangeClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.RangeClassName) {
		return nil, false
	}
	return o.RangeClassName, true
}

// HasRangeClassName returns a boolean if a field has been set.
func (o *DataInnerVlanRangeData) HasRangeClassName() bool {
	if o != nil && !IsNil(o.RangeClassName) {
		return true
	}

	return false
}

// SetRangeClassName gets a reference to the given string and assigns it to the RangeClassName field.
func (o *DataInnerVlanRangeData) SetRangeClassName(v string) {
	o.RangeClassName = &v
}

// GetRangeClassParameters returns the RangeClassParameters field value if set, zero value otherwise.
func (o *DataInnerVlanRangeData) GetRangeClassParameters() []ApiClassParameterOutputEntry {
	if o == nil || IsNil(o.RangeClassParameters) {
		var ret []ApiClassParameterOutputEntry
		return ret
	}
	return o.RangeClassParameters
}

// GetRangeClassParametersOk returns a tuple with the RangeClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerVlanRangeData) GetRangeClassParametersOk() ([]ApiClassParameterOutputEntry, bool) {
	if o == nil || IsNil(o.RangeClassParameters) {
		return nil, false
	}
	return o.RangeClassParameters, true
}

// HasRangeClassParameters returns a boolean if a field has been set.
func (o *DataInnerVlanRangeData) HasRangeClassParameters() bool {
	if o != nil && !IsNil(o.RangeClassParameters) {
		return true
	}

	return false
}

// SetRangeClassParameters gets a reference to the given []ApiClassParameterOutputEntry and assigns it to the RangeClassParameters field.
func (o *DataInnerVlanRangeData) SetRangeClassParameters(v []ApiClassParameterOutputEntry) {
	o.RangeClassParameters = v
}

// GetRangeDescription returns the RangeDescription field value if set, zero value otherwise.
func (o *DataInnerVlanRangeData) GetRangeDescription() string {
	if o == nil || IsNil(o.RangeDescription) {
		var ret string
		return ret
	}
	return *o.RangeDescription
}

// GetRangeDescriptionOk returns a tuple with the RangeDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerVlanRangeData) GetRangeDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.RangeDescription) {
		return nil, false
	}
	return o.RangeDescription, true
}

// HasRangeDescription returns a boolean if a field has been set.
func (o *DataInnerVlanRangeData) HasRangeDescription() bool {
	if o != nil && !IsNil(o.RangeDescription) {
		return true
	}

	return false
}

// SetRangeDescription gets a reference to the given string and assigns it to the RangeDescription field.
func (o *DataInnerVlanRangeData) SetRangeDescription(v string) {
	o.RangeDescription = &v
}

// GetRangeDisableOverlapping returns the RangeDisableOverlapping field value if set, zero value otherwise.
func (o *DataInnerVlanRangeData) GetRangeDisableOverlapping() string {
	if o == nil || IsNil(o.RangeDisableOverlapping) {
		var ret string
		return ret
	}
	return *o.RangeDisableOverlapping
}

// GetRangeDisableOverlappingOk returns a tuple with the RangeDisableOverlapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerVlanRangeData) GetRangeDisableOverlappingOk() (*string, bool) {
	if o == nil || IsNil(o.RangeDisableOverlapping) {
		return nil, false
	}
	return o.RangeDisableOverlapping, true
}

// HasRangeDisableOverlapping returns a boolean if a field has been set.
func (o *DataInnerVlanRangeData) HasRangeDisableOverlapping() bool {
	if o != nil && !IsNil(o.RangeDisableOverlapping) {
		return true
	}

	return false
}

// SetRangeDisableOverlapping gets a reference to the given string and assigns it to the RangeDisableOverlapping field.
func (o *DataInnerVlanRangeData) SetRangeDisableOverlapping(v string) {
	o.RangeDisableOverlapping = &v
}

// GetRangeEndVlanId returns the RangeEndVlanId field value if set, zero value otherwise.
func (o *DataInnerVlanRangeData) GetRangeEndVlanId() string {
	if o == nil || IsNil(o.RangeEndVlanId) {
		var ret string
		return ret
	}
	return *o.RangeEndVlanId
}

// GetRangeEndVlanIdOk returns a tuple with the RangeEndVlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerVlanRangeData) GetRangeEndVlanIdOk() (*string, bool) {
	if o == nil || IsNil(o.RangeEndVlanId) {
		return nil, false
	}
	return o.RangeEndVlanId, true
}

// HasRangeEndVlanId returns a boolean if a field has been set.
func (o *DataInnerVlanRangeData) HasRangeEndVlanId() bool {
	if o != nil && !IsNil(o.RangeEndVlanId) {
		return true
	}

	return false
}

// SetRangeEndVlanId gets a reference to the given string and assigns it to the RangeEndVlanId field.
func (o *DataInnerVlanRangeData) SetRangeEndVlanId(v string) {
	o.RangeEndVlanId = &v
}

// GetRangeId returns the RangeId field value if set, zero value otherwise.
func (o *DataInnerVlanRangeData) GetRangeId() string {
	if o == nil || IsNil(o.RangeId) {
		var ret string
		return ret
	}
	return *o.RangeId
}

// GetRangeIdOk returns a tuple with the RangeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerVlanRangeData) GetRangeIdOk() (*string, bool) {
	if o == nil || IsNil(o.RangeId) {
		return nil, false
	}
	return o.RangeId, true
}

// HasRangeId returns a boolean if a field has been set.
func (o *DataInnerVlanRangeData) HasRangeId() bool {
	if o != nil && !IsNil(o.RangeId) {
		return true
	}

	return false
}

// SetRangeId gets a reference to the given string and assigns it to the RangeId field.
func (o *DataInnerVlanRangeData) SetRangeId(v string) {
	o.RangeId = &v
}

// GetRangeName returns the RangeName field value if set, zero value otherwise.
func (o *DataInnerVlanRangeData) GetRangeName() string {
	if o == nil || IsNil(o.RangeName) {
		var ret string
		return ret
	}
	return *o.RangeName
}

// GetRangeNameOk returns a tuple with the RangeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerVlanRangeData) GetRangeNameOk() (*string, bool) {
	if o == nil || IsNil(o.RangeName) {
		return nil, false
	}
	return o.RangeName, true
}

// HasRangeName returns a boolean if a field has been set.
func (o *DataInnerVlanRangeData) HasRangeName() bool {
	if o != nil && !IsNil(o.RangeName) {
		return true
	}

	return false
}

// SetRangeName gets a reference to the given string and assigns it to the RangeName field.
func (o *DataInnerVlanRangeData) SetRangeName(v string) {
	o.RangeName = &v
}

// GetRangeStartVlanId returns the RangeStartVlanId field value if set, zero value otherwise.
func (o *DataInnerVlanRangeData) GetRangeStartVlanId() string {
	if o == nil || IsNil(o.RangeStartVlanId) {
		var ret string
		return ret
	}
	return *o.RangeStartVlanId
}

// GetRangeStartVlanIdOk returns a tuple with the RangeStartVlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerVlanRangeData) GetRangeStartVlanIdOk() (*string, bool) {
	if o == nil || IsNil(o.RangeStartVlanId) {
		return nil, false
	}
	return o.RangeStartVlanId, true
}

// HasRangeStartVlanId returns a boolean if a field has been set.
func (o *DataInnerVlanRangeData) HasRangeStartVlanId() bool {
	if o != nil && !IsNil(o.RangeStartVlanId) {
		return true
	}

	return false
}

// SetRangeStartVlanId gets a reference to the given string and assigns it to the RangeStartVlanId field.
func (o *DataInnerVlanRangeData) SetRangeStartVlanId(v string) {
	o.RangeStartVlanId = &v
}

func (o DataInnerVlanRangeData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataInnerVlanRangeData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DomainSupportVxlan) {
		toSerialize["domain_support_vxlan"] = o.DomainSupportVxlan
	}
	if !IsNil(o.DomainClassName) {
		toSerialize["domain_class_name"] = o.DomainClassName
	}
	if !IsNil(o.DomainClassParameters) {
		toSerialize["domain_class_parameters"] = o.DomainClassParameters
	}
	if !IsNil(o.DomainDescription) {
		toSerialize["domain_description"] = o.DomainDescription
	}
	if !IsNil(o.DomainEndVlanId) {
		toSerialize["domain_end_vlan_id"] = o.DomainEndVlanId
	}
	if !IsNil(o.DomainId) {
		toSerialize["domain_id"] = o.DomainId
	}
	if !IsNil(o.DomainName) {
		toSerialize["domain_name"] = o.DomainName
	}
	if !IsNil(o.DomainStartVlanId) {
		toSerialize["domain_start_vlan_id"] = o.DomainStartVlanId
	}
	if !IsNil(o.RangeClassName) {
		toSerialize["range_class_name"] = o.RangeClassName
	}
	if !IsNil(o.RangeClassParameters) {
		toSerialize["range_class_parameters"] = o.RangeClassParameters
	}
	if !IsNil(o.RangeDescription) {
		toSerialize["range_description"] = o.RangeDescription
	}
	if !IsNil(o.RangeDisableOverlapping) {
		toSerialize["range_disable_overlapping"] = o.RangeDisableOverlapping
	}
	if !IsNil(o.RangeEndVlanId) {
		toSerialize["range_end_vlan_id"] = o.RangeEndVlanId
	}
	if !IsNil(o.RangeId) {
		toSerialize["range_id"] = o.RangeId
	}
	if !IsNil(o.RangeName) {
		toSerialize["range_name"] = o.RangeName
	}
	if !IsNil(o.RangeStartVlanId) {
		toSerialize["range_start_vlan_id"] = o.RangeStartVlanId
	}
	return toSerialize, nil
}

type NullableDataInnerVlanRangeData struct {
	value *DataInnerVlanRangeData
	isSet bool
}

func (v NullableDataInnerVlanRangeData) Get() *DataInnerVlanRangeData {
	return v.value
}

func (v *NullableDataInnerVlanRangeData) Set(val *DataInnerVlanRangeData) {
	v.value = val
	v.isSet = true
}

func (v NullableDataInnerVlanRangeData) IsSet() bool {
	return v.isSet
}

func (v *NullableDataInnerVlanRangeData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataInnerVlanRangeData(val *DataInnerVlanRangeData) *NullableDataInnerVlanRangeData {
	return &NullableDataInnerVlanRangeData{value: val, isSet: true}
}

func (v NullableDataInnerVlanRangeData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataInnerVlanRangeData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
