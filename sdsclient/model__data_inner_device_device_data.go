/*
SOLIDserver API

OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2024 EfficientIP</p><p><em>All specifications and information regarding the products in this document are subject to change without notice and should not be construed as a commitment by EfficientIP. EfficientIP assumes no responsibility or liability for any mistakes or inaccuracies that may appear in this document. All statements and recommendations in this document are believed to be accurate but are presented without warranty. Users must take full responsibility for their application of any product.</em></p><p><em>This document aims at detailing EfficientIP proprietary solutions. As our solutions rely on several third-party products, created by other companies or organizations, it may redirect readers to third-party websites and documentation for further information. In such a case, EfficientIP cannot be liable or expected to provide said information on products they do maintain or created.</em></p><p>Generated (Friday 4th of October 2024 03:41:11 PM)</p>

API version: 2.0
Contact: support-api@efficientip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// checks if the DataInnerDeviceDeviceData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataInnerDeviceDeviceData{}

// DataInnerDeviceDeviceData struct for DataInnerDeviceDeviceData
type DataInnerDeviceDeviceData struct {
	// The name of the class applied to the device, it can be preceded by the class directory.
	DeviceClassName *string `json:"device_class_name,omitempty"`
	// The class parameters applied to the device.
	DeviceClassParameters []ApiClassParameterOutputEntry `json:"device_class_parameters,omitempty"`
	// The database identifier (ID) of the Device Manager device.
	DeviceId *string `json:"device_id,omitempty"`
	// The IP address associated with the Device Manager device.
	DeviceAddressAddr *string `json:"device_address_addr,omitempty"`
	// The human readable version of the parameter <b>device_address_addr</b>.
	DeviceAddressFormated *string `json:"device_address_formated,omitempty"`
	// The name of the Device Manager device.
	DeviceName *string `json:"device_name,omitempty"`
	// The database identifier (ID) of the space associated with the Device Manager device.
	DeviceSpaceId *string `json:"device_space_id,omitempty"`
	// The name of the space associated with the Device Manager device.
	DeviceSpaceName *string `json:"device_space_name,omitempty"`
	// The number of interfaces on the Device Manager device that are currently free.
	InterfaceFree *string `json:"interface_free,omitempty"`
	// The total number of interfaces on the Device Manager device.
	InterfaceTotal *string `json:"interface_total,omitempty"`
	// The number of interfaces on the Device Manager device that are currently active.
	InterfaceUsed *string `json:"interface_used,omitempty"`
	// The percentage of interfaces on the Device Manager device that are currently active.
	InterfaceUsedPercent *string `json:"interface_used_percent,omitempty"`
	// The database identifier (ID) of the NetChange network device associated with the Device Manager device.
	DevId *string `json:"dev_id,omitempty"`
	// The name of the NetChange network device associated with the Device Manager device.
	DevName *string `json:"dev_name,omitempty"`
	// The number of ports on the Device Manager device that are currently free.
	DevicePortFree *string `json:"device_port_free,omitempty"`
	// The total number of ports on the Device Manager device.
	DevicePortTotal *string `json:"device_port_total,omitempty"`
	// The number of ports on the Device Manager device that are currently active.
	DevicePortUsed *string `json:"device_port_used,omitempty"`
	// The percentage of ports on the Device Manager device that are currently active.
	DevicePortUsedPercent *string `json:"device_port_used_percent,omitempty"`
	// The object activation status:<ul class=dashed ><li> <b>0</b> indicates the object is present in the database but ignored, i.e. it cannot be managed, counted or listed. This status is applied on objects deleted from the GUI.<br/></li><li> <b>1</b> indicates the object is enabled and managed.<br/></li><li> <b>2</b> indicates the object is unmanaged, disabled or both depending on the context.<br/></li></ul>By default, <b>row_state</b> is set to <b>1</b> when an object is created.
	RowState *string `json:"row_state,omitempty"`
}

// NewDataInnerDeviceDeviceData instantiates a new DataInnerDeviceDeviceData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataInnerDeviceDeviceData() *DataInnerDeviceDeviceData {
	this := DataInnerDeviceDeviceData{}
	return &this
}

// NewDataInnerDeviceDeviceDataWithDefaults instantiates a new DataInnerDeviceDeviceData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataInnerDeviceDeviceDataWithDefaults() *DataInnerDeviceDeviceData {
	this := DataInnerDeviceDeviceData{}
	return &this
}

// GetDeviceClassName returns the DeviceClassName field value if set, zero value otherwise.
func (o *DataInnerDeviceDeviceData) GetDeviceClassName() string {
	if o == nil || IsNil(o.DeviceClassName) {
		var ret string
		return ret
	}
	return *o.DeviceClassName
}

// GetDeviceClassNameOk returns a tuple with the DeviceClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDeviceDeviceData) GetDeviceClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceClassName) {
		return nil, false
	}
	return o.DeviceClassName, true
}

// HasDeviceClassName returns a boolean if a field has been set.
func (o *DataInnerDeviceDeviceData) HasDeviceClassName() bool {
	if o != nil && !IsNil(o.DeviceClassName) {
		return true
	}

	return false
}

// SetDeviceClassName gets a reference to the given string and assigns it to the DeviceClassName field.
func (o *DataInnerDeviceDeviceData) SetDeviceClassName(v string) {
	o.DeviceClassName = &v
}

// GetDeviceClassParameters returns the DeviceClassParameters field value if set, zero value otherwise.
func (o *DataInnerDeviceDeviceData) GetDeviceClassParameters() []ApiClassParameterOutputEntry {
	if o == nil || IsNil(o.DeviceClassParameters) {
		var ret []ApiClassParameterOutputEntry
		return ret
	}
	return o.DeviceClassParameters
}

// GetDeviceClassParametersOk returns a tuple with the DeviceClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDeviceDeviceData) GetDeviceClassParametersOk() ([]ApiClassParameterOutputEntry, bool) {
	if o == nil || IsNil(o.DeviceClassParameters) {
		return nil, false
	}
	return o.DeviceClassParameters, true
}

// HasDeviceClassParameters returns a boolean if a field has been set.
func (o *DataInnerDeviceDeviceData) HasDeviceClassParameters() bool {
	if o != nil && !IsNil(o.DeviceClassParameters) {
		return true
	}

	return false
}

// SetDeviceClassParameters gets a reference to the given []ApiClassParameterOutputEntry and assigns it to the DeviceClassParameters field.
func (o *DataInnerDeviceDeviceData) SetDeviceClassParameters(v []ApiClassParameterOutputEntry) {
	o.DeviceClassParameters = v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *DataInnerDeviceDeviceData) GetDeviceId() string {
	if o == nil || IsNil(o.DeviceId) {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDeviceDeviceData) GetDeviceIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *DataInnerDeviceDeviceData) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *DataInnerDeviceDeviceData) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetDeviceAddressAddr returns the DeviceAddressAddr field value if set, zero value otherwise.
func (o *DataInnerDeviceDeviceData) GetDeviceAddressAddr() string {
	if o == nil || IsNil(o.DeviceAddressAddr) {
		var ret string
		return ret
	}
	return *o.DeviceAddressAddr
}

// GetDeviceAddressAddrOk returns a tuple with the DeviceAddressAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDeviceDeviceData) GetDeviceAddressAddrOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceAddressAddr) {
		return nil, false
	}
	return o.DeviceAddressAddr, true
}

// HasDeviceAddressAddr returns a boolean if a field has been set.
func (o *DataInnerDeviceDeviceData) HasDeviceAddressAddr() bool {
	if o != nil && !IsNil(o.DeviceAddressAddr) {
		return true
	}

	return false
}

// SetDeviceAddressAddr gets a reference to the given string and assigns it to the DeviceAddressAddr field.
func (o *DataInnerDeviceDeviceData) SetDeviceAddressAddr(v string) {
	o.DeviceAddressAddr = &v
}

// GetDeviceAddressFormated returns the DeviceAddressFormated field value if set, zero value otherwise.
func (o *DataInnerDeviceDeviceData) GetDeviceAddressFormated() string {
	if o == nil || IsNil(o.DeviceAddressFormated) {
		var ret string
		return ret
	}
	return *o.DeviceAddressFormated
}

// GetDeviceAddressFormatedOk returns a tuple with the DeviceAddressFormated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDeviceDeviceData) GetDeviceAddressFormatedOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceAddressFormated) {
		return nil, false
	}
	return o.DeviceAddressFormated, true
}

// HasDeviceAddressFormated returns a boolean if a field has been set.
func (o *DataInnerDeviceDeviceData) HasDeviceAddressFormated() bool {
	if o != nil && !IsNil(o.DeviceAddressFormated) {
		return true
	}

	return false
}

// SetDeviceAddressFormated gets a reference to the given string and assigns it to the DeviceAddressFormated field.
func (o *DataInnerDeviceDeviceData) SetDeviceAddressFormated(v string) {
	o.DeviceAddressFormated = &v
}

// GetDeviceName returns the DeviceName field value if set, zero value otherwise.
func (o *DataInnerDeviceDeviceData) GetDeviceName() string {
	if o == nil || IsNil(o.DeviceName) {
		var ret string
		return ret
	}
	return *o.DeviceName
}

// GetDeviceNameOk returns a tuple with the DeviceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDeviceDeviceData) GetDeviceNameOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceName) {
		return nil, false
	}
	return o.DeviceName, true
}

// HasDeviceName returns a boolean if a field has been set.
func (o *DataInnerDeviceDeviceData) HasDeviceName() bool {
	if o != nil && !IsNil(o.DeviceName) {
		return true
	}

	return false
}

// SetDeviceName gets a reference to the given string and assigns it to the DeviceName field.
func (o *DataInnerDeviceDeviceData) SetDeviceName(v string) {
	o.DeviceName = &v
}

// GetDeviceSpaceId returns the DeviceSpaceId field value if set, zero value otherwise.
func (o *DataInnerDeviceDeviceData) GetDeviceSpaceId() string {
	if o == nil || IsNil(o.DeviceSpaceId) {
		var ret string
		return ret
	}
	return *o.DeviceSpaceId
}

// GetDeviceSpaceIdOk returns a tuple with the DeviceSpaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDeviceDeviceData) GetDeviceSpaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceSpaceId) {
		return nil, false
	}
	return o.DeviceSpaceId, true
}

// HasDeviceSpaceId returns a boolean if a field has been set.
func (o *DataInnerDeviceDeviceData) HasDeviceSpaceId() bool {
	if o != nil && !IsNil(o.DeviceSpaceId) {
		return true
	}

	return false
}

// SetDeviceSpaceId gets a reference to the given string and assigns it to the DeviceSpaceId field.
func (o *DataInnerDeviceDeviceData) SetDeviceSpaceId(v string) {
	o.DeviceSpaceId = &v
}

// GetDeviceSpaceName returns the DeviceSpaceName field value if set, zero value otherwise.
func (o *DataInnerDeviceDeviceData) GetDeviceSpaceName() string {
	if o == nil || IsNil(o.DeviceSpaceName) {
		var ret string
		return ret
	}
	return *o.DeviceSpaceName
}

// GetDeviceSpaceNameOk returns a tuple with the DeviceSpaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDeviceDeviceData) GetDeviceSpaceNameOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceSpaceName) {
		return nil, false
	}
	return o.DeviceSpaceName, true
}

// HasDeviceSpaceName returns a boolean if a field has been set.
func (o *DataInnerDeviceDeviceData) HasDeviceSpaceName() bool {
	if o != nil && !IsNil(o.DeviceSpaceName) {
		return true
	}

	return false
}

// SetDeviceSpaceName gets a reference to the given string and assigns it to the DeviceSpaceName field.
func (o *DataInnerDeviceDeviceData) SetDeviceSpaceName(v string) {
	o.DeviceSpaceName = &v
}

// GetInterfaceFree returns the InterfaceFree field value if set, zero value otherwise.
func (o *DataInnerDeviceDeviceData) GetInterfaceFree() string {
	if o == nil || IsNil(o.InterfaceFree) {
		var ret string
		return ret
	}
	return *o.InterfaceFree
}

// GetInterfaceFreeOk returns a tuple with the InterfaceFree field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDeviceDeviceData) GetInterfaceFreeOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceFree) {
		return nil, false
	}
	return o.InterfaceFree, true
}

// HasInterfaceFree returns a boolean if a field has been set.
func (o *DataInnerDeviceDeviceData) HasInterfaceFree() bool {
	if o != nil && !IsNil(o.InterfaceFree) {
		return true
	}

	return false
}

// SetInterfaceFree gets a reference to the given string and assigns it to the InterfaceFree field.
func (o *DataInnerDeviceDeviceData) SetInterfaceFree(v string) {
	o.InterfaceFree = &v
}

// GetInterfaceTotal returns the InterfaceTotal field value if set, zero value otherwise.
func (o *DataInnerDeviceDeviceData) GetInterfaceTotal() string {
	if o == nil || IsNil(o.InterfaceTotal) {
		var ret string
		return ret
	}
	return *o.InterfaceTotal
}

// GetInterfaceTotalOk returns a tuple with the InterfaceTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDeviceDeviceData) GetInterfaceTotalOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceTotal) {
		return nil, false
	}
	return o.InterfaceTotal, true
}

// HasInterfaceTotal returns a boolean if a field has been set.
func (o *DataInnerDeviceDeviceData) HasInterfaceTotal() bool {
	if o != nil && !IsNil(o.InterfaceTotal) {
		return true
	}

	return false
}

// SetInterfaceTotal gets a reference to the given string and assigns it to the InterfaceTotal field.
func (o *DataInnerDeviceDeviceData) SetInterfaceTotal(v string) {
	o.InterfaceTotal = &v
}

// GetInterfaceUsed returns the InterfaceUsed field value if set, zero value otherwise.
func (o *DataInnerDeviceDeviceData) GetInterfaceUsed() string {
	if o == nil || IsNil(o.InterfaceUsed) {
		var ret string
		return ret
	}
	return *o.InterfaceUsed
}

// GetInterfaceUsedOk returns a tuple with the InterfaceUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDeviceDeviceData) GetInterfaceUsedOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceUsed) {
		return nil, false
	}
	return o.InterfaceUsed, true
}

// HasInterfaceUsed returns a boolean if a field has been set.
func (o *DataInnerDeviceDeviceData) HasInterfaceUsed() bool {
	if o != nil && !IsNil(o.InterfaceUsed) {
		return true
	}

	return false
}

// SetInterfaceUsed gets a reference to the given string and assigns it to the InterfaceUsed field.
func (o *DataInnerDeviceDeviceData) SetInterfaceUsed(v string) {
	o.InterfaceUsed = &v
}

// GetInterfaceUsedPercent returns the InterfaceUsedPercent field value if set, zero value otherwise.
func (o *DataInnerDeviceDeviceData) GetInterfaceUsedPercent() string {
	if o == nil || IsNil(o.InterfaceUsedPercent) {
		var ret string
		return ret
	}
	return *o.InterfaceUsedPercent
}

// GetInterfaceUsedPercentOk returns a tuple with the InterfaceUsedPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDeviceDeviceData) GetInterfaceUsedPercentOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceUsedPercent) {
		return nil, false
	}
	return o.InterfaceUsedPercent, true
}

// HasInterfaceUsedPercent returns a boolean if a field has been set.
func (o *DataInnerDeviceDeviceData) HasInterfaceUsedPercent() bool {
	if o != nil && !IsNil(o.InterfaceUsedPercent) {
		return true
	}

	return false
}

// SetInterfaceUsedPercent gets a reference to the given string and assigns it to the InterfaceUsedPercent field.
func (o *DataInnerDeviceDeviceData) SetInterfaceUsedPercent(v string) {
	o.InterfaceUsedPercent = &v
}

// GetDevId returns the DevId field value if set, zero value otherwise.
func (o *DataInnerDeviceDeviceData) GetDevId() string {
	if o == nil || IsNil(o.DevId) {
		var ret string
		return ret
	}
	return *o.DevId
}

// GetDevIdOk returns a tuple with the DevId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDeviceDeviceData) GetDevIdOk() (*string, bool) {
	if o == nil || IsNil(o.DevId) {
		return nil, false
	}
	return o.DevId, true
}

// HasDevId returns a boolean if a field has been set.
func (o *DataInnerDeviceDeviceData) HasDevId() bool {
	if o != nil && !IsNil(o.DevId) {
		return true
	}

	return false
}

// SetDevId gets a reference to the given string and assigns it to the DevId field.
func (o *DataInnerDeviceDeviceData) SetDevId(v string) {
	o.DevId = &v
}

// GetDevName returns the DevName field value if set, zero value otherwise.
func (o *DataInnerDeviceDeviceData) GetDevName() string {
	if o == nil || IsNil(o.DevName) {
		var ret string
		return ret
	}
	return *o.DevName
}

// GetDevNameOk returns a tuple with the DevName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDeviceDeviceData) GetDevNameOk() (*string, bool) {
	if o == nil || IsNil(o.DevName) {
		return nil, false
	}
	return o.DevName, true
}

// HasDevName returns a boolean if a field has been set.
func (o *DataInnerDeviceDeviceData) HasDevName() bool {
	if o != nil && !IsNil(o.DevName) {
		return true
	}

	return false
}

// SetDevName gets a reference to the given string and assigns it to the DevName field.
func (o *DataInnerDeviceDeviceData) SetDevName(v string) {
	o.DevName = &v
}

// GetDevicePortFree returns the DevicePortFree field value if set, zero value otherwise.
func (o *DataInnerDeviceDeviceData) GetDevicePortFree() string {
	if o == nil || IsNil(o.DevicePortFree) {
		var ret string
		return ret
	}
	return *o.DevicePortFree
}

// GetDevicePortFreeOk returns a tuple with the DevicePortFree field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDeviceDeviceData) GetDevicePortFreeOk() (*string, bool) {
	if o == nil || IsNil(o.DevicePortFree) {
		return nil, false
	}
	return o.DevicePortFree, true
}

// HasDevicePortFree returns a boolean if a field has been set.
func (o *DataInnerDeviceDeviceData) HasDevicePortFree() bool {
	if o != nil && !IsNil(o.DevicePortFree) {
		return true
	}

	return false
}

// SetDevicePortFree gets a reference to the given string and assigns it to the DevicePortFree field.
func (o *DataInnerDeviceDeviceData) SetDevicePortFree(v string) {
	o.DevicePortFree = &v
}

// GetDevicePortTotal returns the DevicePortTotal field value if set, zero value otherwise.
func (o *DataInnerDeviceDeviceData) GetDevicePortTotal() string {
	if o == nil || IsNil(o.DevicePortTotal) {
		var ret string
		return ret
	}
	return *o.DevicePortTotal
}

// GetDevicePortTotalOk returns a tuple with the DevicePortTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDeviceDeviceData) GetDevicePortTotalOk() (*string, bool) {
	if o == nil || IsNil(o.DevicePortTotal) {
		return nil, false
	}
	return o.DevicePortTotal, true
}

// HasDevicePortTotal returns a boolean if a field has been set.
func (o *DataInnerDeviceDeviceData) HasDevicePortTotal() bool {
	if o != nil && !IsNil(o.DevicePortTotal) {
		return true
	}

	return false
}

// SetDevicePortTotal gets a reference to the given string and assigns it to the DevicePortTotal field.
func (o *DataInnerDeviceDeviceData) SetDevicePortTotal(v string) {
	o.DevicePortTotal = &v
}

// GetDevicePortUsed returns the DevicePortUsed field value if set, zero value otherwise.
func (o *DataInnerDeviceDeviceData) GetDevicePortUsed() string {
	if o == nil || IsNil(o.DevicePortUsed) {
		var ret string
		return ret
	}
	return *o.DevicePortUsed
}

// GetDevicePortUsedOk returns a tuple with the DevicePortUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDeviceDeviceData) GetDevicePortUsedOk() (*string, bool) {
	if o == nil || IsNil(o.DevicePortUsed) {
		return nil, false
	}
	return o.DevicePortUsed, true
}

// HasDevicePortUsed returns a boolean if a field has been set.
func (o *DataInnerDeviceDeviceData) HasDevicePortUsed() bool {
	if o != nil && !IsNil(o.DevicePortUsed) {
		return true
	}

	return false
}

// SetDevicePortUsed gets a reference to the given string and assigns it to the DevicePortUsed field.
func (o *DataInnerDeviceDeviceData) SetDevicePortUsed(v string) {
	o.DevicePortUsed = &v
}

// GetDevicePortUsedPercent returns the DevicePortUsedPercent field value if set, zero value otherwise.
func (o *DataInnerDeviceDeviceData) GetDevicePortUsedPercent() string {
	if o == nil || IsNil(o.DevicePortUsedPercent) {
		var ret string
		return ret
	}
	return *o.DevicePortUsedPercent
}

// GetDevicePortUsedPercentOk returns a tuple with the DevicePortUsedPercent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDeviceDeviceData) GetDevicePortUsedPercentOk() (*string, bool) {
	if o == nil || IsNil(o.DevicePortUsedPercent) {
		return nil, false
	}
	return o.DevicePortUsedPercent, true
}

// HasDevicePortUsedPercent returns a boolean if a field has been set.
func (o *DataInnerDeviceDeviceData) HasDevicePortUsedPercent() bool {
	if o != nil && !IsNil(o.DevicePortUsedPercent) {
		return true
	}

	return false
}

// SetDevicePortUsedPercent gets a reference to the given string and assigns it to the DevicePortUsedPercent field.
func (o *DataInnerDeviceDeviceData) SetDevicePortUsedPercent(v string) {
	o.DevicePortUsedPercent = &v
}

// GetRowState returns the RowState field value if set, zero value otherwise.
func (o *DataInnerDeviceDeviceData) GetRowState() string {
	if o == nil || IsNil(o.RowState) {
		var ret string
		return ret
	}
	return *o.RowState
}

// GetRowStateOk returns a tuple with the RowState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDeviceDeviceData) GetRowStateOk() (*string, bool) {
	if o == nil || IsNil(o.RowState) {
		return nil, false
	}
	return o.RowState, true
}

// HasRowState returns a boolean if a field has been set.
func (o *DataInnerDeviceDeviceData) HasRowState() bool {
	if o != nil && !IsNil(o.RowState) {
		return true
	}

	return false
}

// SetRowState gets a reference to the given string and assigns it to the RowState field.
func (o *DataInnerDeviceDeviceData) SetRowState(v string) {
	o.RowState = &v
}

func (o DataInnerDeviceDeviceData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataInnerDeviceDeviceData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeviceClassName) {
		toSerialize["device_class_name"] = o.DeviceClassName
	}
	if !IsNil(o.DeviceClassParameters) {
		toSerialize["device_class_parameters"] = o.DeviceClassParameters
	}
	if !IsNil(o.DeviceId) {
		toSerialize["device_id"] = o.DeviceId
	}
	if !IsNil(o.DeviceAddressAddr) {
		toSerialize["device_address_addr"] = o.DeviceAddressAddr
	}
	if !IsNil(o.DeviceAddressFormated) {
		toSerialize["device_address_formated"] = o.DeviceAddressFormated
	}
	if !IsNil(o.DeviceName) {
		toSerialize["device_name"] = o.DeviceName
	}
	if !IsNil(o.DeviceSpaceId) {
		toSerialize["device_space_id"] = o.DeviceSpaceId
	}
	if !IsNil(o.DeviceSpaceName) {
		toSerialize["device_space_name"] = o.DeviceSpaceName
	}
	if !IsNil(o.InterfaceFree) {
		toSerialize["interface_free"] = o.InterfaceFree
	}
	if !IsNil(o.InterfaceTotal) {
		toSerialize["interface_total"] = o.InterfaceTotal
	}
	if !IsNil(o.InterfaceUsed) {
		toSerialize["interface_used"] = o.InterfaceUsed
	}
	if !IsNil(o.InterfaceUsedPercent) {
		toSerialize["interface_used_percent"] = o.InterfaceUsedPercent
	}
	if !IsNil(o.DevId) {
		toSerialize["dev_id"] = o.DevId
	}
	if !IsNil(o.DevName) {
		toSerialize["dev_name"] = o.DevName
	}
	if !IsNil(o.DevicePortFree) {
		toSerialize["device_port_free"] = o.DevicePortFree
	}
	if !IsNil(o.DevicePortTotal) {
		toSerialize["device_port_total"] = o.DevicePortTotal
	}
	if !IsNil(o.DevicePortUsed) {
		toSerialize["device_port_used"] = o.DevicePortUsed
	}
	if !IsNil(o.DevicePortUsedPercent) {
		toSerialize["device_port_used_percent"] = o.DevicePortUsedPercent
	}
	if !IsNil(o.RowState) {
		toSerialize["row_state"] = o.RowState
	}
	return toSerialize, nil
}

type NullableDataInnerDeviceDeviceData struct {
	value *DataInnerDeviceDeviceData
	isSet bool
}

func (v NullableDataInnerDeviceDeviceData) Get() *DataInnerDeviceDeviceData {
	return v.value
}

func (v *NullableDataInnerDeviceDeviceData) Set(val *DataInnerDeviceDeviceData) {
	v.value = val
	v.isSet = true
}

func (v NullableDataInnerDeviceDeviceData) IsSet() bool {
	return v.isSet
}

func (v *NullableDataInnerDeviceDeviceData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataInnerDeviceDeviceData(val *DataInnerDeviceDeviceData) *NullableDataInnerDeviceDeviceData {
	return &NullableDataInnerDeviceDeviceData{value: val, isSet: true}
}

func (v NullableDataInnerDeviceDeviceData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataInnerDeviceDeviceData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
