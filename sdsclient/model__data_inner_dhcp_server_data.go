/*
SOLIDserver API

OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2024 EfficientIP</p><p><em>All specifications and information regarding the products in this document are subject to change without notice and should not be construed as a commitment by EfficientIP. EfficientIP assumes no responsibility or liability for any mistakes or inaccuracies that may appear in this document. All statements and recommendations in this document are believed to be accurate but are presented without warranty. Users must take full responsibility for their application of any product.</em></p><p><em>This document aims at detailing EfficientIP proprietary solutions. As our solutions rely on several third-party products, created by other companies or organizations, it may redirect readers to third-party websites and documentation for further information. In such a case, EfficientIP cannot be liable or expected to provide said information on products they do maintain or created.</em></p><p>Generated (Friday 4th of October 2024 03:41:11 PM)</p>

API version: 2.0
Contact: support-api@efficientip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// checks if the DataInnerDhcpServerData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataInnerDhcpServerData{}

// DataInnerDhcpServerData struct for DataInnerDhcpServerData
type DataInnerDhcpServerData struct {
	// Internal use. Not documented.
	ServerCiscoLogin *string `json:"server_cisco_login,omitempty"`
	// Internal use. Not documented.
	ServerCiscoPassword *string `json:"server_cisco_password,omitempty"`
	// Internal use. Not documented.
	ServerCiscoRootPassword *string `json:"server_cisco_root_password,omitempty"`
	// Internal use. Not documented.
	ServerCiscoUseSsh *string `json:"server_cisco_use_ssh,omitempty"`
	// The IP address of the heartbeat of the server, a direct link between the servers of the cluster.
	ClusterHbHostaddr *string `json:"cluster_hb_hostaddr,omitempty"`
	// The database identifier (ID) of the other server of the cluster.
	ClusterPeerServerId *string `json:"cluster_peer_server_id,omitempty"`
	// The role of the server in the cluster, either <b>active (M)</b>, <b>passive (B)</b> or <b>N/A (#)</b>.
	ServerClusterRole *string `json:"server_cluster_role,omitempty"`
	// The database identifier (ID) of the SSH key dedicated to the cluster communication.
	ClusterSshKeyringId *string `json:"cluster_ssh_keyring_id,omitempty"`
	// The local physical IP address of the VIP the cluster relies on.
	ClusterVipPhysHostaddr *string `json:"cluster_vip_phys_hostaddr,omitempty"`
	// The name of the connection profile used as connection method for the DHCPv4 server.
	ConnectionprofileName *string `json:"connectionprofile_name,omitempty"`
	// The name of the class applied to the DHCPv4 server, it can be preceded by the class directory.
	ServerClassName *string `json:"server_class_name,omitempty"`
	// The class parameters applied to the DHCPv4 server.
	ServerClassParameters []ApiClassParameterOutputEntry `json:"server_class_parameters,omitempty"`
	// The description of the DHCPv4 server.
	ServerComment *string `json:"server_comment,omitempty"`
	// The database identifier (ID) of the DHCPv4 server, a unique numeric key value automatically incremented when you add a DHCPv4 server.
	ServerId *string `json:"server_id,omitempty"`
	// The local time on the DHCPv4 server, in decimal UNIX date format.
	ServerLocaltime *string `json:"server_localtime,omitempty"`
	// The name of the DHCPv4 server.
	ServerName *string `json:"server_name,omitempty"`
	// The status of the DHCPv4 server: <table><caption>server_state possible values</caption><br/><thead><tr><th>Status</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >ER</td><td >The license used in SOLIDserver is not compliant with the added server: the license is invalid.</td></tr><tr><td >ES</td><td >The server configuration could not be parsed properly.</td></tr><tr><td >ET</td><td >The server does not answer anymore due to a scheduled configuration of the server.</td></tr><tr><td >IS</td><td >There was a setting error during the server declaration. For instance, some settings were added to a server that does not support them or a smart architecture is not managing any physical server.</td></tr><tr><td >IC</td><td >The SSL credentials are invalid</td></tr><tr><td >IP</td><td >The account used to add the Microsoft Windows DHCP server does not have sufficient privileges to manage it.</td></tr><tr><td >LS</td><td >The server configuration is not viable.</td></tr><tr><td >N</td><td >The server does not have a status as it has not synchronized yet.</td></tr><tr><td >Y</td><td >The server is operational.</td></tr></tbody></table></p><br/>
	ServerState *string `json:"server_state,omitempty"`
	// The synchronization status of the DHCPv4 server. <b>1</b> indicates that the server is currently being synchronized.
	ServerSynching *string `json:"server_synching,omitempty"`
	// The type of the DHCPv4 server: <table><caption>server_type possible values</caption><br/><thead><tr><th>Type</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >ipm</td><td >EfficientIP or EfficientIP Package server</td></tr><tr><td >msrpc</td><td >Microsoft Windows DHCP server</td></tr><tr><td >vdhcp</td><td >EfficientIP DHCPv4 smart architecture</td></tr></tbody></table></p><br/>
	ServerType *string `json:"server_type,omitempty"`
	// Internal use. Not documented.
	ServerUboottime *string `json:"server_uboottime,omitempty"`
	// The version details of the DHCPv4 server.
	ServerVersion *string `json:"server_version,omitempty"`
	// The human readable version of the parameter <b>server_addr</b> or <b>server_addr6</b>.
	ServerHostaddr *string `json:"server_hostaddr,omitempty"`
	// The Management IP address of the DHCPv4 server, the IPv6 address configured when adding the server, in hexadecimal format.
	ServerAddr6 *string `json:"server_addr6,omitempty"`
	// The Management IP address of the DHCPv4 server, the IPv4 address configured when adding the server, in hexadecimal format.
	ServerAddr *string `json:"server_addr,omitempty"`
	// Internal use. Not documented.
	ServerHttpsLogin *string `json:"server_https_login,omitempty"`
	// The DHCPv4 server package information. <b>Y</b> for an EfficientIP Package server, <b>N</b> for an appliance or virtual machine, <b>U</b> the package information is irrelevant. For servers with a <b>server_type</b> set to <b>ipm</b>, <b>U</b> indicates either EfficientIP Packages or appliances/virtual machines.
	ServerIsPackage *string `json:"server_is_package,omitempty"`
	// Internal use. Not documented.
	ServerIpmdhcpProtocol *string `json:"server_ipmdhcp_protocol,omitempty"`
	// A way to determine if the server can update any other module <b>(1)</b>.
	ServerIsolated *string `json:"server_isolated,omitempty"`
	// Internal use. Not documented.
	ServerMsUseSsl *string `json:"server_ms_use_ssl,omitempty"`
	// The domain name of the Microsoft Windows DHCP server.
	ServerMsrpcDomain *string `json:"server_msrpc_domain,omitempty"`
	// The login of the Microsoft Windows DHCP server.
	ServerMsrpcLogin *string `json:"server_msrpc_login,omitempty"`
	// The Multi-status information is displayed as follows: <i>&lt;number-of-instances&gt;@&lt;message-number&gt;@&lt;multi-status-severity&gt;@&lt;module&gt;</i>. The different severity levels are:<br><b>Multi-status severity levels</b>    <table border=1>        <thead>        <tr >            <td><b>Message number</b></td>            <td><b>Severity</b></td>            <td><b>Description</b></td>        </tr>        </thead>        <tbody>        <tr  valign=middle>            <td>0 - 16</td>            <td>Emergency</td>            <td>The object configuration prevents the system from running properly. Action is required.</td>        </tr>        <tr  valign=middle>            <td>17 - 33</td>            <td>Critical</td>            <td>The object configuration is in critical conditions. Immediate action is recommended.</td>        </tr>        <tr  valign=middle>            <td>34 - 50</td>            <td>Error</td>            <td>The object configuration failed at some level. Action is recommended.</td>        </tr>        <tr  valign=middle>            <td>51 - 66</td>            <td>Warning</td>            <td>The object configuration triggers error messages if no action is taken. Action to be taken at your discretion.</td>        </tr>        <tr  valign=middle>            <td>67 - 83</td>            <td>Notice</td>            <td>The object configuration is normal but undergoing events that might trigger errors. No immediate action required.</td>        </tr>        <tr  valign=middle>            <td>84 - 100</td>            <td>Informational</td>            <td>The object configuration is normal, operational messages (might inform you about potential incompatibilities with other modules, etc). No action required.</td>        </tr>        </tbody></table>
	ServerMultistatus *string `json:"server_multistatus,omitempty"`
	// The name of the Master or Single DHCPv4 server within the smart architecture.
	Ref1ServerName *string `json:"ref1_server_name,omitempty"`
	// Internal use. Not documented.
	Ref2ServerName *string `json:"ref2_server_name,omitempty"`
	// The URL of the HTTP(S) reverse proxy server that forwards client requests to the DHCPv4 server, if you configured one.
	ReverseProxyConf *string `json:"reverse_proxy_conf,omitempty"`
	// The Service IP address of the DHCPv4 server, the IPv4 address configured when adding the server.
	ServiceAddressAddr *string `json:"service_address_addr,omitempty"`
	// Internal use. Not documented.
	ServerSnmpId *string `json:"server_snmp_id,omitempty"`
	// Internal use. Not documented.
	ServerSnmpPort *string `json:"server_snmp_port,omitempty"`
	// Internal use. Not documented.
	ServerSnmpProfileId *string `json:"server_snmp_profile_id,omitempty"`
	// Internal use. Not documented.
	ServerSnmpRetry *string `json:"server_snmp_retry,omitempty"`
	// Internal use. Not documented.
	ServerSnmpTimeout *string `json:"server_snmp_timeout,omitempty"`
	// Internal use. Not documented.
	ServerSnmpUseTcp *string `json:"server_snmp_use_tcp,omitempty"`
	// Internal use. Not documented.
	ServerStatEnabled *string `json:"server_stat_enabled,omitempty"`
	// Internal use. Not documented.
	ServerStatNiceness *string `json:"server_stat_niceness,omitempty"`
	// Internal use. Not documented.
	ServerStatPeriod *string `json:"server_stat_period,omitempty"`
	// Internal use. Not documented.
	ServerStatTime *string `json:"server_stat_time,omitempty"`
	// Internal use. Not documented.
	ServerTcpPort *string `json:"server_tcp_port,omitempty"`
	// The total number of servers managed by the DHCPv4 smart architecture.
	TotalSmartMembers *string `json:"total_smart_members,omitempty"`
	// The type of the DHCPv4 smart architecture: <table><caption>smart_arch possible values</caption><br/><thead><tr><th>Type</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >masterslave</td><td >The One-to-One smart architecture sets a pair of DHCP servers in a Master/Backup configuration.</td></tr><tr><td >star</td><td >The One-to-Many smart architecture sets a multi-site failover configuration at the cost of n-servers+1.</td></tr><tr><td >splitscope</td><td >The Split-Scope smart architecture sets a pair of DHCP servers in a configuration where the two scopes listen to the same subnet, but the range of addresses is divided.</td></tr><tr><td >single</td><td >The Single-Server smart architecture manages a single DHCP server.</td></tr></tbody></table></p><br/>
	SmartArch *string `json:"smart_arch,omitempty"`
	// The list of the servers managed by the DHCPv4 smart architecture, as follows: <b>&lt;dhcp_name&gt;,&lt;dhcp_name&gt;,...</b> .
	SmartMembersName *string `json:"smart_members_name,omitempty"`
	// Internal use. Not documented.
	SmartParam1 *string `json:"smart_param1,omitempty"`
	// The type of the DHCPv4 smart architecture managing the DHCPv4 server. No value indicates that the server is not managed by a smart architecture or is a smart architecture itself.
	SmartParentArch *string `json:"smart_parent_arch,omitempty"`
	// The database identifier (ID) of the DHCPv4 smart architecture managing the DHCPv4 server. <b>0</b> indicates that the server is not managed by a smart architecture or is a smart architecture itself.
	SmartParentId *string `json:"smart_parent_id,omitempty"`
	// The name of the DHCPv4 smart architecture managing the DHCPv4 server. <b>#</b> indicates that the server is not managed by a smart architecture or is a smart architecture itself.
	SmartParentName *string `json:"smart_parent_name,omitempty"`
	// The database identifier (ID) of the DHCPv4 smart architecture the server belongs to.
	SmartRef1ServerId *string `json:"smart_ref1_server_id,omitempty"`
	// Internal use. Not documented.
	SmartRef1ServerName *string `json:"smart_ref1_server_name,omitempty"`
	// Internal use. Not documented.
	SmartRef2ServerId *string `json:"smart_ref2_server_id,omitempty"`
	// Internal use. Not documented.
	SmartRef2ServerName *string `json:"smart_ref2_server_name,omitempty"`
	// Internal use. Not documented.
	ServerWindhcpProtocol *string `json:"server_windhcp_protocol,omitempty"`
}

// NewDataInnerDhcpServerData instantiates a new DataInnerDhcpServerData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataInnerDhcpServerData() *DataInnerDhcpServerData {
	this := DataInnerDhcpServerData{}
	return &this
}

// NewDataInnerDhcpServerDataWithDefaults instantiates a new DataInnerDhcpServerData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataInnerDhcpServerDataWithDefaults() *DataInnerDhcpServerData {
	this := DataInnerDhcpServerData{}
	return &this
}

// GetServerCiscoLogin returns the ServerCiscoLogin field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerCiscoLogin() string {
	if o == nil || IsNil(o.ServerCiscoLogin) {
		var ret string
		return ret
	}
	return *o.ServerCiscoLogin
}

// GetServerCiscoLoginOk returns a tuple with the ServerCiscoLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerCiscoLoginOk() (*string, bool) {
	if o == nil || IsNil(o.ServerCiscoLogin) {
		return nil, false
	}
	return o.ServerCiscoLogin, true
}

// HasServerCiscoLogin returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerCiscoLogin() bool {
	if o != nil && !IsNil(o.ServerCiscoLogin) {
		return true
	}

	return false
}

// SetServerCiscoLogin gets a reference to the given string and assigns it to the ServerCiscoLogin field.
func (o *DataInnerDhcpServerData) SetServerCiscoLogin(v string) {
	o.ServerCiscoLogin = &v
}

// GetServerCiscoPassword returns the ServerCiscoPassword field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerCiscoPassword() string {
	if o == nil || IsNil(o.ServerCiscoPassword) {
		var ret string
		return ret
	}
	return *o.ServerCiscoPassword
}

// GetServerCiscoPasswordOk returns a tuple with the ServerCiscoPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerCiscoPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.ServerCiscoPassword) {
		return nil, false
	}
	return o.ServerCiscoPassword, true
}

// HasServerCiscoPassword returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerCiscoPassword() bool {
	if o != nil && !IsNil(o.ServerCiscoPassword) {
		return true
	}

	return false
}

// SetServerCiscoPassword gets a reference to the given string and assigns it to the ServerCiscoPassword field.
func (o *DataInnerDhcpServerData) SetServerCiscoPassword(v string) {
	o.ServerCiscoPassword = &v
}

// GetServerCiscoRootPassword returns the ServerCiscoRootPassword field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerCiscoRootPassword() string {
	if o == nil || IsNil(o.ServerCiscoRootPassword) {
		var ret string
		return ret
	}
	return *o.ServerCiscoRootPassword
}

// GetServerCiscoRootPasswordOk returns a tuple with the ServerCiscoRootPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerCiscoRootPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.ServerCiscoRootPassword) {
		return nil, false
	}
	return o.ServerCiscoRootPassword, true
}

// HasServerCiscoRootPassword returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerCiscoRootPassword() bool {
	if o != nil && !IsNil(o.ServerCiscoRootPassword) {
		return true
	}

	return false
}

// SetServerCiscoRootPassword gets a reference to the given string and assigns it to the ServerCiscoRootPassword field.
func (o *DataInnerDhcpServerData) SetServerCiscoRootPassword(v string) {
	o.ServerCiscoRootPassword = &v
}

// GetServerCiscoUseSsh returns the ServerCiscoUseSsh field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerCiscoUseSsh() string {
	if o == nil || IsNil(o.ServerCiscoUseSsh) {
		var ret string
		return ret
	}
	return *o.ServerCiscoUseSsh
}

// GetServerCiscoUseSshOk returns a tuple with the ServerCiscoUseSsh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerCiscoUseSshOk() (*string, bool) {
	if o == nil || IsNil(o.ServerCiscoUseSsh) {
		return nil, false
	}
	return o.ServerCiscoUseSsh, true
}

// HasServerCiscoUseSsh returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerCiscoUseSsh() bool {
	if o != nil && !IsNil(o.ServerCiscoUseSsh) {
		return true
	}

	return false
}

// SetServerCiscoUseSsh gets a reference to the given string and assigns it to the ServerCiscoUseSsh field.
func (o *DataInnerDhcpServerData) SetServerCiscoUseSsh(v string) {
	o.ServerCiscoUseSsh = &v
}

// GetClusterHbHostaddr returns the ClusterHbHostaddr field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetClusterHbHostaddr() string {
	if o == nil || IsNil(o.ClusterHbHostaddr) {
		var ret string
		return ret
	}
	return *o.ClusterHbHostaddr
}

// GetClusterHbHostaddrOk returns a tuple with the ClusterHbHostaddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetClusterHbHostaddrOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterHbHostaddr) {
		return nil, false
	}
	return o.ClusterHbHostaddr, true
}

// HasClusterHbHostaddr returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasClusterHbHostaddr() bool {
	if o != nil && !IsNil(o.ClusterHbHostaddr) {
		return true
	}

	return false
}

// SetClusterHbHostaddr gets a reference to the given string and assigns it to the ClusterHbHostaddr field.
func (o *DataInnerDhcpServerData) SetClusterHbHostaddr(v string) {
	o.ClusterHbHostaddr = &v
}

// GetClusterPeerServerId returns the ClusterPeerServerId field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetClusterPeerServerId() string {
	if o == nil || IsNil(o.ClusterPeerServerId) {
		var ret string
		return ret
	}
	return *o.ClusterPeerServerId
}

// GetClusterPeerServerIdOk returns a tuple with the ClusterPeerServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetClusterPeerServerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterPeerServerId) {
		return nil, false
	}
	return o.ClusterPeerServerId, true
}

// HasClusterPeerServerId returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasClusterPeerServerId() bool {
	if o != nil && !IsNil(o.ClusterPeerServerId) {
		return true
	}

	return false
}

// SetClusterPeerServerId gets a reference to the given string and assigns it to the ClusterPeerServerId field.
func (o *DataInnerDhcpServerData) SetClusterPeerServerId(v string) {
	o.ClusterPeerServerId = &v
}

// GetServerClusterRole returns the ServerClusterRole field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerClusterRole() string {
	if o == nil || IsNil(o.ServerClusterRole) {
		var ret string
		return ret
	}
	return *o.ServerClusterRole
}

// GetServerClusterRoleOk returns a tuple with the ServerClusterRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerClusterRoleOk() (*string, bool) {
	if o == nil || IsNil(o.ServerClusterRole) {
		return nil, false
	}
	return o.ServerClusterRole, true
}

// HasServerClusterRole returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerClusterRole() bool {
	if o != nil && !IsNil(o.ServerClusterRole) {
		return true
	}

	return false
}

// SetServerClusterRole gets a reference to the given string and assigns it to the ServerClusterRole field.
func (o *DataInnerDhcpServerData) SetServerClusterRole(v string) {
	o.ServerClusterRole = &v
}

// GetClusterSshKeyringId returns the ClusterSshKeyringId field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetClusterSshKeyringId() string {
	if o == nil || IsNil(o.ClusterSshKeyringId) {
		var ret string
		return ret
	}
	return *o.ClusterSshKeyringId
}

// GetClusterSshKeyringIdOk returns a tuple with the ClusterSshKeyringId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetClusterSshKeyringIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterSshKeyringId) {
		return nil, false
	}
	return o.ClusterSshKeyringId, true
}

// HasClusterSshKeyringId returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasClusterSshKeyringId() bool {
	if o != nil && !IsNil(o.ClusterSshKeyringId) {
		return true
	}

	return false
}

// SetClusterSshKeyringId gets a reference to the given string and assigns it to the ClusterSshKeyringId field.
func (o *DataInnerDhcpServerData) SetClusterSshKeyringId(v string) {
	o.ClusterSshKeyringId = &v
}

// GetClusterVipPhysHostaddr returns the ClusterVipPhysHostaddr field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetClusterVipPhysHostaddr() string {
	if o == nil || IsNil(o.ClusterVipPhysHostaddr) {
		var ret string
		return ret
	}
	return *o.ClusterVipPhysHostaddr
}

// GetClusterVipPhysHostaddrOk returns a tuple with the ClusterVipPhysHostaddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetClusterVipPhysHostaddrOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterVipPhysHostaddr) {
		return nil, false
	}
	return o.ClusterVipPhysHostaddr, true
}

// HasClusterVipPhysHostaddr returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasClusterVipPhysHostaddr() bool {
	if o != nil && !IsNil(o.ClusterVipPhysHostaddr) {
		return true
	}

	return false
}

// SetClusterVipPhysHostaddr gets a reference to the given string and assigns it to the ClusterVipPhysHostaddr field.
func (o *DataInnerDhcpServerData) SetClusterVipPhysHostaddr(v string) {
	o.ClusterVipPhysHostaddr = &v
}

// GetConnectionprofileName returns the ConnectionprofileName field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetConnectionprofileName() string {
	if o == nil || IsNil(o.ConnectionprofileName) {
		var ret string
		return ret
	}
	return *o.ConnectionprofileName
}

// GetConnectionprofileNameOk returns a tuple with the ConnectionprofileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetConnectionprofileNameOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionprofileName) {
		return nil, false
	}
	return o.ConnectionprofileName, true
}

// HasConnectionprofileName returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasConnectionprofileName() bool {
	if o != nil && !IsNil(o.ConnectionprofileName) {
		return true
	}

	return false
}

// SetConnectionprofileName gets a reference to the given string and assigns it to the ConnectionprofileName field.
func (o *DataInnerDhcpServerData) SetConnectionprofileName(v string) {
	o.ConnectionprofileName = &v
}

// GetServerClassName returns the ServerClassName field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerClassName() string {
	if o == nil || IsNil(o.ServerClassName) {
		var ret string
		return ret
	}
	return *o.ServerClassName
}

// GetServerClassNameOk returns a tuple with the ServerClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServerClassName) {
		return nil, false
	}
	return o.ServerClassName, true
}

// HasServerClassName returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerClassName() bool {
	if o != nil && !IsNil(o.ServerClassName) {
		return true
	}

	return false
}

// SetServerClassName gets a reference to the given string and assigns it to the ServerClassName field.
func (o *DataInnerDhcpServerData) SetServerClassName(v string) {
	o.ServerClassName = &v
}

// GetServerClassParameters returns the ServerClassParameters field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerClassParameters() []ApiClassParameterOutputEntry {
	if o == nil || IsNil(o.ServerClassParameters) {
		var ret []ApiClassParameterOutputEntry
		return ret
	}
	return o.ServerClassParameters
}

// GetServerClassParametersOk returns a tuple with the ServerClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerClassParametersOk() ([]ApiClassParameterOutputEntry, bool) {
	if o == nil || IsNil(o.ServerClassParameters) {
		return nil, false
	}
	return o.ServerClassParameters, true
}

// HasServerClassParameters returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerClassParameters() bool {
	if o != nil && !IsNil(o.ServerClassParameters) {
		return true
	}

	return false
}

// SetServerClassParameters gets a reference to the given []ApiClassParameterOutputEntry and assigns it to the ServerClassParameters field.
func (o *DataInnerDhcpServerData) SetServerClassParameters(v []ApiClassParameterOutputEntry) {
	o.ServerClassParameters = v
}

// GetServerComment returns the ServerComment field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerComment() string {
	if o == nil || IsNil(o.ServerComment) {
		var ret string
		return ret
	}
	return *o.ServerComment
}

// GetServerCommentOk returns a tuple with the ServerComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerCommentOk() (*string, bool) {
	if o == nil || IsNil(o.ServerComment) {
		return nil, false
	}
	return o.ServerComment, true
}

// HasServerComment returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerComment() bool {
	if o != nil && !IsNil(o.ServerComment) {
		return true
	}

	return false
}

// SetServerComment gets a reference to the given string and assigns it to the ServerComment field.
func (o *DataInnerDhcpServerData) SetServerComment(v string) {
	o.ServerComment = &v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerId() string {
	if o == nil || IsNil(o.ServerId) {
		var ret string
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServerId) {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerId() bool {
	if o != nil && !IsNil(o.ServerId) {
		return true
	}

	return false
}

// SetServerId gets a reference to the given string and assigns it to the ServerId field.
func (o *DataInnerDhcpServerData) SetServerId(v string) {
	o.ServerId = &v
}

// GetServerLocaltime returns the ServerLocaltime field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerLocaltime() string {
	if o == nil || IsNil(o.ServerLocaltime) {
		var ret string
		return ret
	}
	return *o.ServerLocaltime
}

// GetServerLocaltimeOk returns a tuple with the ServerLocaltime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerLocaltimeOk() (*string, bool) {
	if o == nil || IsNil(o.ServerLocaltime) {
		return nil, false
	}
	return o.ServerLocaltime, true
}

// HasServerLocaltime returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerLocaltime() bool {
	if o != nil && !IsNil(o.ServerLocaltime) {
		return true
	}

	return false
}

// SetServerLocaltime gets a reference to the given string and assigns it to the ServerLocaltime field.
func (o *DataInnerDhcpServerData) SetServerLocaltime(v string) {
	o.ServerLocaltime = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerName() string {
	if o == nil || IsNil(o.ServerName) {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServerName) {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerName() bool {
	if o != nil && !IsNil(o.ServerName) {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *DataInnerDhcpServerData) SetServerName(v string) {
	o.ServerName = &v
}

// GetServerState returns the ServerState field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerState() string {
	if o == nil || IsNil(o.ServerState) {
		var ret string
		return ret
	}
	return *o.ServerState
}

// GetServerStateOk returns a tuple with the ServerState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerStateOk() (*string, bool) {
	if o == nil || IsNil(o.ServerState) {
		return nil, false
	}
	return o.ServerState, true
}

// HasServerState returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerState() bool {
	if o != nil && !IsNil(o.ServerState) {
		return true
	}

	return false
}

// SetServerState gets a reference to the given string and assigns it to the ServerState field.
func (o *DataInnerDhcpServerData) SetServerState(v string) {
	o.ServerState = &v
}

// GetServerSynching returns the ServerSynching field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerSynching() string {
	if o == nil || IsNil(o.ServerSynching) {
		var ret string
		return ret
	}
	return *o.ServerSynching
}

// GetServerSynchingOk returns a tuple with the ServerSynching field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerSynchingOk() (*string, bool) {
	if o == nil || IsNil(o.ServerSynching) {
		return nil, false
	}
	return o.ServerSynching, true
}

// HasServerSynching returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerSynching() bool {
	if o != nil && !IsNil(o.ServerSynching) {
		return true
	}

	return false
}

// SetServerSynching gets a reference to the given string and assigns it to the ServerSynching field.
func (o *DataInnerDhcpServerData) SetServerSynching(v string) {
	o.ServerSynching = &v
}

// GetServerType returns the ServerType field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerType() string {
	if o == nil || IsNil(o.ServerType) {
		var ret string
		return ret
	}
	return *o.ServerType
}

// GetServerTypeOk returns a tuple with the ServerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ServerType) {
		return nil, false
	}
	return o.ServerType, true
}

// HasServerType returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerType() bool {
	if o != nil && !IsNil(o.ServerType) {
		return true
	}

	return false
}

// SetServerType gets a reference to the given string and assigns it to the ServerType field.
func (o *DataInnerDhcpServerData) SetServerType(v string) {
	o.ServerType = &v
}

// GetServerUboottime returns the ServerUboottime field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerUboottime() string {
	if o == nil || IsNil(o.ServerUboottime) {
		var ret string
		return ret
	}
	return *o.ServerUboottime
}

// GetServerUboottimeOk returns a tuple with the ServerUboottime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerUboottimeOk() (*string, bool) {
	if o == nil || IsNil(o.ServerUboottime) {
		return nil, false
	}
	return o.ServerUboottime, true
}

// HasServerUboottime returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerUboottime() bool {
	if o != nil && !IsNil(o.ServerUboottime) {
		return true
	}

	return false
}

// SetServerUboottime gets a reference to the given string and assigns it to the ServerUboottime field.
func (o *DataInnerDhcpServerData) SetServerUboottime(v string) {
	o.ServerUboottime = &v
}

// GetServerVersion returns the ServerVersion field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerVersion() string {
	if o == nil || IsNil(o.ServerVersion) {
		var ret string
		return ret
	}
	return *o.ServerVersion
}

// GetServerVersionOk returns a tuple with the ServerVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ServerVersion) {
		return nil, false
	}
	return o.ServerVersion, true
}

// HasServerVersion returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerVersion() bool {
	if o != nil && !IsNil(o.ServerVersion) {
		return true
	}

	return false
}

// SetServerVersion gets a reference to the given string and assigns it to the ServerVersion field.
func (o *DataInnerDhcpServerData) SetServerVersion(v string) {
	o.ServerVersion = &v
}

// GetServerHostaddr returns the ServerHostaddr field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerHostaddr() string {
	if o == nil || IsNil(o.ServerHostaddr) {
		var ret string
		return ret
	}
	return *o.ServerHostaddr
}

// GetServerHostaddrOk returns a tuple with the ServerHostaddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerHostaddrOk() (*string, bool) {
	if o == nil || IsNil(o.ServerHostaddr) {
		return nil, false
	}
	return o.ServerHostaddr, true
}

// HasServerHostaddr returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerHostaddr() bool {
	if o != nil && !IsNil(o.ServerHostaddr) {
		return true
	}

	return false
}

// SetServerHostaddr gets a reference to the given string and assigns it to the ServerHostaddr field.
func (o *DataInnerDhcpServerData) SetServerHostaddr(v string) {
	o.ServerHostaddr = &v
}

// GetServerAddr6 returns the ServerAddr6 field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerAddr6() string {
	if o == nil || IsNil(o.ServerAddr6) {
		var ret string
		return ret
	}
	return *o.ServerAddr6
}

// GetServerAddr6Ok returns a tuple with the ServerAddr6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerAddr6Ok() (*string, bool) {
	if o == nil || IsNil(o.ServerAddr6) {
		return nil, false
	}
	return o.ServerAddr6, true
}

// HasServerAddr6 returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerAddr6() bool {
	if o != nil && !IsNil(o.ServerAddr6) {
		return true
	}

	return false
}

// SetServerAddr6 gets a reference to the given string and assigns it to the ServerAddr6 field.
func (o *DataInnerDhcpServerData) SetServerAddr6(v string) {
	o.ServerAddr6 = &v
}

// GetServerAddr returns the ServerAddr field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerAddr() string {
	if o == nil || IsNil(o.ServerAddr) {
		var ret string
		return ret
	}
	return *o.ServerAddr
}

// GetServerAddrOk returns a tuple with the ServerAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerAddrOk() (*string, bool) {
	if o == nil || IsNil(o.ServerAddr) {
		return nil, false
	}
	return o.ServerAddr, true
}

// HasServerAddr returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerAddr() bool {
	if o != nil && !IsNil(o.ServerAddr) {
		return true
	}

	return false
}

// SetServerAddr gets a reference to the given string and assigns it to the ServerAddr field.
func (o *DataInnerDhcpServerData) SetServerAddr(v string) {
	o.ServerAddr = &v
}

// GetServerHttpsLogin returns the ServerHttpsLogin field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerHttpsLogin() string {
	if o == nil || IsNil(o.ServerHttpsLogin) {
		var ret string
		return ret
	}
	return *o.ServerHttpsLogin
}

// GetServerHttpsLoginOk returns a tuple with the ServerHttpsLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerHttpsLoginOk() (*string, bool) {
	if o == nil || IsNil(o.ServerHttpsLogin) {
		return nil, false
	}
	return o.ServerHttpsLogin, true
}

// HasServerHttpsLogin returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerHttpsLogin() bool {
	if o != nil && !IsNil(o.ServerHttpsLogin) {
		return true
	}

	return false
}

// SetServerHttpsLogin gets a reference to the given string and assigns it to the ServerHttpsLogin field.
func (o *DataInnerDhcpServerData) SetServerHttpsLogin(v string) {
	o.ServerHttpsLogin = &v
}

// GetServerIsPackage returns the ServerIsPackage field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerIsPackage() string {
	if o == nil || IsNil(o.ServerIsPackage) {
		var ret string
		return ret
	}
	return *o.ServerIsPackage
}

// GetServerIsPackageOk returns a tuple with the ServerIsPackage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerIsPackageOk() (*string, bool) {
	if o == nil || IsNil(o.ServerIsPackage) {
		return nil, false
	}
	return o.ServerIsPackage, true
}

// HasServerIsPackage returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerIsPackage() bool {
	if o != nil && !IsNil(o.ServerIsPackage) {
		return true
	}

	return false
}

// SetServerIsPackage gets a reference to the given string and assigns it to the ServerIsPackage field.
func (o *DataInnerDhcpServerData) SetServerIsPackage(v string) {
	o.ServerIsPackage = &v
}

// GetServerIpmdhcpProtocol returns the ServerIpmdhcpProtocol field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerIpmdhcpProtocol() string {
	if o == nil || IsNil(o.ServerIpmdhcpProtocol) {
		var ret string
		return ret
	}
	return *o.ServerIpmdhcpProtocol
}

// GetServerIpmdhcpProtocolOk returns a tuple with the ServerIpmdhcpProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerIpmdhcpProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.ServerIpmdhcpProtocol) {
		return nil, false
	}
	return o.ServerIpmdhcpProtocol, true
}

// HasServerIpmdhcpProtocol returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerIpmdhcpProtocol() bool {
	if o != nil && !IsNil(o.ServerIpmdhcpProtocol) {
		return true
	}

	return false
}

// SetServerIpmdhcpProtocol gets a reference to the given string and assigns it to the ServerIpmdhcpProtocol field.
func (o *DataInnerDhcpServerData) SetServerIpmdhcpProtocol(v string) {
	o.ServerIpmdhcpProtocol = &v
}

// GetServerIsolated returns the ServerIsolated field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerIsolated() string {
	if o == nil || IsNil(o.ServerIsolated) {
		var ret string
		return ret
	}
	return *o.ServerIsolated
}

// GetServerIsolatedOk returns a tuple with the ServerIsolated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerIsolatedOk() (*string, bool) {
	if o == nil || IsNil(o.ServerIsolated) {
		return nil, false
	}
	return o.ServerIsolated, true
}

// HasServerIsolated returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerIsolated() bool {
	if o != nil && !IsNil(o.ServerIsolated) {
		return true
	}

	return false
}

// SetServerIsolated gets a reference to the given string and assigns it to the ServerIsolated field.
func (o *DataInnerDhcpServerData) SetServerIsolated(v string) {
	o.ServerIsolated = &v
}

// GetServerMsUseSsl returns the ServerMsUseSsl field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerMsUseSsl() string {
	if o == nil || IsNil(o.ServerMsUseSsl) {
		var ret string
		return ret
	}
	return *o.ServerMsUseSsl
}

// GetServerMsUseSslOk returns a tuple with the ServerMsUseSsl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerMsUseSslOk() (*string, bool) {
	if o == nil || IsNil(o.ServerMsUseSsl) {
		return nil, false
	}
	return o.ServerMsUseSsl, true
}

// HasServerMsUseSsl returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerMsUseSsl() bool {
	if o != nil && !IsNil(o.ServerMsUseSsl) {
		return true
	}

	return false
}

// SetServerMsUseSsl gets a reference to the given string and assigns it to the ServerMsUseSsl field.
func (o *DataInnerDhcpServerData) SetServerMsUseSsl(v string) {
	o.ServerMsUseSsl = &v
}

// GetServerMsrpcDomain returns the ServerMsrpcDomain field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerMsrpcDomain() string {
	if o == nil || IsNil(o.ServerMsrpcDomain) {
		var ret string
		return ret
	}
	return *o.ServerMsrpcDomain
}

// GetServerMsrpcDomainOk returns a tuple with the ServerMsrpcDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerMsrpcDomainOk() (*string, bool) {
	if o == nil || IsNil(o.ServerMsrpcDomain) {
		return nil, false
	}
	return o.ServerMsrpcDomain, true
}

// HasServerMsrpcDomain returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerMsrpcDomain() bool {
	if o != nil && !IsNil(o.ServerMsrpcDomain) {
		return true
	}

	return false
}

// SetServerMsrpcDomain gets a reference to the given string and assigns it to the ServerMsrpcDomain field.
func (o *DataInnerDhcpServerData) SetServerMsrpcDomain(v string) {
	o.ServerMsrpcDomain = &v
}

// GetServerMsrpcLogin returns the ServerMsrpcLogin field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerMsrpcLogin() string {
	if o == nil || IsNil(o.ServerMsrpcLogin) {
		var ret string
		return ret
	}
	return *o.ServerMsrpcLogin
}

// GetServerMsrpcLoginOk returns a tuple with the ServerMsrpcLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerMsrpcLoginOk() (*string, bool) {
	if o == nil || IsNil(o.ServerMsrpcLogin) {
		return nil, false
	}
	return o.ServerMsrpcLogin, true
}

// HasServerMsrpcLogin returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerMsrpcLogin() bool {
	if o != nil && !IsNil(o.ServerMsrpcLogin) {
		return true
	}

	return false
}

// SetServerMsrpcLogin gets a reference to the given string and assigns it to the ServerMsrpcLogin field.
func (o *DataInnerDhcpServerData) SetServerMsrpcLogin(v string) {
	o.ServerMsrpcLogin = &v
}

// GetServerMultistatus returns the ServerMultistatus field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerMultistatus() string {
	if o == nil || IsNil(o.ServerMultistatus) {
		var ret string
		return ret
	}
	return *o.ServerMultistatus
}

// GetServerMultistatusOk returns a tuple with the ServerMultistatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerMultistatusOk() (*string, bool) {
	if o == nil || IsNil(o.ServerMultistatus) {
		return nil, false
	}
	return o.ServerMultistatus, true
}

// HasServerMultistatus returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerMultistatus() bool {
	if o != nil && !IsNil(o.ServerMultistatus) {
		return true
	}

	return false
}

// SetServerMultistatus gets a reference to the given string and assigns it to the ServerMultistatus field.
func (o *DataInnerDhcpServerData) SetServerMultistatus(v string) {
	o.ServerMultistatus = &v
}

// GetRef1ServerName returns the Ref1ServerName field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetRef1ServerName() string {
	if o == nil || IsNil(o.Ref1ServerName) {
		var ret string
		return ret
	}
	return *o.Ref1ServerName
}

// GetRef1ServerNameOk returns a tuple with the Ref1ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetRef1ServerNameOk() (*string, bool) {
	if o == nil || IsNil(o.Ref1ServerName) {
		return nil, false
	}
	return o.Ref1ServerName, true
}

// HasRef1ServerName returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasRef1ServerName() bool {
	if o != nil && !IsNil(o.Ref1ServerName) {
		return true
	}

	return false
}

// SetRef1ServerName gets a reference to the given string and assigns it to the Ref1ServerName field.
func (o *DataInnerDhcpServerData) SetRef1ServerName(v string) {
	o.Ref1ServerName = &v
}

// GetRef2ServerName returns the Ref2ServerName field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetRef2ServerName() string {
	if o == nil || IsNil(o.Ref2ServerName) {
		var ret string
		return ret
	}
	return *o.Ref2ServerName
}

// GetRef2ServerNameOk returns a tuple with the Ref2ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetRef2ServerNameOk() (*string, bool) {
	if o == nil || IsNil(o.Ref2ServerName) {
		return nil, false
	}
	return o.Ref2ServerName, true
}

// HasRef2ServerName returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasRef2ServerName() bool {
	if o != nil && !IsNil(o.Ref2ServerName) {
		return true
	}

	return false
}

// SetRef2ServerName gets a reference to the given string and assigns it to the Ref2ServerName field.
func (o *DataInnerDhcpServerData) SetRef2ServerName(v string) {
	o.Ref2ServerName = &v
}

// GetReverseProxyConf returns the ReverseProxyConf field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetReverseProxyConf() string {
	if o == nil || IsNil(o.ReverseProxyConf) {
		var ret string
		return ret
	}
	return *o.ReverseProxyConf
}

// GetReverseProxyConfOk returns a tuple with the ReverseProxyConf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetReverseProxyConfOk() (*string, bool) {
	if o == nil || IsNil(o.ReverseProxyConf) {
		return nil, false
	}
	return o.ReverseProxyConf, true
}

// HasReverseProxyConf returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasReverseProxyConf() bool {
	if o != nil && !IsNil(o.ReverseProxyConf) {
		return true
	}

	return false
}

// SetReverseProxyConf gets a reference to the given string and assigns it to the ReverseProxyConf field.
func (o *DataInnerDhcpServerData) SetReverseProxyConf(v string) {
	o.ReverseProxyConf = &v
}

// GetServiceAddressAddr returns the ServiceAddressAddr field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServiceAddressAddr() string {
	if o == nil || IsNil(o.ServiceAddressAddr) {
		var ret string
		return ret
	}
	return *o.ServiceAddressAddr
}

// GetServiceAddressAddrOk returns a tuple with the ServiceAddressAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServiceAddressAddrOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceAddressAddr) {
		return nil, false
	}
	return o.ServiceAddressAddr, true
}

// HasServiceAddressAddr returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServiceAddressAddr() bool {
	if o != nil && !IsNil(o.ServiceAddressAddr) {
		return true
	}

	return false
}

// SetServiceAddressAddr gets a reference to the given string and assigns it to the ServiceAddressAddr field.
func (o *DataInnerDhcpServerData) SetServiceAddressAddr(v string) {
	o.ServiceAddressAddr = &v
}

// GetServerSnmpId returns the ServerSnmpId field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerSnmpId() string {
	if o == nil || IsNil(o.ServerSnmpId) {
		var ret string
		return ret
	}
	return *o.ServerSnmpId
}

// GetServerSnmpIdOk returns a tuple with the ServerSnmpId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerSnmpIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServerSnmpId) {
		return nil, false
	}
	return o.ServerSnmpId, true
}

// HasServerSnmpId returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerSnmpId() bool {
	if o != nil && !IsNil(o.ServerSnmpId) {
		return true
	}

	return false
}

// SetServerSnmpId gets a reference to the given string and assigns it to the ServerSnmpId field.
func (o *DataInnerDhcpServerData) SetServerSnmpId(v string) {
	o.ServerSnmpId = &v
}

// GetServerSnmpPort returns the ServerSnmpPort field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerSnmpPort() string {
	if o == nil || IsNil(o.ServerSnmpPort) {
		var ret string
		return ret
	}
	return *o.ServerSnmpPort
}

// GetServerSnmpPortOk returns a tuple with the ServerSnmpPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerSnmpPortOk() (*string, bool) {
	if o == nil || IsNil(o.ServerSnmpPort) {
		return nil, false
	}
	return o.ServerSnmpPort, true
}

// HasServerSnmpPort returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerSnmpPort() bool {
	if o != nil && !IsNil(o.ServerSnmpPort) {
		return true
	}

	return false
}

// SetServerSnmpPort gets a reference to the given string and assigns it to the ServerSnmpPort field.
func (o *DataInnerDhcpServerData) SetServerSnmpPort(v string) {
	o.ServerSnmpPort = &v
}

// GetServerSnmpProfileId returns the ServerSnmpProfileId field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerSnmpProfileId() string {
	if o == nil || IsNil(o.ServerSnmpProfileId) {
		var ret string
		return ret
	}
	return *o.ServerSnmpProfileId
}

// GetServerSnmpProfileIdOk returns a tuple with the ServerSnmpProfileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerSnmpProfileIdOk() (*string, bool) {
	if o == nil || IsNil(o.ServerSnmpProfileId) {
		return nil, false
	}
	return o.ServerSnmpProfileId, true
}

// HasServerSnmpProfileId returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerSnmpProfileId() bool {
	if o != nil && !IsNil(o.ServerSnmpProfileId) {
		return true
	}

	return false
}

// SetServerSnmpProfileId gets a reference to the given string and assigns it to the ServerSnmpProfileId field.
func (o *DataInnerDhcpServerData) SetServerSnmpProfileId(v string) {
	o.ServerSnmpProfileId = &v
}

// GetServerSnmpRetry returns the ServerSnmpRetry field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerSnmpRetry() string {
	if o == nil || IsNil(o.ServerSnmpRetry) {
		var ret string
		return ret
	}
	return *o.ServerSnmpRetry
}

// GetServerSnmpRetryOk returns a tuple with the ServerSnmpRetry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerSnmpRetryOk() (*string, bool) {
	if o == nil || IsNil(o.ServerSnmpRetry) {
		return nil, false
	}
	return o.ServerSnmpRetry, true
}

// HasServerSnmpRetry returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerSnmpRetry() bool {
	if o != nil && !IsNil(o.ServerSnmpRetry) {
		return true
	}

	return false
}

// SetServerSnmpRetry gets a reference to the given string and assigns it to the ServerSnmpRetry field.
func (o *DataInnerDhcpServerData) SetServerSnmpRetry(v string) {
	o.ServerSnmpRetry = &v
}

// GetServerSnmpTimeout returns the ServerSnmpTimeout field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerSnmpTimeout() string {
	if o == nil || IsNil(o.ServerSnmpTimeout) {
		var ret string
		return ret
	}
	return *o.ServerSnmpTimeout
}

// GetServerSnmpTimeoutOk returns a tuple with the ServerSnmpTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerSnmpTimeoutOk() (*string, bool) {
	if o == nil || IsNil(o.ServerSnmpTimeout) {
		return nil, false
	}
	return o.ServerSnmpTimeout, true
}

// HasServerSnmpTimeout returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerSnmpTimeout() bool {
	if o != nil && !IsNil(o.ServerSnmpTimeout) {
		return true
	}

	return false
}

// SetServerSnmpTimeout gets a reference to the given string and assigns it to the ServerSnmpTimeout field.
func (o *DataInnerDhcpServerData) SetServerSnmpTimeout(v string) {
	o.ServerSnmpTimeout = &v
}

// GetServerSnmpUseTcp returns the ServerSnmpUseTcp field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerSnmpUseTcp() string {
	if o == nil || IsNil(o.ServerSnmpUseTcp) {
		var ret string
		return ret
	}
	return *o.ServerSnmpUseTcp
}

// GetServerSnmpUseTcpOk returns a tuple with the ServerSnmpUseTcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerSnmpUseTcpOk() (*string, bool) {
	if o == nil || IsNil(o.ServerSnmpUseTcp) {
		return nil, false
	}
	return o.ServerSnmpUseTcp, true
}

// HasServerSnmpUseTcp returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerSnmpUseTcp() bool {
	if o != nil && !IsNil(o.ServerSnmpUseTcp) {
		return true
	}

	return false
}

// SetServerSnmpUseTcp gets a reference to the given string and assigns it to the ServerSnmpUseTcp field.
func (o *DataInnerDhcpServerData) SetServerSnmpUseTcp(v string) {
	o.ServerSnmpUseTcp = &v
}

// GetServerStatEnabled returns the ServerStatEnabled field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerStatEnabled() string {
	if o == nil || IsNil(o.ServerStatEnabled) {
		var ret string
		return ret
	}
	return *o.ServerStatEnabled
}

// GetServerStatEnabledOk returns a tuple with the ServerStatEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerStatEnabledOk() (*string, bool) {
	if o == nil || IsNil(o.ServerStatEnabled) {
		return nil, false
	}
	return o.ServerStatEnabled, true
}

// HasServerStatEnabled returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerStatEnabled() bool {
	if o != nil && !IsNil(o.ServerStatEnabled) {
		return true
	}

	return false
}

// SetServerStatEnabled gets a reference to the given string and assigns it to the ServerStatEnabled field.
func (o *DataInnerDhcpServerData) SetServerStatEnabled(v string) {
	o.ServerStatEnabled = &v
}

// GetServerStatNiceness returns the ServerStatNiceness field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerStatNiceness() string {
	if o == nil || IsNil(o.ServerStatNiceness) {
		var ret string
		return ret
	}
	return *o.ServerStatNiceness
}

// GetServerStatNicenessOk returns a tuple with the ServerStatNiceness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerStatNicenessOk() (*string, bool) {
	if o == nil || IsNil(o.ServerStatNiceness) {
		return nil, false
	}
	return o.ServerStatNiceness, true
}

// HasServerStatNiceness returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerStatNiceness() bool {
	if o != nil && !IsNil(o.ServerStatNiceness) {
		return true
	}

	return false
}

// SetServerStatNiceness gets a reference to the given string and assigns it to the ServerStatNiceness field.
func (o *DataInnerDhcpServerData) SetServerStatNiceness(v string) {
	o.ServerStatNiceness = &v
}

// GetServerStatPeriod returns the ServerStatPeriod field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerStatPeriod() string {
	if o == nil || IsNil(o.ServerStatPeriod) {
		var ret string
		return ret
	}
	return *o.ServerStatPeriod
}

// GetServerStatPeriodOk returns a tuple with the ServerStatPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerStatPeriodOk() (*string, bool) {
	if o == nil || IsNil(o.ServerStatPeriod) {
		return nil, false
	}
	return o.ServerStatPeriod, true
}

// HasServerStatPeriod returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerStatPeriod() bool {
	if o != nil && !IsNil(o.ServerStatPeriod) {
		return true
	}

	return false
}

// SetServerStatPeriod gets a reference to the given string and assigns it to the ServerStatPeriod field.
func (o *DataInnerDhcpServerData) SetServerStatPeriod(v string) {
	o.ServerStatPeriod = &v
}

// GetServerStatTime returns the ServerStatTime field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerStatTime() string {
	if o == nil || IsNil(o.ServerStatTime) {
		var ret string
		return ret
	}
	return *o.ServerStatTime
}

// GetServerStatTimeOk returns a tuple with the ServerStatTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerStatTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ServerStatTime) {
		return nil, false
	}
	return o.ServerStatTime, true
}

// HasServerStatTime returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerStatTime() bool {
	if o != nil && !IsNil(o.ServerStatTime) {
		return true
	}

	return false
}

// SetServerStatTime gets a reference to the given string and assigns it to the ServerStatTime field.
func (o *DataInnerDhcpServerData) SetServerStatTime(v string) {
	o.ServerStatTime = &v
}

// GetServerTcpPort returns the ServerTcpPort field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerTcpPort() string {
	if o == nil || IsNil(o.ServerTcpPort) {
		var ret string
		return ret
	}
	return *o.ServerTcpPort
}

// GetServerTcpPortOk returns a tuple with the ServerTcpPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerTcpPortOk() (*string, bool) {
	if o == nil || IsNil(o.ServerTcpPort) {
		return nil, false
	}
	return o.ServerTcpPort, true
}

// HasServerTcpPort returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerTcpPort() bool {
	if o != nil && !IsNil(o.ServerTcpPort) {
		return true
	}

	return false
}

// SetServerTcpPort gets a reference to the given string and assigns it to the ServerTcpPort field.
func (o *DataInnerDhcpServerData) SetServerTcpPort(v string) {
	o.ServerTcpPort = &v
}

// GetTotalSmartMembers returns the TotalSmartMembers field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetTotalSmartMembers() string {
	if o == nil || IsNil(o.TotalSmartMembers) {
		var ret string
		return ret
	}
	return *o.TotalSmartMembers
}

// GetTotalSmartMembersOk returns a tuple with the TotalSmartMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetTotalSmartMembersOk() (*string, bool) {
	if o == nil || IsNil(o.TotalSmartMembers) {
		return nil, false
	}
	return o.TotalSmartMembers, true
}

// HasTotalSmartMembers returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasTotalSmartMembers() bool {
	if o != nil && !IsNil(o.TotalSmartMembers) {
		return true
	}

	return false
}

// SetTotalSmartMembers gets a reference to the given string and assigns it to the TotalSmartMembers field.
func (o *DataInnerDhcpServerData) SetTotalSmartMembers(v string) {
	o.TotalSmartMembers = &v
}

// GetSmartArch returns the SmartArch field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetSmartArch() string {
	if o == nil || IsNil(o.SmartArch) {
		var ret string
		return ret
	}
	return *o.SmartArch
}

// GetSmartArchOk returns a tuple with the SmartArch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetSmartArchOk() (*string, bool) {
	if o == nil || IsNil(o.SmartArch) {
		return nil, false
	}
	return o.SmartArch, true
}

// HasSmartArch returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasSmartArch() bool {
	if o != nil && !IsNil(o.SmartArch) {
		return true
	}

	return false
}

// SetSmartArch gets a reference to the given string and assigns it to the SmartArch field.
func (o *DataInnerDhcpServerData) SetSmartArch(v string) {
	o.SmartArch = &v
}

// GetSmartMembersName returns the SmartMembersName field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetSmartMembersName() string {
	if o == nil || IsNil(o.SmartMembersName) {
		var ret string
		return ret
	}
	return *o.SmartMembersName
}

// GetSmartMembersNameOk returns a tuple with the SmartMembersName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetSmartMembersNameOk() (*string, bool) {
	if o == nil || IsNil(o.SmartMembersName) {
		return nil, false
	}
	return o.SmartMembersName, true
}

// HasSmartMembersName returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasSmartMembersName() bool {
	if o != nil && !IsNil(o.SmartMembersName) {
		return true
	}

	return false
}

// SetSmartMembersName gets a reference to the given string and assigns it to the SmartMembersName field.
func (o *DataInnerDhcpServerData) SetSmartMembersName(v string) {
	o.SmartMembersName = &v
}

// GetSmartParam1 returns the SmartParam1 field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetSmartParam1() string {
	if o == nil || IsNil(o.SmartParam1) {
		var ret string
		return ret
	}
	return *o.SmartParam1
}

// GetSmartParam1Ok returns a tuple with the SmartParam1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetSmartParam1Ok() (*string, bool) {
	if o == nil || IsNil(o.SmartParam1) {
		return nil, false
	}
	return o.SmartParam1, true
}

// HasSmartParam1 returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasSmartParam1() bool {
	if o != nil && !IsNil(o.SmartParam1) {
		return true
	}

	return false
}

// SetSmartParam1 gets a reference to the given string and assigns it to the SmartParam1 field.
func (o *DataInnerDhcpServerData) SetSmartParam1(v string) {
	o.SmartParam1 = &v
}

// GetSmartParentArch returns the SmartParentArch field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetSmartParentArch() string {
	if o == nil || IsNil(o.SmartParentArch) {
		var ret string
		return ret
	}
	return *o.SmartParentArch
}

// GetSmartParentArchOk returns a tuple with the SmartParentArch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetSmartParentArchOk() (*string, bool) {
	if o == nil || IsNil(o.SmartParentArch) {
		return nil, false
	}
	return o.SmartParentArch, true
}

// HasSmartParentArch returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasSmartParentArch() bool {
	if o != nil && !IsNil(o.SmartParentArch) {
		return true
	}

	return false
}

// SetSmartParentArch gets a reference to the given string and assigns it to the SmartParentArch field.
func (o *DataInnerDhcpServerData) SetSmartParentArch(v string) {
	o.SmartParentArch = &v
}

// GetSmartParentId returns the SmartParentId field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetSmartParentId() string {
	if o == nil || IsNil(o.SmartParentId) {
		var ret string
		return ret
	}
	return *o.SmartParentId
}

// GetSmartParentIdOk returns a tuple with the SmartParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetSmartParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.SmartParentId) {
		return nil, false
	}
	return o.SmartParentId, true
}

// HasSmartParentId returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasSmartParentId() bool {
	if o != nil && !IsNil(o.SmartParentId) {
		return true
	}

	return false
}

// SetSmartParentId gets a reference to the given string and assigns it to the SmartParentId field.
func (o *DataInnerDhcpServerData) SetSmartParentId(v string) {
	o.SmartParentId = &v
}

// GetSmartParentName returns the SmartParentName field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetSmartParentName() string {
	if o == nil || IsNil(o.SmartParentName) {
		var ret string
		return ret
	}
	return *o.SmartParentName
}

// GetSmartParentNameOk returns a tuple with the SmartParentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetSmartParentNameOk() (*string, bool) {
	if o == nil || IsNil(o.SmartParentName) {
		return nil, false
	}
	return o.SmartParentName, true
}

// HasSmartParentName returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasSmartParentName() bool {
	if o != nil && !IsNil(o.SmartParentName) {
		return true
	}

	return false
}

// SetSmartParentName gets a reference to the given string and assigns it to the SmartParentName field.
func (o *DataInnerDhcpServerData) SetSmartParentName(v string) {
	o.SmartParentName = &v
}

// GetSmartRef1ServerId returns the SmartRef1ServerId field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetSmartRef1ServerId() string {
	if o == nil || IsNil(o.SmartRef1ServerId) {
		var ret string
		return ret
	}
	return *o.SmartRef1ServerId
}

// GetSmartRef1ServerIdOk returns a tuple with the SmartRef1ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetSmartRef1ServerIdOk() (*string, bool) {
	if o == nil || IsNil(o.SmartRef1ServerId) {
		return nil, false
	}
	return o.SmartRef1ServerId, true
}

// HasSmartRef1ServerId returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasSmartRef1ServerId() bool {
	if o != nil && !IsNil(o.SmartRef1ServerId) {
		return true
	}

	return false
}

// SetSmartRef1ServerId gets a reference to the given string and assigns it to the SmartRef1ServerId field.
func (o *DataInnerDhcpServerData) SetSmartRef1ServerId(v string) {
	o.SmartRef1ServerId = &v
}

// GetSmartRef1ServerName returns the SmartRef1ServerName field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetSmartRef1ServerName() string {
	if o == nil || IsNil(o.SmartRef1ServerName) {
		var ret string
		return ret
	}
	return *o.SmartRef1ServerName
}

// GetSmartRef1ServerNameOk returns a tuple with the SmartRef1ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetSmartRef1ServerNameOk() (*string, bool) {
	if o == nil || IsNil(o.SmartRef1ServerName) {
		return nil, false
	}
	return o.SmartRef1ServerName, true
}

// HasSmartRef1ServerName returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasSmartRef1ServerName() bool {
	if o != nil && !IsNil(o.SmartRef1ServerName) {
		return true
	}

	return false
}

// SetSmartRef1ServerName gets a reference to the given string and assigns it to the SmartRef1ServerName field.
func (o *DataInnerDhcpServerData) SetSmartRef1ServerName(v string) {
	o.SmartRef1ServerName = &v
}

// GetSmartRef2ServerId returns the SmartRef2ServerId field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetSmartRef2ServerId() string {
	if o == nil || IsNil(o.SmartRef2ServerId) {
		var ret string
		return ret
	}
	return *o.SmartRef2ServerId
}

// GetSmartRef2ServerIdOk returns a tuple with the SmartRef2ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetSmartRef2ServerIdOk() (*string, bool) {
	if o == nil || IsNil(o.SmartRef2ServerId) {
		return nil, false
	}
	return o.SmartRef2ServerId, true
}

// HasSmartRef2ServerId returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasSmartRef2ServerId() bool {
	if o != nil && !IsNil(o.SmartRef2ServerId) {
		return true
	}

	return false
}

// SetSmartRef2ServerId gets a reference to the given string and assigns it to the SmartRef2ServerId field.
func (o *DataInnerDhcpServerData) SetSmartRef2ServerId(v string) {
	o.SmartRef2ServerId = &v
}

// GetSmartRef2ServerName returns the SmartRef2ServerName field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetSmartRef2ServerName() string {
	if o == nil || IsNil(o.SmartRef2ServerName) {
		var ret string
		return ret
	}
	return *o.SmartRef2ServerName
}

// GetSmartRef2ServerNameOk returns a tuple with the SmartRef2ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetSmartRef2ServerNameOk() (*string, bool) {
	if o == nil || IsNil(o.SmartRef2ServerName) {
		return nil, false
	}
	return o.SmartRef2ServerName, true
}

// HasSmartRef2ServerName returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasSmartRef2ServerName() bool {
	if o != nil && !IsNil(o.SmartRef2ServerName) {
		return true
	}

	return false
}

// SetSmartRef2ServerName gets a reference to the given string and assigns it to the SmartRef2ServerName field.
func (o *DataInnerDhcpServerData) SetSmartRef2ServerName(v string) {
	o.SmartRef2ServerName = &v
}

// GetServerWindhcpProtocol returns the ServerWindhcpProtocol field value if set, zero value otherwise.
func (o *DataInnerDhcpServerData) GetServerWindhcpProtocol() string {
	if o == nil || IsNil(o.ServerWindhcpProtocol) {
		var ret string
		return ret
	}
	return *o.ServerWindhcpProtocol
}

// GetServerWindhcpProtocolOk returns a tuple with the ServerWindhcpProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDhcpServerData) GetServerWindhcpProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.ServerWindhcpProtocol) {
		return nil, false
	}
	return o.ServerWindhcpProtocol, true
}

// HasServerWindhcpProtocol returns a boolean if a field has been set.
func (o *DataInnerDhcpServerData) HasServerWindhcpProtocol() bool {
	if o != nil && !IsNil(o.ServerWindhcpProtocol) {
		return true
	}

	return false
}

// SetServerWindhcpProtocol gets a reference to the given string and assigns it to the ServerWindhcpProtocol field.
func (o *DataInnerDhcpServerData) SetServerWindhcpProtocol(v string) {
	o.ServerWindhcpProtocol = &v
}

func (o DataInnerDhcpServerData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataInnerDhcpServerData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ServerCiscoLogin) {
		toSerialize["server_cisco_login"] = o.ServerCiscoLogin
	}
	if !IsNil(o.ServerCiscoPassword) {
		toSerialize["server_cisco_password"] = o.ServerCiscoPassword
	}
	if !IsNil(o.ServerCiscoRootPassword) {
		toSerialize["server_cisco_root_password"] = o.ServerCiscoRootPassword
	}
	if !IsNil(o.ServerCiscoUseSsh) {
		toSerialize["server_cisco_use_ssh"] = o.ServerCiscoUseSsh
	}
	if !IsNil(o.ClusterHbHostaddr) {
		toSerialize["cluster_hb_hostaddr"] = o.ClusterHbHostaddr
	}
	if !IsNil(o.ClusterPeerServerId) {
		toSerialize["cluster_peer_server_id"] = o.ClusterPeerServerId
	}
	if !IsNil(o.ServerClusterRole) {
		toSerialize["server_cluster_role"] = o.ServerClusterRole
	}
	if !IsNil(o.ClusterSshKeyringId) {
		toSerialize["cluster_ssh_keyring_id"] = o.ClusterSshKeyringId
	}
	if !IsNil(o.ClusterVipPhysHostaddr) {
		toSerialize["cluster_vip_phys_hostaddr"] = o.ClusterVipPhysHostaddr
	}
	if !IsNil(o.ConnectionprofileName) {
		toSerialize["connectionprofile_name"] = o.ConnectionprofileName
	}
	if !IsNil(o.ServerClassName) {
		toSerialize["server_class_name"] = o.ServerClassName
	}
	if !IsNil(o.ServerClassParameters) {
		toSerialize["server_class_parameters"] = o.ServerClassParameters
	}
	if !IsNil(o.ServerComment) {
		toSerialize["server_comment"] = o.ServerComment
	}
	if !IsNil(o.ServerId) {
		toSerialize["server_id"] = o.ServerId
	}
	if !IsNil(o.ServerLocaltime) {
		toSerialize["server_localtime"] = o.ServerLocaltime
	}
	if !IsNil(o.ServerName) {
		toSerialize["server_name"] = o.ServerName
	}
	if !IsNil(o.ServerState) {
		toSerialize["server_state"] = o.ServerState
	}
	if !IsNil(o.ServerSynching) {
		toSerialize["server_synching"] = o.ServerSynching
	}
	if !IsNil(o.ServerType) {
		toSerialize["server_type"] = o.ServerType
	}
	if !IsNil(o.ServerUboottime) {
		toSerialize["server_uboottime"] = o.ServerUboottime
	}
	if !IsNil(o.ServerVersion) {
		toSerialize["server_version"] = o.ServerVersion
	}
	if !IsNil(o.ServerHostaddr) {
		toSerialize["server_hostaddr"] = o.ServerHostaddr
	}
	if !IsNil(o.ServerAddr6) {
		toSerialize["server_addr6"] = o.ServerAddr6
	}
	if !IsNil(o.ServerAddr) {
		toSerialize["server_addr"] = o.ServerAddr
	}
	if !IsNil(o.ServerHttpsLogin) {
		toSerialize["server_https_login"] = o.ServerHttpsLogin
	}
	if !IsNil(o.ServerIsPackage) {
		toSerialize["server_is_package"] = o.ServerIsPackage
	}
	if !IsNil(o.ServerIpmdhcpProtocol) {
		toSerialize["server_ipmdhcp_protocol"] = o.ServerIpmdhcpProtocol
	}
	if !IsNil(o.ServerIsolated) {
		toSerialize["server_isolated"] = o.ServerIsolated
	}
	if !IsNil(o.ServerMsUseSsl) {
		toSerialize["server_ms_use_ssl"] = o.ServerMsUseSsl
	}
	if !IsNil(o.ServerMsrpcDomain) {
		toSerialize["server_msrpc_domain"] = o.ServerMsrpcDomain
	}
	if !IsNil(o.ServerMsrpcLogin) {
		toSerialize["server_msrpc_login"] = o.ServerMsrpcLogin
	}
	if !IsNil(o.ServerMultistatus) {
		toSerialize["server_multistatus"] = o.ServerMultistatus
	}
	if !IsNil(o.Ref1ServerName) {
		toSerialize["ref1_server_name"] = o.Ref1ServerName
	}
	if !IsNil(o.Ref2ServerName) {
		toSerialize["ref2_server_name"] = o.Ref2ServerName
	}
	if !IsNil(o.ReverseProxyConf) {
		toSerialize["reverse_proxy_conf"] = o.ReverseProxyConf
	}
	if !IsNil(o.ServiceAddressAddr) {
		toSerialize["service_address_addr"] = o.ServiceAddressAddr
	}
	if !IsNil(o.ServerSnmpId) {
		toSerialize["server_snmp_id"] = o.ServerSnmpId
	}
	if !IsNil(o.ServerSnmpPort) {
		toSerialize["server_snmp_port"] = o.ServerSnmpPort
	}
	if !IsNil(o.ServerSnmpProfileId) {
		toSerialize["server_snmp_profile_id"] = o.ServerSnmpProfileId
	}
	if !IsNil(o.ServerSnmpRetry) {
		toSerialize["server_snmp_retry"] = o.ServerSnmpRetry
	}
	if !IsNil(o.ServerSnmpTimeout) {
		toSerialize["server_snmp_timeout"] = o.ServerSnmpTimeout
	}
	if !IsNil(o.ServerSnmpUseTcp) {
		toSerialize["server_snmp_use_tcp"] = o.ServerSnmpUseTcp
	}
	if !IsNil(o.ServerStatEnabled) {
		toSerialize["server_stat_enabled"] = o.ServerStatEnabled
	}
	if !IsNil(o.ServerStatNiceness) {
		toSerialize["server_stat_niceness"] = o.ServerStatNiceness
	}
	if !IsNil(o.ServerStatPeriod) {
		toSerialize["server_stat_period"] = o.ServerStatPeriod
	}
	if !IsNil(o.ServerStatTime) {
		toSerialize["server_stat_time"] = o.ServerStatTime
	}
	if !IsNil(o.ServerTcpPort) {
		toSerialize["server_tcp_port"] = o.ServerTcpPort
	}
	if !IsNil(o.TotalSmartMembers) {
		toSerialize["total_smart_members"] = o.TotalSmartMembers
	}
	if !IsNil(o.SmartArch) {
		toSerialize["smart_arch"] = o.SmartArch
	}
	if !IsNil(o.SmartMembersName) {
		toSerialize["smart_members_name"] = o.SmartMembersName
	}
	if !IsNil(o.SmartParam1) {
		toSerialize["smart_param1"] = o.SmartParam1
	}
	if !IsNil(o.SmartParentArch) {
		toSerialize["smart_parent_arch"] = o.SmartParentArch
	}
	if !IsNil(o.SmartParentId) {
		toSerialize["smart_parent_id"] = o.SmartParentId
	}
	if !IsNil(o.SmartParentName) {
		toSerialize["smart_parent_name"] = o.SmartParentName
	}
	if !IsNil(o.SmartRef1ServerId) {
		toSerialize["smart_ref1_server_id"] = o.SmartRef1ServerId
	}
	if !IsNil(o.SmartRef1ServerName) {
		toSerialize["smart_ref1_server_name"] = o.SmartRef1ServerName
	}
	if !IsNil(o.SmartRef2ServerId) {
		toSerialize["smart_ref2_server_id"] = o.SmartRef2ServerId
	}
	if !IsNil(o.SmartRef2ServerName) {
		toSerialize["smart_ref2_server_name"] = o.SmartRef2ServerName
	}
	if !IsNil(o.ServerWindhcpProtocol) {
		toSerialize["server_windhcp_protocol"] = o.ServerWindhcpProtocol
	}
	return toSerialize, nil
}

type NullableDataInnerDhcpServerData struct {
	value *DataInnerDhcpServerData
	isSet bool
}

func (v NullableDataInnerDhcpServerData) Get() *DataInnerDhcpServerData {
	return v.value
}

func (v *NullableDataInnerDhcpServerData) Set(val *DataInnerDhcpServerData) {
	v.value = val
	v.isSet = true
}

func (v NullableDataInnerDhcpServerData) IsSet() bool {
	return v.isSet
}

func (v *NullableDataInnerDhcpServerData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataInnerDhcpServerData(val *DataInnerDhcpServerData) *NullableDataInnerDhcpServerData {
	return &NullableDataInnerDhcpServerData{value: val, isSet: true}
}

func (v NullableDataInnerDhcpServerData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataInnerDhcpServerData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
