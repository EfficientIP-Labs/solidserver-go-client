/*
SOLIDserver API

OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2024 EfficientIP</p><p><em>All specifications and information regarding the products in this document are subject to change without notice and should not be construed as a commitment by EfficientIP. EfficientIP assumes no responsibility or liability for any mistakes or inaccuracies that may appear in this document. All statements and recommendations in this document are believed to be accurate but are presented without warranty. Users must take full responsibility for their application of any product.</em></p><p><em>This document aims at detailing EfficientIP proprietary solutions. As our solutions rely on several third-party products, created by other companies or organizations, it may redirect readers to third-party websites and documentation for further information. In such a case, EfficientIP cannot be liable or expected to provide said information on products they do maintain or created.</em></p><p>Generated (Friday 4th of October 2024 03:41:11 PM)</p>

API version: 2.0
Contact: support-api@efficientip.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// checks if the DataInnerDeviceLinkData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataInnerDeviceLinkData{}

// DataInnerDeviceLinkData struct for DataInnerDeviceLinkData
type DataInnerDeviceLinkData struct {
	// The time at which the Device Manager port or interface has been added, in decimal UNIX date format.
	LinkAddTime *string `json:"link_add_time,omitempty"`
	// A way to determine if the link between two Device Manager devices is set automatically (<b>1</b>) or manually (<b>0</b>).
	LinkAutoLink *string `json:"link_auto_link,omitempty"`
	// The database identifier (ID) of the Device Manager device the object belongs to.
	DeviceId *string `json:"device_id,omitempty"`
	// The name of the Device Manager device.
	DeviceName *string `json:"device_name,omitempty"`
	// The database identifier (ID) of the Device Manager port or interface.
	InterfaceId *string `json:"interface_id,omitempty"`
	// The MAC address associated with the Device Manager port or interface.
	InterfaceMac *string `json:"interface_mac,omitempty"`
	// The name of the Device Manager port or interface.
	InterfaceName *string `json:"interface_name,omitempty"`
	// A way to indicate if the object is either a <b>port</b> or an <b>interface</b>.
	InterfaceType *string `json:"interface_type,omitempty"`
	// The database identifier (ID) of the Device Manager port or interface link. Use the ID to specify the port or interface link of your choice.
	LinkId *string `json:"link_id,omitempty"`
}

// NewDataInnerDeviceLinkData instantiates a new DataInnerDeviceLinkData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataInnerDeviceLinkData() *DataInnerDeviceLinkData {
	this := DataInnerDeviceLinkData{}
	return &this
}

// NewDataInnerDeviceLinkDataWithDefaults instantiates a new DataInnerDeviceLinkData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataInnerDeviceLinkDataWithDefaults() *DataInnerDeviceLinkData {
	this := DataInnerDeviceLinkData{}
	return &this
}

// GetLinkAddTime returns the LinkAddTime field value if set, zero value otherwise.
func (o *DataInnerDeviceLinkData) GetLinkAddTime() string {
	if o == nil || IsNil(o.LinkAddTime) {
		var ret string
		return ret
	}
	return *o.LinkAddTime
}

// GetLinkAddTimeOk returns a tuple with the LinkAddTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDeviceLinkData) GetLinkAddTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LinkAddTime) {
		return nil, false
	}
	return o.LinkAddTime, true
}

// HasLinkAddTime returns a boolean if a field has been set.
func (o *DataInnerDeviceLinkData) HasLinkAddTime() bool {
	if o != nil && !IsNil(o.LinkAddTime) {
		return true
	}

	return false
}

// SetLinkAddTime gets a reference to the given string and assigns it to the LinkAddTime field.
func (o *DataInnerDeviceLinkData) SetLinkAddTime(v string) {
	o.LinkAddTime = &v
}

// GetLinkAutoLink returns the LinkAutoLink field value if set, zero value otherwise.
func (o *DataInnerDeviceLinkData) GetLinkAutoLink() string {
	if o == nil || IsNil(o.LinkAutoLink) {
		var ret string
		return ret
	}
	return *o.LinkAutoLink
}

// GetLinkAutoLinkOk returns a tuple with the LinkAutoLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDeviceLinkData) GetLinkAutoLinkOk() (*string, bool) {
	if o == nil || IsNil(o.LinkAutoLink) {
		return nil, false
	}
	return o.LinkAutoLink, true
}

// HasLinkAutoLink returns a boolean if a field has been set.
func (o *DataInnerDeviceLinkData) HasLinkAutoLink() bool {
	if o != nil && !IsNil(o.LinkAutoLink) {
		return true
	}

	return false
}

// SetLinkAutoLink gets a reference to the given string and assigns it to the LinkAutoLink field.
func (o *DataInnerDeviceLinkData) SetLinkAutoLink(v string) {
	o.LinkAutoLink = &v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *DataInnerDeviceLinkData) GetDeviceId() string {
	if o == nil || IsNil(o.DeviceId) {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDeviceLinkData) GetDeviceIdOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceId) {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *DataInnerDeviceLinkData) HasDeviceId() bool {
	if o != nil && !IsNil(o.DeviceId) {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *DataInnerDeviceLinkData) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetDeviceName returns the DeviceName field value if set, zero value otherwise.
func (o *DataInnerDeviceLinkData) GetDeviceName() string {
	if o == nil || IsNil(o.DeviceName) {
		var ret string
		return ret
	}
	return *o.DeviceName
}

// GetDeviceNameOk returns a tuple with the DeviceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDeviceLinkData) GetDeviceNameOk() (*string, bool) {
	if o == nil || IsNil(o.DeviceName) {
		return nil, false
	}
	return o.DeviceName, true
}

// HasDeviceName returns a boolean if a field has been set.
func (o *DataInnerDeviceLinkData) HasDeviceName() bool {
	if o != nil && !IsNil(o.DeviceName) {
		return true
	}

	return false
}

// SetDeviceName gets a reference to the given string and assigns it to the DeviceName field.
func (o *DataInnerDeviceLinkData) SetDeviceName(v string) {
	o.DeviceName = &v
}

// GetInterfaceId returns the InterfaceId field value if set, zero value otherwise.
func (o *DataInnerDeviceLinkData) GetInterfaceId() string {
	if o == nil || IsNil(o.InterfaceId) {
		var ret string
		return ret
	}
	return *o.InterfaceId
}

// GetInterfaceIdOk returns a tuple with the InterfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDeviceLinkData) GetInterfaceIdOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceId) {
		return nil, false
	}
	return o.InterfaceId, true
}

// HasInterfaceId returns a boolean if a field has been set.
func (o *DataInnerDeviceLinkData) HasInterfaceId() bool {
	if o != nil && !IsNil(o.InterfaceId) {
		return true
	}

	return false
}

// SetInterfaceId gets a reference to the given string and assigns it to the InterfaceId field.
func (o *DataInnerDeviceLinkData) SetInterfaceId(v string) {
	o.InterfaceId = &v
}

// GetInterfaceMac returns the InterfaceMac field value if set, zero value otherwise.
func (o *DataInnerDeviceLinkData) GetInterfaceMac() string {
	if o == nil || IsNil(o.InterfaceMac) {
		var ret string
		return ret
	}
	return *o.InterfaceMac
}

// GetInterfaceMacOk returns a tuple with the InterfaceMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDeviceLinkData) GetInterfaceMacOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceMac) {
		return nil, false
	}
	return o.InterfaceMac, true
}

// HasInterfaceMac returns a boolean if a field has been set.
func (o *DataInnerDeviceLinkData) HasInterfaceMac() bool {
	if o != nil && !IsNil(o.InterfaceMac) {
		return true
	}

	return false
}

// SetInterfaceMac gets a reference to the given string and assigns it to the InterfaceMac field.
func (o *DataInnerDeviceLinkData) SetInterfaceMac(v string) {
	o.InterfaceMac = &v
}

// GetInterfaceName returns the InterfaceName field value if set, zero value otherwise.
func (o *DataInnerDeviceLinkData) GetInterfaceName() string {
	if o == nil || IsNil(o.InterfaceName) {
		var ret string
		return ret
	}
	return *o.InterfaceName
}

// GetInterfaceNameOk returns a tuple with the InterfaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDeviceLinkData) GetInterfaceNameOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceName) {
		return nil, false
	}
	return o.InterfaceName, true
}

// HasInterfaceName returns a boolean if a field has been set.
func (o *DataInnerDeviceLinkData) HasInterfaceName() bool {
	if o != nil && !IsNil(o.InterfaceName) {
		return true
	}

	return false
}

// SetInterfaceName gets a reference to the given string and assigns it to the InterfaceName field.
func (o *DataInnerDeviceLinkData) SetInterfaceName(v string) {
	o.InterfaceName = &v
}

// GetInterfaceType returns the InterfaceType field value if set, zero value otherwise.
func (o *DataInnerDeviceLinkData) GetInterfaceType() string {
	if o == nil || IsNil(o.InterfaceType) {
		var ret string
		return ret
	}
	return *o.InterfaceType
}

// GetInterfaceTypeOk returns a tuple with the InterfaceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDeviceLinkData) GetInterfaceTypeOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceType) {
		return nil, false
	}
	return o.InterfaceType, true
}

// HasInterfaceType returns a boolean if a field has been set.
func (o *DataInnerDeviceLinkData) HasInterfaceType() bool {
	if o != nil && !IsNil(o.InterfaceType) {
		return true
	}

	return false
}

// SetInterfaceType gets a reference to the given string and assigns it to the InterfaceType field.
func (o *DataInnerDeviceLinkData) SetInterfaceType(v string) {
	o.InterfaceType = &v
}

// GetLinkId returns the LinkId field value if set, zero value otherwise.
func (o *DataInnerDeviceLinkData) GetLinkId() string {
	if o == nil || IsNil(o.LinkId) {
		var ret string
		return ret
	}
	return *o.LinkId
}

// GetLinkIdOk returns a tuple with the LinkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataInnerDeviceLinkData) GetLinkIdOk() (*string, bool) {
	if o == nil || IsNil(o.LinkId) {
		return nil, false
	}
	return o.LinkId, true
}

// HasLinkId returns a boolean if a field has been set.
func (o *DataInnerDeviceLinkData) HasLinkId() bool {
	if o != nil && !IsNil(o.LinkId) {
		return true
	}

	return false
}

// SetLinkId gets a reference to the given string and assigns it to the LinkId field.
func (o *DataInnerDeviceLinkData) SetLinkId(v string) {
	o.LinkId = &v
}

func (o DataInnerDeviceLinkData) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataInnerDeviceLinkData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LinkAddTime) {
		toSerialize["link_add_time"] = o.LinkAddTime
	}
	if !IsNil(o.LinkAutoLink) {
		toSerialize["link_auto_link"] = o.LinkAutoLink
	}
	if !IsNil(o.DeviceId) {
		toSerialize["device_id"] = o.DeviceId
	}
	if !IsNil(o.DeviceName) {
		toSerialize["device_name"] = o.DeviceName
	}
	if !IsNil(o.InterfaceId) {
		toSerialize["interface_id"] = o.InterfaceId
	}
	if !IsNil(o.InterfaceMac) {
		toSerialize["interface_mac"] = o.InterfaceMac
	}
	if !IsNil(o.InterfaceName) {
		toSerialize["interface_name"] = o.InterfaceName
	}
	if !IsNil(o.InterfaceType) {
		toSerialize["interface_type"] = o.InterfaceType
	}
	if !IsNil(o.LinkId) {
		toSerialize["link_id"] = o.LinkId
	}
	return toSerialize, nil
}

type NullableDataInnerDeviceLinkData struct {
	value *DataInnerDeviceLinkData
	isSet bool
}

func (v NullableDataInnerDeviceLinkData) Get() *DataInnerDeviceLinkData {
	return v.value
}

func (v *NullableDataInnerDeviceLinkData) Set(val *DataInnerDeviceLinkData) {
	v.value = val
	v.isSet = true
}

func (v NullableDataInnerDeviceLinkData) IsSet() bool {
	return v.isSet
}

func (v *NullableDataInnerDeviceLinkData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataInnerDeviceLinkData(val *DataInnerDeviceLinkData) *NullableDataInnerDeviceLinkData {
	return &NullableDataInnerDeviceLinkData{value: val, isSet: true}
}

func (v NullableDataInnerDeviceLinkData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataInnerDeviceLinkData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
