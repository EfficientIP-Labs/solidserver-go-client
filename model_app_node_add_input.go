/*
 * SOLIDserver API
 *
 * OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2021 EfficientIP</p><p><em>All specifications and information regarding the products in  this document are subject to change without notice and should not be  construed as a commitment by EfficientIP. EfficientIP assumes no  responsibility or liability for any mistakes or inaccuracies that may appear  in this document. All statements and recommendations in this document are  believed to be accurate but are presented without warranty. Users must take  full responsibility for their application of any product.</em></p><p>Generated (Monday 14th of June 2021 12:30:34 PM)</p>
 *
 * API version: 2.0
 * Contact: support-api@efficientip.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// AppNodeAddInput struct for AppNodeAddInput
type AppNodeAddInput struct {
	// The Fully Qualified Domain Name (FQDN) of the application the object belongs to.
	ApplicationFqdn *string `json:"application_fqdn,omitempty"`
	// The database identifier (ID) of the application the object belongs to.
	ApplicationId *int32 `json:"application_id,omitempty"`
	// The name of the application the object belongs to.
	ApplicationName *string `json:"application_name,omitempty"`
	// The database identifier (ID) of the pool, a unique numeric key value automatically incremented when you add a pool. Use the ID to specify the pool of your choice.
	PoolId *int32 `json:"pool_id,omitempty"`
	// The name of the pool.
	PoolName *string `json:"pool_name,omitempty"`
	// The IPv4 or IPv6 address of the node.
	NodeHostaddr *string `json:"node_hostaddr,omitempty"`
	// The name of the node.
	NodeName *string `json:"node_name,omitempty"`
	// The administrative status of the node, managed (1) or unmanaged (0).
	AdminStatus *int32 `json:"admin_status,omitempty"`
	// The database identifier (ID) of the GSLB server associated with the application, a unique identifier automatically incremented when you add the server. Use it to identify the GSLB server of your choice.
	GslbserverId *int32 `json:"gslbserver_id,omitempty"`
	// The type of health check of the node.
	HealthcheckName *string `json:"healthcheck_name,omitempty"`
	// Internal use. Not documented.
	NodeStatus *string `json:"node_status,omitempty"`
	// The weight of the node, it sets which node is used first within the pool. It must be an integer between 0 and 255, where 0 sets a node as backup.
	NodeWeight *string `json:"node_weight,omitempty"`
	// A way to bypass <b>(accept) </b>any enabled rule that would return warning messages. If the service returns an error message, you cannot bypass the enabled rules.
	Warnings *string `json:"warnings,omitempty"`
}

// NewAppNodeAddInput instantiates a new AppNodeAddInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppNodeAddInput() *AppNodeAddInput {
	this := AppNodeAddInput{}
	return &this
}

// NewAppNodeAddInputWithDefaults instantiates a new AppNodeAddInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppNodeAddInputWithDefaults() *AppNodeAddInput {
	this := AppNodeAddInput{}
	return &this
}

// GetApplicationFqdn returns the ApplicationFqdn field value if set, zero value otherwise.
func (o *AppNodeAddInput) GetApplicationFqdn() string {
	if o == nil || o.ApplicationFqdn == nil {
		var ret string
		return ret
	}
	return *o.ApplicationFqdn
}

// GetApplicationFqdnOk returns a tuple with the ApplicationFqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppNodeAddInput) GetApplicationFqdnOk() (*string, bool) {
	if o == nil || o.ApplicationFqdn == nil {
		return nil, false
	}
	return o.ApplicationFqdn, true
}

// HasApplicationFqdn returns a boolean if a field has been set.
func (o *AppNodeAddInput) HasApplicationFqdn() bool {
	if o != nil && o.ApplicationFqdn != nil {
		return true
	}

	return false
}

// SetApplicationFqdn gets a reference to the given string and assigns it to the ApplicationFqdn field.
func (o *AppNodeAddInput) SetApplicationFqdn(v string) {
	o.ApplicationFqdn = &v
}

// GetApplicationId returns the ApplicationId field value if set, zero value otherwise.
func (o *AppNodeAddInput) GetApplicationId() int32 {
	if o == nil || o.ApplicationId == nil {
		var ret int32
		return ret
	}
	return *o.ApplicationId
}

// GetApplicationIdOk returns a tuple with the ApplicationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppNodeAddInput) GetApplicationIdOk() (*int32, bool) {
	if o == nil || o.ApplicationId == nil {
		return nil, false
	}
	return o.ApplicationId, true
}

// HasApplicationId returns a boolean if a field has been set.
func (o *AppNodeAddInput) HasApplicationId() bool {
	if o != nil && o.ApplicationId != nil {
		return true
	}

	return false
}

// SetApplicationId gets a reference to the given int32 and assigns it to the ApplicationId field.
func (o *AppNodeAddInput) SetApplicationId(v int32) {
	o.ApplicationId = &v
}

// GetApplicationName returns the ApplicationName field value if set, zero value otherwise.
func (o *AppNodeAddInput) GetApplicationName() string {
	if o == nil || o.ApplicationName == nil {
		var ret string
		return ret
	}
	return *o.ApplicationName
}

// GetApplicationNameOk returns a tuple with the ApplicationName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppNodeAddInput) GetApplicationNameOk() (*string, bool) {
	if o == nil || o.ApplicationName == nil {
		return nil, false
	}
	return o.ApplicationName, true
}

// HasApplicationName returns a boolean if a field has been set.
func (o *AppNodeAddInput) HasApplicationName() bool {
	if o != nil && o.ApplicationName != nil {
		return true
	}

	return false
}

// SetApplicationName gets a reference to the given string and assigns it to the ApplicationName field.
func (o *AppNodeAddInput) SetApplicationName(v string) {
	o.ApplicationName = &v
}

// GetPoolId returns the PoolId field value if set, zero value otherwise.
func (o *AppNodeAddInput) GetPoolId() int32 {
	if o == nil || o.PoolId == nil {
		var ret int32
		return ret
	}
	return *o.PoolId
}

// GetPoolIdOk returns a tuple with the PoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppNodeAddInput) GetPoolIdOk() (*int32, bool) {
	if o == nil || o.PoolId == nil {
		return nil, false
	}
	return o.PoolId, true
}

// HasPoolId returns a boolean if a field has been set.
func (o *AppNodeAddInput) HasPoolId() bool {
	if o != nil && o.PoolId != nil {
		return true
	}

	return false
}

// SetPoolId gets a reference to the given int32 and assigns it to the PoolId field.
func (o *AppNodeAddInput) SetPoolId(v int32) {
	o.PoolId = &v
}

// GetPoolName returns the PoolName field value if set, zero value otherwise.
func (o *AppNodeAddInput) GetPoolName() string {
	if o == nil || o.PoolName == nil {
		var ret string
		return ret
	}
	return *o.PoolName
}

// GetPoolNameOk returns a tuple with the PoolName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppNodeAddInput) GetPoolNameOk() (*string, bool) {
	if o == nil || o.PoolName == nil {
		return nil, false
	}
	return o.PoolName, true
}

// HasPoolName returns a boolean if a field has been set.
func (o *AppNodeAddInput) HasPoolName() bool {
	if o != nil && o.PoolName != nil {
		return true
	}

	return false
}

// SetPoolName gets a reference to the given string and assigns it to the PoolName field.
func (o *AppNodeAddInput) SetPoolName(v string) {
	o.PoolName = &v
}

// GetNodeHostaddr returns the NodeHostaddr field value if set, zero value otherwise.
func (o *AppNodeAddInput) GetNodeHostaddr() string {
	if o == nil || o.NodeHostaddr == nil {
		var ret string
		return ret
	}
	return *o.NodeHostaddr
}

// GetNodeHostaddrOk returns a tuple with the NodeHostaddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppNodeAddInput) GetNodeHostaddrOk() (*string, bool) {
	if o == nil || o.NodeHostaddr == nil {
		return nil, false
	}
	return o.NodeHostaddr, true
}

// HasNodeHostaddr returns a boolean if a field has been set.
func (o *AppNodeAddInput) HasNodeHostaddr() bool {
	if o != nil && o.NodeHostaddr != nil {
		return true
	}

	return false
}

// SetNodeHostaddr gets a reference to the given string and assigns it to the NodeHostaddr field.
func (o *AppNodeAddInput) SetNodeHostaddr(v string) {
	o.NodeHostaddr = &v
}

// GetNodeName returns the NodeName field value if set, zero value otherwise.
func (o *AppNodeAddInput) GetNodeName() string {
	if o == nil || o.NodeName == nil {
		var ret string
		return ret
	}
	return *o.NodeName
}

// GetNodeNameOk returns a tuple with the NodeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppNodeAddInput) GetNodeNameOk() (*string, bool) {
	if o == nil || o.NodeName == nil {
		return nil, false
	}
	return o.NodeName, true
}

// HasNodeName returns a boolean if a field has been set.
func (o *AppNodeAddInput) HasNodeName() bool {
	if o != nil && o.NodeName != nil {
		return true
	}

	return false
}

// SetNodeName gets a reference to the given string and assigns it to the NodeName field.
func (o *AppNodeAddInput) SetNodeName(v string) {
	o.NodeName = &v
}

// GetAdminStatus returns the AdminStatus field value if set, zero value otherwise.
func (o *AppNodeAddInput) GetAdminStatus() int32 {
	if o == nil || o.AdminStatus == nil {
		var ret int32
		return ret
	}
	return *o.AdminStatus
}

// GetAdminStatusOk returns a tuple with the AdminStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppNodeAddInput) GetAdminStatusOk() (*int32, bool) {
	if o == nil || o.AdminStatus == nil {
		return nil, false
	}
	return o.AdminStatus, true
}

// HasAdminStatus returns a boolean if a field has been set.
func (o *AppNodeAddInput) HasAdminStatus() bool {
	if o != nil && o.AdminStatus != nil {
		return true
	}

	return false
}

// SetAdminStatus gets a reference to the given int32 and assigns it to the AdminStatus field.
func (o *AppNodeAddInput) SetAdminStatus(v int32) {
	o.AdminStatus = &v
}

// GetGslbserverId returns the GslbserverId field value if set, zero value otherwise.
func (o *AppNodeAddInput) GetGslbserverId() int32 {
	if o == nil || o.GslbserverId == nil {
		var ret int32
		return ret
	}
	return *o.GslbserverId
}

// GetGslbserverIdOk returns a tuple with the GslbserverId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppNodeAddInput) GetGslbserverIdOk() (*int32, bool) {
	if o == nil || o.GslbserverId == nil {
		return nil, false
	}
	return o.GslbserverId, true
}

// HasGslbserverId returns a boolean if a field has been set.
func (o *AppNodeAddInput) HasGslbserverId() bool {
	if o != nil && o.GslbserverId != nil {
		return true
	}

	return false
}

// SetGslbserverId gets a reference to the given int32 and assigns it to the GslbserverId field.
func (o *AppNodeAddInput) SetGslbserverId(v int32) {
	o.GslbserverId = &v
}

// GetHealthcheckName returns the HealthcheckName field value if set, zero value otherwise.
func (o *AppNodeAddInput) GetHealthcheckName() string {
	if o == nil || o.HealthcheckName == nil {
		var ret string
		return ret
	}
	return *o.HealthcheckName
}

// GetHealthcheckNameOk returns a tuple with the HealthcheckName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppNodeAddInput) GetHealthcheckNameOk() (*string, bool) {
	if o == nil || o.HealthcheckName == nil {
		return nil, false
	}
	return o.HealthcheckName, true
}

// HasHealthcheckName returns a boolean if a field has been set.
func (o *AppNodeAddInput) HasHealthcheckName() bool {
	if o != nil && o.HealthcheckName != nil {
		return true
	}

	return false
}

// SetHealthcheckName gets a reference to the given string and assigns it to the HealthcheckName field.
func (o *AppNodeAddInput) SetHealthcheckName(v string) {
	o.HealthcheckName = &v
}

// GetNodeStatus returns the NodeStatus field value if set, zero value otherwise.
func (o *AppNodeAddInput) GetNodeStatus() string {
	if o == nil || o.NodeStatus == nil {
		var ret string
		return ret
	}
	return *o.NodeStatus
}

// GetNodeStatusOk returns a tuple with the NodeStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppNodeAddInput) GetNodeStatusOk() (*string, bool) {
	if o == nil || o.NodeStatus == nil {
		return nil, false
	}
	return o.NodeStatus, true
}

// HasNodeStatus returns a boolean if a field has been set.
func (o *AppNodeAddInput) HasNodeStatus() bool {
	if o != nil && o.NodeStatus != nil {
		return true
	}

	return false
}

// SetNodeStatus gets a reference to the given string and assigns it to the NodeStatus field.
func (o *AppNodeAddInput) SetNodeStatus(v string) {
	o.NodeStatus = &v
}

// GetNodeWeight returns the NodeWeight field value if set, zero value otherwise.
func (o *AppNodeAddInput) GetNodeWeight() string {
	if o == nil || o.NodeWeight == nil {
		var ret string
		return ret
	}
	return *o.NodeWeight
}

// GetNodeWeightOk returns a tuple with the NodeWeight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppNodeAddInput) GetNodeWeightOk() (*string, bool) {
	if o == nil || o.NodeWeight == nil {
		return nil, false
	}
	return o.NodeWeight, true
}

// HasNodeWeight returns a boolean if a field has been set.
func (o *AppNodeAddInput) HasNodeWeight() bool {
	if o != nil && o.NodeWeight != nil {
		return true
	}

	return false
}

// SetNodeWeight gets a reference to the given string and assigns it to the NodeWeight field.
func (o *AppNodeAddInput) SetNodeWeight(v string) {
	o.NodeWeight = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *AppNodeAddInput) GetWarnings() string {
	if o == nil || o.Warnings == nil {
		var ret string
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppNodeAddInput) GetWarningsOk() (*string, bool) {
	if o == nil || o.Warnings == nil {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *AppNodeAddInput) HasWarnings() bool {
	if o != nil && o.Warnings != nil {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given string and assigns it to the Warnings field.
func (o *AppNodeAddInput) SetWarnings(v string) {
	o.Warnings = &v
}

func (o AppNodeAddInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApplicationFqdn != nil {
		toSerialize["application_fqdn"] = o.ApplicationFqdn
	}
	if o.ApplicationId != nil {
		toSerialize["application_id"] = o.ApplicationId
	}
	if o.ApplicationName != nil {
		toSerialize["application_name"] = o.ApplicationName
	}
	if o.PoolId != nil {
		toSerialize["pool_id"] = o.PoolId
	}
	if o.PoolName != nil {
		toSerialize["pool_name"] = o.PoolName
	}
	if o.NodeHostaddr != nil {
		toSerialize["node_hostaddr"] = o.NodeHostaddr
	}
	if o.NodeName != nil {
		toSerialize["node_name"] = o.NodeName
	}
	if o.AdminStatus != nil {
		toSerialize["admin_status"] = o.AdminStatus
	}
	if o.GslbserverId != nil {
		toSerialize["gslbserver_id"] = o.GslbserverId
	}
	if o.HealthcheckName != nil {
		toSerialize["healthcheck_name"] = o.HealthcheckName
	}
	if o.NodeStatus != nil {
		toSerialize["node_status"] = o.NodeStatus
	}
	if o.NodeWeight != nil {
		toSerialize["node_weight"] = o.NodeWeight
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	return json.Marshal(toSerialize)
}

type NullableAppNodeAddInput struct {
	value *AppNodeAddInput
	isSet bool
}

func (v NullableAppNodeAddInput) Get() *AppNodeAddInput {
	return v.value
}

func (v *NullableAppNodeAddInput) Set(val *AppNodeAddInput) {
	v.value = val
	v.isSet = true
}

func (v NullableAppNodeAddInput) IsSet() bool {
	return v.isSet
}

func (v *NullableAppNodeAddInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppNodeAddInput(val *AppNodeAddInput) *NullableAppNodeAddInput {
	return &NullableAppNodeAddInput{value: val, isSet: true}
}

func (v NullableAppNodeAddInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppNodeAddInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


