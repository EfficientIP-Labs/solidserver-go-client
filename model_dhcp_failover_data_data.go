/*
 * SOLIDserver API
 *
 * OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2021 EfficientIP</p><p><em>All specifications and information regarding the products in  this document are subject to change without notice and should not be  construed as a commitment by EfficientIP. EfficientIP assumes no  responsibility or liability for any mistakes or inaccuracies that may appear  in this document. All statements and recommendations in this document are  believed to be accurate but are presented without warranty. Users must take  full responsibility for their application of any product.</em></p><p>Generated (Monday 14th of June 2021 12:30:34 PM)</p>
 *
 * API version: 2.0
 * Contact: support-api@efficientip.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// DhcpFailoverDataData struct for DhcpFailoverDataData
type DhcpFailoverDataData struct {
	// The delay of creation status. <b>1</b> indicates that the object is not created yet.
	FailoverDelayedCreateTime *string `json:"failover_delayed_create_time,omitempty"`
	// The delay of deletion status. <b>1</b> indicates that the object is not deleted yet.
	FailoverDelayedDeleteTime *string `json:"failover_delayed_delete_time,omitempty"`
	// The database identifier (ID) of the DHCPv4 server the object belongs to.
	ServerId *string `json:"server_id,omitempty"`
	// The name of the DHCPv4 server the object belongs to.
	ServerName *string `json:"server_name,omitempty"`
	// The status of the DHCPv4 smart architecture.
	ServerState *string `json:"server_state,omitempty"`
	// The type of the DHCPv4 server the object belongs to: <table><caption>dhcp_type possible values</caption><br/><thead><tr><th>Type</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >ipm</td><td >EfficientIP DHCP server or EfficientIP DHCP Package</td></tr><tr><td >msrpc</td><td >Microsoft DHCP server</td></tr><tr><td >dcs</td><td >Nominum DCS server</td></tr><tr><td >vdhcp</td><td >EfficientIP DHCP smart architecture</td></tr></tbody></table></p><br/>
	ServerType *string `json:"server_type,omitempty"`
	// The IP address of the primary DHCPv4 server.
	FailoverAddr *string `json:"failover_addr,omitempty"`
	// The time after which the DHCPv4 failover channel automatically switches to <b>partner-down</b> after being in <b>communication-interrupted</b> state, in hours.
	FailoverAutoPartnerDown *string `json:"failover_auto_partner_down,omitempty"`
	// The database identifier (ID) of the DHCPv4 failover channel, a unique numeric key value automatically incremented when you add a failover channel.
	FailoverId *string `json:"failover_id,omitempty"`
	// The name of the DHCPv4 failover channel.
	FailoverName *string `json:"failover_name,omitempty"`
	// The IP address of the secondary DHCPv4 server.
	FailoverPeerAddr *string `json:"failover_peer_addr,omitempty"`
	// The port number of the secondary DHCPv4 server.
	FailoverPeerPort *string `json:"failover_peer_port,omitempty"`
	// The port number of the primary DHCPv4 server.
	FailoverPort *string `json:"failover_port,omitempty"`
	// Internal use. Not documented.
	FailoverSplit *string `json:"failover_split,omitempty"`
	// The status of the DHCPv4 failover channel, either <b>startup</b>, <b>normal</b>, <b>communications-interrupted</b> or <b>recover-wait</b>.
	FailoverState *string `json:"failover_state,omitempty"`
	// The type of the DHCPv4 failover channel, either <b>primary</b> or <b>secondary</b>.
	FailoverType *string `json:"failover_type,omitempty"`
	// The IP address of the DHCP server on which the failover channel is configured, in hexadecimal format.
	ServerAddr *string `json:"server_addr,omitempty"`
	// The Multi-status information is displayed as follows: <i>&lt;number-of-instances&gt;@&lt;message-number&gt;@&lt;multi-status-severity&gt;@&lt;module&gt;</i>. The different severity levels are:<br><b>Multi-status severity levels</b>    <table border=1>        <thead>        <tr >            <td><b>Message number</b></td>            <td><b>Severity</b></td>            <td><b>Description</b></td>        </tr>        </thead>        <tbody>        <tr  valign=middle>            <td>0 - 16</td>            <td>Emergency</td>            <td>The object configuration prevents the system from running properly. Action is required.</td>        </tr>        <tr  valign=middle>            <td>17 - 33</td>            <td>Critical</td>            <td>The object configuration is in critical conditions. Immediate action is recommended.</td>        </tr>        <tr  valign=middle>            <td>34 - 50</td>            <td>Error</td>            <td>The object configuration failed at some level. Action is recommended.</td>        </tr>        <tr  valign=middle>            <td>51 - 66</td>            <td>Warning</td>            <td>The object configuration triggers error messages if no action is taken. Action to be taken at your discretion.</td>        </tr>        <tr  valign=middle>            <td>67 - 83</td>            <td>Notice</td>            <td>The object configuration is normal but undergoing events that might trigger errors. No immediate action required.</td>        </tr>        <tr  valign=middle>            <td>84 - 100</td>            <td>Informational</td>            <td>The object configuration is normal, operational messages (might inform you about potential incompatibilities with other modules, etc). No action required.</td>        </tr>        </tbody></table>
	FailoverMultistatus *string `json:"failover_multistatus,omitempty"`
	// The database identifier (ID) of the secondary DHCPv4 server.
	PeerServerId *string `json:"peer_server_id,omitempty"`
	// The database identifier (ID) of the DHCPv4 smart architecture managing the DHCPv4 server the object belongs to. <b>0</b> indicates that the server the object belongs to is not managed by a smart architecture or is a smart architecture itself.
	SmartParentId *string `json:"smart_parent_id,omitempty"`
}

// NewDhcpFailoverDataData instantiates a new DhcpFailoverDataData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDhcpFailoverDataData() *DhcpFailoverDataData {
	this := DhcpFailoverDataData{}
	return &this
}

// NewDhcpFailoverDataDataWithDefaults instantiates a new DhcpFailoverDataData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDhcpFailoverDataDataWithDefaults() *DhcpFailoverDataData {
	this := DhcpFailoverDataData{}
	return &this
}

// GetFailoverDelayedCreateTime returns the FailoverDelayedCreateTime field value if set, zero value otherwise.
func (o *DhcpFailoverDataData) GetFailoverDelayedCreateTime() string {
	if o == nil || o.FailoverDelayedCreateTime == nil {
		var ret string
		return ret
	}
	return *o.FailoverDelayedCreateTime
}

// GetFailoverDelayedCreateTimeOk returns a tuple with the FailoverDelayedCreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpFailoverDataData) GetFailoverDelayedCreateTimeOk() (*string, bool) {
	if o == nil || o.FailoverDelayedCreateTime == nil {
		return nil, false
	}
	return o.FailoverDelayedCreateTime, true
}

// HasFailoverDelayedCreateTime returns a boolean if a field has been set.
func (o *DhcpFailoverDataData) HasFailoverDelayedCreateTime() bool {
	if o != nil && o.FailoverDelayedCreateTime != nil {
		return true
	}

	return false
}

// SetFailoverDelayedCreateTime gets a reference to the given string and assigns it to the FailoverDelayedCreateTime field.
func (o *DhcpFailoverDataData) SetFailoverDelayedCreateTime(v string) {
	o.FailoverDelayedCreateTime = &v
}

// GetFailoverDelayedDeleteTime returns the FailoverDelayedDeleteTime field value if set, zero value otherwise.
func (o *DhcpFailoverDataData) GetFailoverDelayedDeleteTime() string {
	if o == nil || o.FailoverDelayedDeleteTime == nil {
		var ret string
		return ret
	}
	return *o.FailoverDelayedDeleteTime
}

// GetFailoverDelayedDeleteTimeOk returns a tuple with the FailoverDelayedDeleteTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpFailoverDataData) GetFailoverDelayedDeleteTimeOk() (*string, bool) {
	if o == nil || o.FailoverDelayedDeleteTime == nil {
		return nil, false
	}
	return o.FailoverDelayedDeleteTime, true
}

// HasFailoverDelayedDeleteTime returns a boolean if a field has been set.
func (o *DhcpFailoverDataData) HasFailoverDelayedDeleteTime() bool {
	if o != nil && o.FailoverDelayedDeleteTime != nil {
		return true
	}

	return false
}

// SetFailoverDelayedDeleteTime gets a reference to the given string and assigns it to the FailoverDelayedDeleteTime field.
func (o *DhcpFailoverDataData) SetFailoverDelayedDeleteTime(v string) {
	o.FailoverDelayedDeleteTime = &v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *DhcpFailoverDataData) GetServerId() string {
	if o == nil || o.ServerId == nil {
		var ret string
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpFailoverDataData) GetServerIdOk() (*string, bool) {
	if o == nil || o.ServerId == nil {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *DhcpFailoverDataData) HasServerId() bool {
	if o != nil && o.ServerId != nil {
		return true
	}

	return false
}

// SetServerId gets a reference to the given string and assigns it to the ServerId field.
func (o *DhcpFailoverDataData) SetServerId(v string) {
	o.ServerId = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *DhcpFailoverDataData) GetServerName() string {
	if o == nil || o.ServerName == nil {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpFailoverDataData) GetServerNameOk() (*string, bool) {
	if o == nil || o.ServerName == nil {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *DhcpFailoverDataData) HasServerName() bool {
	if o != nil && o.ServerName != nil {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *DhcpFailoverDataData) SetServerName(v string) {
	o.ServerName = &v
}

// GetServerState returns the ServerState field value if set, zero value otherwise.
func (o *DhcpFailoverDataData) GetServerState() string {
	if o == nil || o.ServerState == nil {
		var ret string
		return ret
	}
	return *o.ServerState
}

// GetServerStateOk returns a tuple with the ServerState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpFailoverDataData) GetServerStateOk() (*string, bool) {
	if o == nil || o.ServerState == nil {
		return nil, false
	}
	return o.ServerState, true
}

// HasServerState returns a boolean if a field has been set.
func (o *DhcpFailoverDataData) HasServerState() bool {
	if o != nil && o.ServerState != nil {
		return true
	}

	return false
}

// SetServerState gets a reference to the given string and assigns it to the ServerState field.
func (o *DhcpFailoverDataData) SetServerState(v string) {
	o.ServerState = &v
}

// GetServerType returns the ServerType field value if set, zero value otherwise.
func (o *DhcpFailoverDataData) GetServerType() string {
	if o == nil || o.ServerType == nil {
		var ret string
		return ret
	}
	return *o.ServerType
}

// GetServerTypeOk returns a tuple with the ServerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpFailoverDataData) GetServerTypeOk() (*string, bool) {
	if o == nil || o.ServerType == nil {
		return nil, false
	}
	return o.ServerType, true
}

// HasServerType returns a boolean if a field has been set.
func (o *DhcpFailoverDataData) HasServerType() bool {
	if o != nil && o.ServerType != nil {
		return true
	}

	return false
}

// SetServerType gets a reference to the given string and assigns it to the ServerType field.
func (o *DhcpFailoverDataData) SetServerType(v string) {
	o.ServerType = &v
}

// GetFailoverAddr returns the FailoverAddr field value if set, zero value otherwise.
func (o *DhcpFailoverDataData) GetFailoverAddr() string {
	if o == nil || o.FailoverAddr == nil {
		var ret string
		return ret
	}
	return *o.FailoverAddr
}

// GetFailoverAddrOk returns a tuple with the FailoverAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpFailoverDataData) GetFailoverAddrOk() (*string, bool) {
	if o == nil || o.FailoverAddr == nil {
		return nil, false
	}
	return o.FailoverAddr, true
}

// HasFailoverAddr returns a boolean if a field has been set.
func (o *DhcpFailoverDataData) HasFailoverAddr() bool {
	if o != nil && o.FailoverAddr != nil {
		return true
	}

	return false
}

// SetFailoverAddr gets a reference to the given string and assigns it to the FailoverAddr field.
func (o *DhcpFailoverDataData) SetFailoverAddr(v string) {
	o.FailoverAddr = &v
}

// GetFailoverAutoPartnerDown returns the FailoverAutoPartnerDown field value if set, zero value otherwise.
func (o *DhcpFailoverDataData) GetFailoverAutoPartnerDown() string {
	if o == nil || o.FailoverAutoPartnerDown == nil {
		var ret string
		return ret
	}
	return *o.FailoverAutoPartnerDown
}

// GetFailoverAutoPartnerDownOk returns a tuple with the FailoverAutoPartnerDown field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpFailoverDataData) GetFailoverAutoPartnerDownOk() (*string, bool) {
	if o == nil || o.FailoverAutoPartnerDown == nil {
		return nil, false
	}
	return o.FailoverAutoPartnerDown, true
}

// HasFailoverAutoPartnerDown returns a boolean if a field has been set.
func (o *DhcpFailoverDataData) HasFailoverAutoPartnerDown() bool {
	if o != nil && o.FailoverAutoPartnerDown != nil {
		return true
	}

	return false
}

// SetFailoverAutoPartnerDown gets a reference to the given string and assigns it to the FailoverAutoPartnerDown field.
func (o *DhcpFailoverDataData) SetFailoverAutoPartnerDown(v string) {
	o.FailoverAutoPartnerDown = &v
}

// GetFailoverId returns the FailoverId field value if set, zero value otherwise.
func (o *DhcpFailoverDataData) GetFailoverId() string {
	if o == nil || o.FailoverId == nil {
		var ret string
		return ret
	}
	return *o.FailoverId
}

// GetFailoverIdOk returns a tuple with the FailoverId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpFailoverDataData) GetFailoverIdOk() (*string, bool) {
	if o == nil || o.FailoverId == nil {
		return nil, false
	}
	return o.FailoverId, true
}

// HasFailoverId returns a boolean if a field has been set.
func (o *DhcpFailoverDataData) HasFailoverId() bool {
	if o != nil && o.FailoverId != nil {
		return true
	}

	return false
}

// SetFailoverId gets a reference to the given string and assigns it to the FailoverId field.
func (o *DhcpFailoverDataData) SetFailoverId(v string) {
	o.FailoverId = &v
}

// GetFailoverName returns the FailoverName field value if set, zero value otherwise.
func (o *DhcpFailoverDataData) GetFailoverName() string {
	if o == nil || o.FailoverName == nil {
		var ret string
		return ret
	}
	return *o.FailoverName
}

// GetFailoverNameOk returns a tuple with the FailoverName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpFailoverDataData) GetFailoverNameOk() (*string, bool) {
	if o == nil || o.FailoverName == nil {
		return nil, false
	}
	return o.FailoverName, true
}

// HasFailoverName returns a boolean if a field has been set.
func (o *DhcpFailoverDataData) HasFailoverName() bool {
	if o != nil && o.FailoverName != nil {
		return true
	}

	return false
}

// SetFailoverName gets a reference to the given string and assigns it to the FailoverName field.
func (o *DhcpFailoverDataData) SetFailoverName(v string) {
	o.FailoverName = &v
}

// GetFailoverPeerAddr returns the FailoverPeerAddr field value if set, zero value otherwise.
func (o *DhcpFailoverDataData) GetFailoverPeerAddr() string {
	if o == nil || o.FailoverPeerAddr == nil {
		var ret string
		return ret
	}
	return *o.FailoverPeerAddr
}

// GetFailoverPeerAddrOk returns a tuple with the FailoverPeerAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpFailoverDataData) GetFailoverPeerAddrOk() (*string, bool) {
	if o == nil || o.FailoverPeerAddr == nil {
		return nil, false
	}
	return o.FailoverPeerAddr, true
}

// HasFailoverPeerAddr returns a boolean if a field has been set.
func (o *DhcpFailoverDataData) HasFailoverPeerAddr() bool {
	if o != nil && o.FailoverPeerAddr != nil {
		return true
	}

	return false
}

// SetFailoverPeerAddr gets a reference to the given string and assigns it to the FailoverPeerAddr field.
func (o *DhcpFailoverDataData) SetFailoverPeerAddr(v string) {
	o.FailoverPeerAddr = &v
}

// GetFailoverPeerPort returns the FailoverPeerPort field value if set, zero value otherwise.
func (o *DhcpFailoverDataData) GetFailoverPeerPort() string {
	if o == nil || o.FailoverPeerPort == nil {
		var ret string
		return ret
	}
	return *o.FailoverPeerPort
}

// GetFailoverPeerPortOk returns a tuple with the FailoverPeerPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpFailoverDataData) GetFailoverPeerPortOk() (*string, bool) {
	if o == nil || o.FailoverPeerPort == nil {
		return nil, false
	}
	return o.FailoverPeerPort, true
}

// HasFailoverPeerPort returns a boolean if a field has been set.
func (o *DhcpFailoverDataData) HasFailoverPeerPort() bool {
	if o != nil && o.FailoverPeerPort != nil {
		return true
	}

	return false
}

// SetFailoverPeerPort gets a reference to the given string and assigns it to the FailoverPeerPort field.
func (o *DhcpFailoverDataData) SetFailoverPeerPort(v string) {
	o.FailoverPeerPort = &v
}

// GetFailoverPort returns the FailoverPort field value if set, zero value otherwise.
func (o *DhcpFailoverDataData) GetFailoverPort() string {
	if o == nil || o.FailoverPort == nil {
		var ret string
		return ret
	}
	return *o.FailoverPort
}

// GetFailoverPortOk returns a tuple with the FailoverPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpFailoverDataData) GetFailoverPortOk() (*string, bool) {
	if o == nil || o.FailoverPort == nil {
		return nil, false
	}
	return o.FailoverPort, true
}

// HasFailoverPort returns a boolean if a field has been set.
func (o *DhcpFailoverDataData) HasFailoverPort() bool {
	if o != nil && o.FailoverPort != nil {
		return true
	}

	return false
}

// SetFailoverPort gets a reference to the given string and assigns it to the FailoverPort field.
func (o *DhcpFailoverDataData) SetFailoverPort(v string) {
	o.FailoverPort = &v
}

// GetFailoverSplit returns the FailoverSplit field value if set, zero value otherwise.
func (o *DhcpFailoverDataData) GetFailoverSplit() string {
	if o == nil || o.FailoverSplit == nil {
		var ret string
		return ret
	}
	return *o.FailoverSplit
}

// GetFailoverSplitOk returns a tuple with the FailoverSplit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpFailoverDataData) GetFailoverSplitOk() (*string, bool) {
	if o == nil || o.FailoverSplit == nil {
		return nil, false
	}
	return o.FailoverSplit, true
}

// HasFailoverSplit returns a boolean if a field has been set.
func (o *DhcpFailoverDataData) HasFailoverSplit() bool {
	if o != nil && o.FailoverSplit != nil {
		return true
	}

	return false
}

// SetFailoverSplit gets a reference to the given string and assigns it to the FailoverSplit field.
func (o *DhcpFailoverDataData) SetFailoverSplit(v string) {
	o.FailoverSplit = &v
}

// GetFailoverState returns the FailoverState field value if set, zero value otherwise.
func (o *DhcpFailoverDataData) GetFailoverState() string {
	if o == nil || o.FailoverState == nil {
		var ret string
		return ret
	}
	return *o.FailoverState
}

// GetFailoverStateOk returns a tuple with the FailoverState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpFailoverDataData) GetFailoverStateOk() (*string, bool) {
	if o == nil || o.FailoverState == nil {
		return nil, false
	}
	return o.FailoverState, true
}

// HasFailoverState returns a boolean if a field has been set.
func (o *DhcpFailoverDataData) HasFailoverState() bool {
	if o != nil && o.FailoverState != nil {
		return true
	}

	return false
}

// SetFailoverState gets a reference to the given string and assigns it to the FailoverState field.
func (o *DhcpFailoverDataData) SetFailoverState(v string) {
	o.FailoverState = &v
}

// GetFailoverType returns the FailoverType field value if set, zero value otherwise.
func (o *DhcpFailoverDataData) GetFailoverType() string {
	if o == nil || o.FailoverType == nil {
		var ret string
		return ret
	}
	return *o.FailoverType
}

// GetFailoverTypeOk returns a tuple with the FailoverType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpFailoverDataData) GetFailoverTypeOk() (*string, bool) {
	if o == nil || o.FailoverType == nil {
		return nil, false
	}
	return o.FailoverType, true
}

// HasFailoverType returns a boolean if a field has been set.
func (o *DhcpFailoverDataData) HasFailoverType() bool {
	if o != nil && o.FailoverType != nil {
		return true
	}

	return false
}

// SetFailoverType gets a reference to the given string and assigns it to the FailoverType field.
func (o *DhcpFailoverDataData) SetFailoverType(v string) {
	o.FailoverType = &v
}

// GetServerAddr returns the ServerAddr field value if set, zero value otherwise.
func (o *DhcpFailoverDataData) GetServerAddr() string {
	if o == nil || o.ServerAddr == nil {
		var ret string
		return ret
	}
	return *o.ServerAddr
}

// GetServerAddrOk returns a tuple with the ServerAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpFailoverDataData) GetServerAddrOk() (*string, bool) {
	if o == nil || o.ServerAddr == nil {
		return nil, false
	}
	return o.ServerAddr, true
}

// HasServerAddr returns a boolean if a field has been set.
func (o *DhcpFailoverDataData) HasServerAddr() bool {
	if o != nil && o.ServerAddr != nil {
		return true
	}

	return false
}

// SetServerAddr gets a reference to the given string and assigns it to the ServerAddr field.
func (o *DhcpFailoverDataData) SetServerAddr(v string) {
	o.ServerAddr = &v
}

// GetFailoverMultistatus returns the FailoverMultistatus field value if set, zero value otherwise.
func (o *DhcpFailoverDataData) GetFailoverMultistatus() string {
	if o == nil || o.FailoverMultistatus == nil {
		var ret string
		return ret
	}
	return *o.FailoverMultistatus
}

// GetFailoverMultistatusOk returns a tuple with the FailoverMultistatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpFailoverDataData) GetFailoverMultistatusOk() (*string, bool) {
	if o == nil || o.FailoverMultistatus == nil {
		return nil, false
	}
	return o.FailoverMultistatus, true
}

// HasFailoverMultistatus returns a boolean if a field has been set.
func (o *DhcpFailoverDataData) HasFailoverMultistatus() bool {
	if o != nil && o.FailoverMultistatus != nil {
		return true
	}

	return false
}

// SetFailoverMultistatus gets a reference to the given string and assigns it to the FailoverMultistatus field.
func (o *DhcpFailoverDataData) SetFailoverMultistatus(v string) {
	o.FailoverMultistatus = &v
}

// GetPeerServerId returns the PeerServerId field value if set, zero value otherwise.
func (o *DhcpFailoverDataData) GetPeerServerId() string {
	if o == nil || o.PeerServerId == nil {
		var ret string
		return ret
	}
	return *o.PeerServerId
}

// GetPeerServerIdOk returns a tuple with the PeerServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpFailoverDataData) GetPeerServerIdOk() (*string, bool) {
	if o == nil || o.PeerServerId == nil {
		return nil, false
	}
	return o.PeerServerId, true
}

// HasPeerServerId returns a boolean if a field has been set.
func (o *DhcpFailoverDataData) HasPeerServerId() bool {
	if o != nil && o.PeerServerId != nil {
		return true
	}

	return false
}

// SetPeerServerId gets a reference to the given string and assigns it to the PeerServerId field.
func (o *DhcpFailoverDataData) SetPeerServerId(v string) {
	o.PeerServerId = &v
}

// GetSmartParentId returns the SmartParentId field value if set, zero value otherwise.
func (o *DhcpFailoverDataData) GetSmartParentId() string {
	if o == nil || o.SmartParentId == nil {
		var ret string
		return ret
	}
	return *o.SmartParentId
}

// GetSmartParentIdOk returns a tuple with the SmartParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpFailoverDataData) GetSmartParentIdOk() (*string, bool) {
	if o == nil || o.SmartParentId == nil {
		return nil, false
	}
	return o.SmartParentId, true
}

// HasSmartParentId returns a boolean if a field has been set.
func (o *DhcpFailoverDataData) HasSmartParentId() bool {
	if o != nil && o.SmartParentId != nil {
		return true
	}

	return false
}

// SetSmartParentId gets a reference to the given string and assigns it to the SmartParentId field.
func (o *DhcpFailoverDataData) SetSmartParentId(v string) {
	o.SmartParentId = &v
}

func (o DhcpFailoverDataData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FailoverDelayedCreateTime != nil {
		toSerialize["failover_delayed_create_time"] = o.FailoverDelayedCreateTime
	}
	if o.FailoverDelayedDeleteTime != nil {
		toSerialize["failover_delayed_delete_time"] = o.FailoverDelayedDeleteTime
	}
	if o.ServerId != nil {
		toSerialize["server_id"] = o.ServerId
	}
	if o.ServerName != nil {
		toSerialize["server_name"] = o.ServerName
	}
	if o.ServerState != nil {
		toSerialize["server_state"] = o.ServerState
	}
	if o.ServerType != nil {
		toSerialize["server_type"] = o.ServerType
	}
	if o.FailoverAddr != nil {
		toSerialize["failover_addr"] = o.FailoverAddr
	}
	if o.FailoverAutoPartnerDown != nil {
		toSerialize["failover_auto_partner_down"] = o.FailoverAutoPartnerDown
	}
	if o.FailoverId != nil {
		toSerialize["failover_id"] = o.FailoverId
	}
	if o.FailoverName != nil {
		toSerialize["failover_name"] = o.FailoverName
	}
	if o.FailoverPeerAddr != nil {
		toSerialize["failover_peer_addr"] = o.FailoverPeerAddr
	}
	if o.FailoverPeerPort != nil {
		toSerialize["failover_peer_port"] = o.FailoverPeerPort
	}
	if o.FailoverPort != nil {
		toSerialize["failover_port"] = o.FailoverPort
	}
	if o.FailoverSplit != nil {
		toSerialize["failover_split"] = o.FailoverSplit
	}
	if o.FailoverState != nil {
		toSerialize["failover_state"] = o.FailoverState
	}
	if o.FailoverType != nil {
		toSerialize["failover_type"] = o.FailoverType
	}
	if o.ServerAddr != nil {
		toSerialize["server_addr"] = o.ServerAddr
	}
	if o.FailoverMultistatus != nil {
		toSerialize["failover_multistatus"] = o.FailoverMultistatus
	}
	if o.PeerServerId != nil {
		toSerialize["peer_server_id"] = o.PeerServerId
	}
	if o.SmartParentId != nil {
		toSerialize["smart_parent_id"] = o.SmartParentId
	}
	return json.Marshal(toSerialize)
}

type NullableDhcpFailoverDataData struct {
	value *DhcpFailoverDataData
	isSet bool
}

func (v NullableDhcpFailoverDataData) Get() *DhcpFailoverDataData {
	return v.value
}

func (v *NullableDhcpFailoverDataData) Set(val *DhcpFailoverDataData) {
	v.value = val
	v.isSet = true
}

func (v NullableDhcpFailoverDataData) IsSet() bool {
	return v.isSet
}

func (v *NullableDhcpFailoverDataData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDhcpFailoverDataData(val *DhcpFailoverDataData) *NullableDhcpFailoverDataData {
	return &NullableDhcpFailoverDataData{value: val, isSet: true}
}

func (v NullableDhcpFailoverDataData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDhcpFailoverDataData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


