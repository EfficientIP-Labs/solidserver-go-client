/*
 * SOLIDserver API
 *
 * OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2021 EfficientIP</p><p><em>All specifications and information regarding the products in  this document are subject to change without notice and should not be  construed as a commitment by EfficientIP. EfficientIP assumes no  responsibility or liability for any mistakes or inaccuracies that may appear  in this document. All statements and recommendations in this document are  believed to be accurate but are presented without warranty. Users must take  full responsibility for their application of any product.</em></p><p>Generated (Monday 14th of June 2021 12:30:34 PM)</p>
 *
 * API version: 2.0
 * Contact: support-api@efficientip.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// DeviceInterfaceDataData struct for DeviceInterfaceDataData
type DeviceInterfaceDataData struct {
	// The time at which the Device Manager port or interface has been added, in decimal UNIX date format.
	InterfaceAddTime *string `json:"interface_add_time,omitempty"`
	// The database identifier (ID) of the Custom Database entry associated with the Device Manager port or interface.
	DataId *string `json:"data_id,omitempty"`
	// The name of the class applied to the device the object belongs to, it can be preceded by the class directory.
	DeviceClassName *string `json:"device_class_name,omitempty"`
	// #general.output.class_parameters#
	DeviceClassParameters *[]ApiClassParameterOutputEntry `json:"device_class_parameters,omitempty"`
	// The database identifier (ID) of the Device Manager device the object belongs to.
	DeviceId *string `json:"device_id,omitempty"`
	// The name of the Device Manager device.
	DeviceName *string `json:"device_name,omitempty"`
	// The DM device and port or interface to which the object is automatically linked, as follows: <b>&lt;hostdev_name&gt; ( &lt;hostiface_name&gt; )</b>
	InterfaceAutoLink *string `json:"interface_auto_link,omitempty"`
	// The name of the class applied to the port or interface, it can be preceded by the class directory.
	InterfaceClassName *string `json:"interface_class_name,omitempty"`
	// #general.output.class_parameters#
	InterfaceClassParameters *[]ApiClassParameterOutputEntry `json:"interface_class_parameters,omitempty"`
	// The database identifier (ID) of the Device Manager port or interface.
	InterfaceId *string `json:"interface_id,omitempty"`
	// The IP address associated with the Device Manager port or interface.
	InterfaceAddressAddr *string `json:"interface_address_addr,omitempty"`
	// The human readable version of the parameter <b>hostiface_ip_addr</b>.
	InterfaceAddressFormated *string `json:"interface_address_formated,omitempty"`
	// The MAC address associated with the Device Manager port or interface.
	InterfaceMac *string `json:"interface_mac,omitempty"`
	// The DM device and port or interface to which the object is manually linked, as follows: <b>&lt;hostdev_name&gt; ( &lt;hostiface_name&gt; )</b>
	InterfaceManualLink *string `json:"interface_manual_link,omitempty"`
	// The name of the Device Manager port or interface.
	InterfaceName *string `json:"interface_name,omitempty"`
	// The database identifier (ID) of the space associated with the Device Manager port or interface.
	InterfaceSpaceId *string `json:"interface_space_id,omitempty"`
	// The name of the space associated with the Device Manager port or interface.
	InterfaceSpaceName *string `json:"interface_space_name,omitempty"`
	// A way to indicate if the object is either a <b>port</b> or an <b>interface</b>.
	InterfaceType *string `json:"interface_type,omitempty"`
	// The activation status of the NetChange network device associated with the DM port or interface.<ul class=dashed ><li>                                                If set to <b>1</b>, the NetChange network device is enabled and managed.<br/>                                            </li><li>                                                If set to <b>2</b>, the NetChange network device is unmanaged, disabled or both depending on the context.<br/>                                            </li></ul>
	DevEnabled *string `json:"dev_enabled,omitempty"`
	// The database identifier (ID) of the NetChange network device associated with the Device Manager device the object belongs to.
	DevId *string `json:"dev_id,omitempty"`
	// The name of the NetChange network device associated with the Device Manager device the object belongs to.
	DevName *string `json:"dev_name,omitempty"`
	// The activation status of the NetChange port associated with the DM port or interface.<ul class=dashed ><li>                                                If set to <b>1</b>, the NetChange port is enabled and managed.<br/>                                            </li><li>                                                If set to <b>2</b>, the NetChange port is unmanaged, disabled or both depending on the context.<br/>                                            </li></ul>
	PortEnabled *string `json:"port_enabled,omitempty"`
	// The database identifier (ID) of the NetChange port associated with the Device Manager port or interface.
	PortId *string `json:"port_id,omitempty"`
	// The name of the NetChange port associated with the DM port or interface.
	PortName *string `json:"port_name,omitempty"`
	// The last time the Device Manager port or interface data was reconciled, in decimal UNIX date format.
	InterfaceModifyTime *string `json:"interface_modify_time,omitempty"`
	// The number of IP addresses associated with the Device Manager port or interface.
	InterfaceNbIp *string `json:"interface_nb_ip,omitempty"`
	// The database identifier (ID) of the Device Manager port or interface linked with <b>hostiface_id</b>.
	PearIfaceId *string `json:"pear_iface_id,omitempty"`
	// The database identifier (ID) of the NetChange port linked with <b>hostiface_id</b>.
	PearIplIfaceId *string `json:"pear_ipl_iface_id,omitempty"`
	// The object activation status:<ul class=dashed ><li><b>0</b> indicates the object is present in the database but ignored, i.e. it cannot be managed, counted or listed. This status is applied on objects deleted from the GUI.<br/>                                            </li><li><b>1</b> indicates the object is enabled and managed.<br/>                                            </li><li><b>2</b> indicates the object is unmanaged, disabled or both depending on the context.<br/>                                            </li></ul>By default, <b>row_enabled</b> is set to <b>1</b> when an object is created.
	RowState *string `json:"row_state,omitempty"`
	// Internal use. Not documented.
	InterfaceVendorKey *string `json:"interface_vendor_key,omitempty"`
	// The vendor details of the client associated with the Device Manager port or interface.
	InterfaceVendorMac *string `json:"interface_vendor_mac,omitempty"`
}

// NewDeviceInterfaceDataData instantiates a new DeviceInterfaceDataData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceInterfaceDataData() *DeviceInterfaceDataData {
	this := DeviceInterfaceDataData{}
	return &this
}

// NewDeviceInterfaceDataDataWithDefaults instantiates a new DeviceInterfaceDataData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceInterfaceDataDataWithDefaults() *DeviceInterfaceDataData {
	this := DeviceInterfaceDataData{}
	return &this
}

// GetInterfaceAddTime returns the InterfaceAddTime field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetInterfaceAddTime() string {
	if o == nil || o.InterfaceAddTime == nil {
		var ret string
		return ret
	}
	return *o.InterfaceAddTime
}

// GetInterfaceAddTimeOk returns a tuple with the InterfaceAddTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetInterfaceAddTimeOk() (*string, bool) {
	if o == nil || o.InterfaceAddTime == nil {
		return nil, false
	}
	return o.InterfaceAddTime, true
}

// HasInterfaceAddTime returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasInterfaceAddTime() bool {
	if o != nil && o.InterfaceAddTime != nil {
		return true
	}

	return false
}

// SetInterfaceAddTime gets a reference to the given string and assigns it to the InterfaceAddTime field.
func (o *DeviceInterfaceDataData) SetInterfaceAddTime(v string) {
	o.InterfaceAddTime = &v
}

// GetDataId returns the DataId field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetDataId() string {
	if o == nil || o.DataId == nil {
		var ret string
		return ret
	}
	return *o.DataId
}

// GetDataIdOk returns a tuple with the DataId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetDataIdOk() (*string, bool) {
	if o == nil || o.DataId == nil {
		return nil, false
	}
	return o.DataId, true
}

// HasDataId returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasDataId() bool {
	if o != nil && o.DataId != nil {
		return true
	}

	return false
}

// SetDataId gets a reference to the given string and assigns it to the DataId field.
func (o *DeviceInterfaceDataData) SetDataId(v string) {
	o.DataId = &v
}

// GetDeviceClassName returns the DeviceClassName field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetDeviceClassName() string {
	if o == nil || o.DeviceClassName == nil {
		var ret string
		return ret
	}
	return *o.DeviceClassName
}

// GetDeviceClassNameOk returns a tuple with the DeviceClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetDeviceClassNameOk() (*string, bool) {
	if o == nil || o.DeviceClassName == nil {
		return nil, false
	}
	return o.DeviceClassName, true
}

// HasDeviceClassName returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasDeviceClassName() bool {
	if o != nil && o.DeviceClassName != nil {
		return true
	}

	return false
}

// SetDeviceClassName gets a reference to the given string and assigns it to the DeviceClassName field.
func (o *DeviceInterfaceDataData) SetDeviceClassName(v string) {
	o.DeviceClassName = &v
}

// GetDeviceClassParameters returns the DeviceClassParameters field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetDeviceClassParameters() []ApiClassParameterOutputEntry {
	if o == nil || o.DeviceClassParameters == nil {
		var ret []ApiClassParameterOutputEntry
		return ret
	}
	return *o.DeviceClassParameters
}

// GetDeviceClassParametersOk returns a tuple with the DeviceClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetDeviceClassParametersOk() (*[]ApiClassParameterOutputEntry, bool) {
	if o == nil || o.DeviceClassParameters == nil {
		return nil, false
	}
	return o.DeviceClassParameters, true
}

// HasDeviceClassParameters returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasDeviceClassParameters() bool {
	if o != nil && o.DeviceClassParameters != nil {
		return true
	}

	return false
}

// SetDeviceClassParameters gets a reference to the given []ApiClassParameterOutputEntry and assigns it to the DeviceClassParameters field.
func (o *DeviceInterfaceDataData) SetDeviceClassParameters(v []ApiClassParameterOutputEntry) {
	o.DeviceClassParameters = &v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetDeviceId() string {
	if o == nil || o.DeviceId == nil {
		var ret string
		return ret
	}
	return *o.DeviceId
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetDeviceIdOk() (*string, bool) {
	if o == nil || o.DeviceId == nil {
		return nil, false
	}
	return o.DeviceId, true
}

// HasDeviceId returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasDeviceId() bool {
	if o != nil && o.DeviceId != nil {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given string and assigns it to the DeviceId field.
func (o *DeviceInterfaceDataData) SetDeviceId(v string) {
	o.DeviceId = &v
}

// GetDeviceName returns the DeviceName field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetDeviceName() string {
	if o == nil || o.DeviceName == nil {
		var ret string
		return ret
	}
	return *o.DeviceName
}

// GetDeviceNameOk returns a tuple with the DeviceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetDeviceNameOk() (*string, bool) {
	if o == nil || o.DeviceName == nil {
		return nil, false
	}
	return o.DeviceName, true
}

// HasDeviceName returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasDeviceName() bool {
	if o != nil && o.DeviceName != nil {
		return true
	}

	return false
}

// SetDeviceName gets a reference to the given string and assigns it to the DeviceName field.
func (o *DeviceInterfaceDataData) SetDeviceName(v string) {
	o.DeviceName = &v
}

// GetInterfaceAutoLink returns the InterfaceAutoLink field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetInterfaceAutoLink() string {
	if o == nil || o.InterfaceAutoLink == nil {
		var ret string
		return ret
	}
	return *o.InterfaceAutoLink
}

// GetInterfaceAutoLinkOk returns a tuple with the InterfaceAutoLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetInterfaceAutoLinkOk() (*string, bool) {
	if o == nil || o.InterfaceAutoLink == nil {
		return nil, false
	}
	return o.InterfaceAutoLink, true
}

// HasInterfaceAutoLink returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasInterfaceAutoLink() bool {
	if o != nil && o.InterfaceAutoLink != nil {
		return true
	}

	return false
}

// SetInterfaceAutoLink gets a reference to the given string and assigns it to the InterfaceAutoLink field.
func (o *DeviceInterfaceDataData) SetInterfaceAutoLink(v string) {
	o.InterfaceAutoLink = &v
}

// GetInterfaceClassName returns the InterfaceClassName field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetInterfaceClassName() string {
	if o == nil || o.InterfaceClassName == nil {
		var ret string
		return ret
	}
	return *o.InterfaceClassName
}

// GetInterfaceClassNameOk returns a tuple with the InterfaceClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetInterfaceClassNameOk() (*string, bool) {
	if o == nil || o.InterfaceClassName == nil {
		return nil, false
	}
	return o.InterfaceClassName, true
}

// HasInterfaceClassName returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasInterfaceClassName() bool {
	if o != nil && o.InterfaceClassName != nil {
		return true
	}

	return false
}

// SetInterfaceClassName gets a reference to the given string and assigns it to the InterfaceClassName field.
func (o *DeviceInterfaceDataData) SetInterfaceClassName(v string) {
	o.InterfaceClassName = &v
}

// GetInterfaceClassParameters returns the InterfaceClassParameters field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetInterfaceClassParameters() []ApiClassParameterOutputEntry {
	if o == nil || o.InterfaceClassParameters == nil {
		var ret []ApiClassParameterOutputEntry
		return ret
	}
	return *o.InterfaceClassParameters
}

// GetInterfaceClassParametersOk returns a tuple with the InterfaceClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetInterfaceClassParametersOk() (*[]ApiClassParameterOutputEntry, bool) {
	if o == nil || o.InterfaceClassParameters == nil {
		return nil, false
	}
	return o.InterfaceClassParameters, true
}

// HasInterfaceClassParameters returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasInterfaceClassParameters() bool {
	if o != nil && o.InterfaceClassParameters != nil {
		return true
	}

	return false
}

// SetInterfaceClassParameters gets a reference to the given []ApiClassParameterOutputEntry and assigns it to the InterfaceClassParameters field.
func (o *DeviceInterfaceDataData) SetInterfaceClassParameters(v []ApiClassParameterOutputEntry) {
	o.InterfaceClassParameters = &v
}

// GetInterfaceId returns the InterfaceId field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetInterfaceId() string {
	if o == nil || o.InterfaceId == nil {
		var ret string
		return ret
	}
	return *o.InterfaceId
}

// GetInterfaceIdOk returns a tuple with the InterfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetInterfaceIdOk() (*string, bool) {
	if o == nil || o.InterfaceId == nil {
		return nil, false
	}
	return o.InterfaceId, true
}

// HasInterfaceId returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasInterfaceId() bool {
	if o != nil && o.InterfaceId != nil {
		return true
	}

	return false
}

// SetInterfaceId gets a reference to the given string and assigns it to the InterfaceId field.
func (o *DeviceInterfaceDataData) SetInterfaceId(v string) {
	o.InterfaceId = &v
}

// GetInterfaceAddressAddr returns the InterfaceAddressAddr field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetInterfaceAddressAddr() string {
	if o == nil || o.InterfaceAddressAddr == nil {
		var ret string
		return ret
	}
	return *o.InterfaceAddressAddr
}

// GetInterfaceAddressAddrOk returns a tuple with the InterfaceAddressAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetInterfaceAddressAddrOk() (*string, bool) {
	if o == nil || o.InterfaceAddressAddr == nil {
		return nil, false
	}
	return o.InterfaceAddressAddr, true
}

// HasInterfaceAddressAddr returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasInterfaceAddressAddr() bool {
	if o != nil && o.InterfaceAddressAddr != nil {
		return true
	}

	return false
}

// SetInterfaceAddressAddr gets a reference to the given string and assigns it to the InterfaceAddressAddr field.
func (o *DeviceInterfaceDataData) SetInterfaceAddressAddr(v string) {
	o.InterfaceAddressAddr = &v
}

// GetInterfaceAddressFormated returns the InterfaceAddressFormated field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetInterfaceAddressFormated() string {
	if o == nil || o.InterfaceAddressFormated == nil {
		var ret string
		return ret
	}
	return *o.InterfaceAddressFormated
}

// GetInterfaceAddressFormatedOk returns a tuple with the InterfaceAddressFormated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetInterfaceAddressFormatedOk() (*string, bool) {
	if o == nil || o.InterfaceAddressFormated == nil {
		return nil, false
	}
	return o.InterfaceAddressFormated, true
}

// HasInterfaceAddressFormated returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasInterfaceAddressFormated() bool {
	if o != nil && o.InterfaceAddressFormated != nil {
		return true
	}

	return false
}

// SetInterfaceAddressFormated gets a reference to the given string and assigns it to the InterfaceAddressFormated field.
func (o *DeviceInterfaceDataData) SetInterfaceAddressFormated(v string) {
	o.InterfaceAddressFormated = &v
}

// GetInterfaceMac returns the InterfaceMac field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetInterfaceMac() string {
	if o == nil || o.InterfaceMac == nil {
		var ret string
		return ret
	}
	return *o.InterfaceMac
}

// GetInterfaceMacOk returns a tuple with the InterfaceMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetInterfaceMacOk() (*string, bool) {
	if o == nil || o.InterfaceMac == nil {
		return nil, false
	}
	return o.InterfaceMac, true
}

// HasInterfaceMac returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasInterfaceMac() bool {
	if o != nil && o.InterfaceMac != nil {
		return true
	}

	return false
}

// SetInterfaceMac gets a reference to the given string and assigns it to the InterfaceMac field.
func (o *DeviceInterfaceDataData) SetInterfaceMac(v string) {
	o.InterfaceMac = &v
}

// GetInterfaceManualLink returns the InterfaceManualLink field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetInterfaceManualLink() string {
	if o == nil || o.InterfaceManualLink == nil {
		var ret string
		return ret
	}
	return *o.InterfaceManualLink
}

// GetInterfaceManualLinkOk returns a tuple with the InterfaceManualLink field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetInterfaceManualLinkOk() (*string, bool) {
	if o == nil || o.InterfaceManualLink == nil {
		return nil, false
	}
	return o.InterfaceManualLink, true
}

// HasInterfaceManualLink returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasInterfaceManualLink() bool {
	if o != nil && o.InterfaceManualLink != nil {
		return true
	}

	return false
}

// SetInterfaceManualLink gets a reference to the given string and assigns it to the InterfaceManualLink field.
func (o *DeviceInterfaceDataData) SetInterfaceManualLink(v string) {
	o.InterfaceManualLink = &v
}

// GetInterfaceName returns the InterfaceName field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetInterfaceName() string {
	if o == nil || o.InterfaceName == nil {
		var ret string
		return ret
	}
	return *o.InterfaceName
}

// GetInterfaceNameOk returns a tuple with the InterfaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetInterfaceNameOk() (*string, bool) {
	if o == nil || o.InterfaceName == nil {
		return nil, false
	}
	return o.InterfaceName, true
}

// HasInterfaceName returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasInterfaceName() bool {
	if o != nil && o.InterfaceName != nil {
		return true
	}

	return false
}

// SetInterfaceName gets a reference to the given string and assigns it to the InterfaceName field.
func (o *DeviceInterfaceDataData) SetInterfaceName(v string) {
	o.InterfaceName = &v
}

// GetInterfaceSpaceId returns the InterfaceSpaceId field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetInterfaceSpaceId() string {
	if o == nil || o.InterfaceSpaceId == nil {
		var ret string
		return ret
	}
	return *o.InterfaceSpaceId
}

// GetInterfaceSpaceIdOk returns a tuple with the InterfaceSpaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetInterfaceSpaceIdOk() (*string, bool) {
	if o == nil || o.InterfaceSpaceId == nil {
		return nil, false
	}
	return o.InterfaceSpaceId, true
}

// HasInterfaceSpaceId returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasInterfaceSpaceId() bool {
	if o != nil && o.InterfaceSpaceId != nil {
		return true
	}

	return false
}

// SetInterfaceSpaceId gets a reference to the given string and assigns it to the InterfaceSpaceId field.
func (o *DeviceInterfaceDataData) SetInterfaceSpaceId(v string) {
	o.InterfaceSpaceId = &v
}

// GetInterfaceSpaceName returns the InterfaceSpaceName field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetInterfaceSpaceName() string {
	if o == nil || o.InterfaceSpaceName == nil {
		var ret string
		return ret
	}
	return *o.InterfaceSpaceName
}

// GetInterfaceSpaceNameOk returns a tuple with the InterfaceSpaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetInterfaceSpaceNameOk() (*string, bool) {
	if o == nil || o.InterfaceSpaceName == nil {
		return nil, false
	}
	return o.InterfaceSpaceName, true
}

// HasInterfaceSpaceName returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasInterfaceSpaceName() bool {
	if o != nil && o.InterfaceSpaceName != nil {
		return true
	}

	return false
}

// SetInterfaceSpaceName gets a reference to the given string and assigns it to the InterfaceSpaceName field.
func (o *DeviceInterfaceDataData) SetInterfaceSpaceName(v string) {
	o.InterfaceSpaceName = &v
}

// GetInterfaceType returns the InterfaceType field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetInterfaceType() string {
	if o == nil || o.InterfaceType == nil {
		var ret string
		return ret
	}
	return *o.InterfaceType
}

// GetInterfaceTypeOk returns a tuple with the InterfaceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetInterfaceTypeOk() (*string, bool) {
	if o == nil || o.InterfaceType == nil {
		return nil, false
	}
	return o.InterfaceType, true
}

// HasInterfaceType returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasInterfaceType() bool {
	if o != nil && o.InterfaceType != nil {
		return true
	}

	return false
}

// SetInterfaceType gets a reference to the given string and assigns it to the InterfaceType field.
func (o *DeviceInterfaceDataData) SetInterfaceType(v string) {
	o.InterfaceType = &v
}

// GetDevEnabled returns the DevEnabled field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetDevEnabled() string {
	if o == nil || o.DevEnabled == nil {
		var ret string
		return ret
	}
	return *o.DevEnabled
}

// GetDevEnabledOk returns a tuple with the DevEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetDevEnabledOk() (*string, bool) {
	if o == nil || o.DevEnabled == nil {
		return nil, false
	}
	return o.DevEnabled, true
}

// HasDevEnabled returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasDevEnabled() bool {
	if o != nil && o.DevEnabled != nil {
		return true
	}

	return false
}

// SetDevEnabled gets a reference to the given string and assigns it to the DevEnabled field.
func (o *DeviceInterfaceDataData) SetDevEnabled(v string) {
	o.DevEnabled = &v
}

// GetDevId returns the DevId field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetDevId() string {
	if o == nil || o.DevId == nil {
		var ret string
		return ret
	}
	return *o.DevId
}

// GetDevIdOk returns a tuple with the DevId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetDevIdOk() (*string, bool) {
	if o == nil || o.DevId == nil {
		return nil, false
	}
	return o.DevId, true
}

// HasDevId returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasDevId() bool {
	if o != nil && o.DevId != nil {
		return true
	}

	return false
}

// SetDevId gets a reference to the given string and assigns it to the DevId field.
func (o *DeviceInterfaceDataData) SetDevId(v string) {
	o.DevId = &v
}

// GetDevName returns the DevName field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetDevName() string {
	if o == nil || o.DevName == nil {
		var ret string
		return ret
	}
	return *o.DevName
}

// GetDevNameOk returns a tuple with the DevName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetDevNameOk() (*string, bool) {
	if o == nil || o.DevName == nil {
		return nil, false
	}
	return o.DevName, true
}

// HasDevName returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasDevName() bool {
	if o != nil && o.DevName != nil {
		return true
	}

	return false
}

// SetDevName gets a reference to the given string and assigns it to the DevName field.
func (o *DeviceInterfaceDataData) SetDevName(v string) {
	o.DevName = &v
}

// GetPortEnabled returns the PortEnabled field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetPortEnabled() string {
	if o == nil || o.PortEnabled == nil {
		var ret string
		return ret
	}
	return *o.PortEnabled
}

// GetPortEnabledOk returns a tuple with the PortEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetPortEnabledOk() (*string, bool) {
	if o == nil || o.PortEnabled == nil {
		return nil, false
	}
	return o.PortEnabled, true
}

// HasPortEnabled returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasPortEnabled() bool {
	if o != nil && o.PortEnabled != nil {
		return true
	}

	return false
}

// SetPortEnabled gets a reference to the given string and assigns it to the PortEnabled field.
func (o *DeviceInterfaceDataData) SetPortEnabled(v string) {
	o.PortEnabled = &v
}

// GetPortId returns the PortId field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetPortId() string {
	if o == nil || o.PortId == nil {
		var ret string
		return ret
	}
	return *o.PortId
}

// GetPortIdOk returns a tuple with the PortId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetPortIdOk() (*string, bool) {
	if o == nil || o.PortId == nil {
		return nil, false
	}
	return o.PortId, true
}

// HasPortId returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasPortId() bool {
	if o != nil && o.PortId != nil {
		return true
	}

	return false
}

// SetPortId gets a reference to the given string and assigns it to the PortId field.
func (o *DeviceInterfaceDataData) SetPortId(v string) {
	o.PortId = &v
}

// GetPortName returns the PortName field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetPortName() string {
	if o == nil || o.PortName == nil {
		var ret string
		return ret
	}
	return *o.PortName
}

// GetPortNameOk returns a tuple with the PortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetPortNameOk() (*string, bool) {
	if o == nil || o.PortName == nil {
		return nil, false
	}
	return o.PortName, true
}

// HasPortName returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasPortName() bool {
	if o != nil && o.PortName != nil {
		return true
	}

	return false
}

// SetPortName gets a reference to the given string and assigns it to the PortName field.
func (o *DeviceInterfaceDataData) SetPortName(v string) {
	o.PortName = &v
}

// GetInterfaceModifyTime returns the InterfaceModifyTime field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetInterfaceModifyTime() string {
	if o == nil || o.InterfaceModifyTime == nil {
		var ret string
		return ret
	}
	return *o.InterfaceModifyTime
}

// GetInterfaceModifyTimeOk returns a tuple with the InterfaceModifyTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetInterfaceModifyTimeOk() (*string, bool) {
	if o == nil || o.InterfaceModifyTime == nil {
		return nil, false
	}
	return o.InterfaceModifyTime, true
}

// HasInterfaceModifyTime returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasInterfaceModifyTime() bool {
	if o != nil && o.InterfaceModifyTime != nil {
		return true
	}

	return false
}

// SetInterfaceModifyTime gets a reference to the given string and assigns it to the InterfaceModifyTime field.
func (o *DeviceInterfaceDataData) SetInterfaceModifyTime(v string) {
	o.InterfaceModifyTime = &v
}

// GetInterfaceNbIp returns the InterfaceNbIp field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetInterfaceNbIp() string {
	if o == nil || o.InterfaceNbIp == nil {
		var ret string
		return ret
	}
	return *o.InterfaceNbIp
}

// GetInterfaceNbIpOk returns a tuple with the InterfaceNbIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetInterfaceNbIpOk() (*string, bool) {
	if o == nil || o.InterfaceNbIp == nil {
		return nil, false
	}
	return o.InterfaceNbIp, true
}

// HasInterfaceNbIp returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasInterfaceNbIp() bool {
	if o != nil && o.InterfaceNbIp != nil {
		return true
	}

	return false
}

// SetInterfaceNbIp gets a reference to the given string and assigns it to the InterfaceNbIp field.
func (o *DeviceInterfaceDataData) SetInterfaceNbIp(v string) {
	o.InterfaceNbIp = &v
}

// GetPearIfaceId returns the PearIfaceId field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetPearIfaceId() string {
	if o == nil || o.PearIfaceId == nil {
		var ret string
		return ret
	}
	return *o.PearIfaceId
}

// GetPearIfaceIdOk returns a tuple with the PearIfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetPearIfaceIdOk() (*string, bool) {
	if o == nil || o.PearIfaceId == nil {
		return nil, false
	}
	return o.PearIfaceId, true
}

// HasPearIfaceId returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasPearIfaceId() bool {
	if o != nil && o.PearIfaceId != nil {
		return true
	}

	return false
}

// SetPearIfaceId gets a reference to the given string and assigns it to the PearIfaceId field.
func (o *DeviceInterfaceDataData) SetPearIfaceId(v string) {
	o.PearIfaceId = &v
}

// GetPearIplIfaceId returns the PearIplIfaceId field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetPearIplIfaceId() string {
	if o == nil || o.PearIplIfaceId == nil {
		var ret string
		return ret
	}
	return *o.PearIplIfaceId
}

// GetPearIplIfaceIdOk returns a tuple with the PearIplIfaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetPearIplIfaceIdOk() (*string, bool) {
	if o == nil || o.PearIplIfaceId == nil {
		return nil, false
	}
	return o.PearIplIfaceId, true
}

// HasPearIplIfaceId returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasPearIplIfaceId() bool {
	if o != nil && o.PearIplIfaceId != nil {
		return true
	}

	return false
}

// SetPearIplIfaceId gets a reference to the given string and assigns it to the PearIplIfaceId field.
func (o *DeviceInterfaceDataData) SetPearIplIfaceId(v string) {
	o.PearIplIfaceId = &v
}

// GetRowState returns the RowState field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetRowState() string {
	if o == nil || o.RowState == nil {
		var ret string
		return ret
	}
	return *o.RowState
}

// GetRowStateOk returns a tuple with the RowState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetRowStateOk() (*string, bool) {
	if o == nil || o.RowState == nil {
		return nil, false
	}
	return o.RowState, true
}

// HasRowState returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasRowState() bool {
	if o != nil && o.RowState != nil {
		return true
	}

	return false
}

// SetRowState gets a reference to the given string and assigns it to the RowState field.
func (o *DeviceInterfaceDataData) SetRowState(v string) {
	o.RowState = &v
}

// GetInterfaceVendorKey returns the InterfaceVendorKey field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetInterfaceVendorKey() string {
	if o == nil || o.InterfaceVendorKey == nil {
		var ret string
		return ret
	}
	return *o.InterfaceVendorKey
}

// GetInterfaceVendorKeyOk returns a tuple with the InterfaceVendorKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetInterfaceVendorKeyOk() (*string, bool) {
	if o == nil || o.InterfaceVendorKey == nil {
		return nil, false
	}
	return o.InterfaceVendorKey, true
}

// HasInterfaceVendorKey returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasInterfaceVendorKey() bool {
	if o != nil && o.InterfaceVendorKey != nil {
		return true
	}

	return false
}

// SetInterfaceVendorKey gets a reference to the given string and assigns it to the InterfaceVendorKey field.
func (o *DeviceInterfaceDataData) SetInterfaceVendorKey(v string) {
	o.InterfaceVendorKey = &v
}

// GetInterfaceVendorMac returns the InterfaceVendorMac field value if set, zero value otherwise.
func (o *DeviceInterfaceDataData) GetInterfaceVendorMac() string {
	if o == nil || o.InterfaceVendorMac == nil {
		var ret string
		return ret
	}
	return *o.InterfaceVendorMac
}

// GetInterfaceVendorMacOk returns a tuple with the InterfaceVendorMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceInterfaceDataData) GetInterfaceVendorMacOk() (*string, bool) {
	if o == nil || o.InterfaceVendorMac == nil {
		return nil, false
	}
	return o.InterfaceVendorMac, true
}

// HasInterfaceVendorMac returns a boolean if a field has been set.
func (o *DeviceInterfaceDataData) HasInterfaceVendorMac() bool {
	if o != nil && o.InterfaceVendorMac != nil {
		return true
	}

	return false
}

// SetInterfaceVendorMac gets a reference to the given string and assigns it to the InterfaceVendorMac field.
func (o *DeviceInterfaceDataData) SetInterfaceVendorMac(v string) {
	o.InterfaceVendorMac = &v
}

func (o DeviceInterfaceDataData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InterfaceAddTime != nil {
		toSerialize["interface_add_time"] = o.InterfaceAddTime
	}
	if o.DataId != nil {
		toSerialize["data_id"] = o.DataId
	}
	if o.DeviceClassName != nil {
		toSerialize["device_class_name"] = o.DeviceClassName
	}
	if o.DeviceClassParameters != nil {
		toSerialize["device_class_parameters"] = o.DeviceClassParameters
	}
	if o.DeviceId != nil {
		toSerialize["device_id"] = o.DeviceId
	}
	if o.DeviceName != nil {
		toSerialize["device_name"] = o.DeviceName
	}
	if o.InterfaceAutoLink != nil {
		toSerialize["interface_auto_link"] = o.InterfaceAutoLink
	}
	if o.InterfaceClassName != nil {
		toSerialize["interface_class_name"] = o.InterfaceClassName
	}
	if o.InterfaceClassParameters != nil {
		toSerialize["interface_class_parameters"] = o.InterfaceClassParameters
	}
	if o.InterfaceId != nil {
		toSerialize["interface_id"] = o.InterfaceId
	}
	if o.InterfaceAddressAddr != nil {
		toSerialize["interface_address_addr"] = o.InterfaceAddressAddr
	}
	if o.InterfaceAddressFormated != nil {
		toSerialize["interface_address_formated"] = o.InterfaceAddressFormated
	}
	if o.InterfaceMac != nil {
		toSerialize["interface_mac"] = o.InterfaceMac
	}
	if o.InterfaceManualLink != nil {
		toSerialize["interface_manual_link"] = o.InterfaceManualLink
	}
	if o.InterfaceName != nil {
		toSerialize["interface_name"] = o.InterfaceName
	}
	if o.InterfaceSpaceId != nil {
		toSerialize["interface_space_id"] = o.InterfaceSpaceId
	}
	if o.InterfaceSpaceName != nil {
		toSerialize["interface_space_name"] = o.InterfaceSpaceName
	}
	if o.InterfaceType != nil {
		toSerialize["interface_type"] = o.InterfaceType
	}
	if o.DevEnabled != nil {
		toSerialize["dev_enabled"] = o.DevEnabled
	}
	if o.DevId != nil {
		toSerialize["dev_id"] = o.DevId
	}
	if o.DevName != nil {
		toSerialize["dev_name"] = o.DevName
	}
	if o.PortEnabled != nil {
		toSerialize["port_enabled"] = o.PortEnabled
	}
	if o.PortId != nil {
		toSerialize["port_id"] = o.PortId
	}
	if o.PortName != nil {
		toSerialize["port_name"] = o.PortName
	}
	if o.InterfaceModifyTime != nil {
		toSerialize["interface_modify_time"] = o.InterfaceModifyTime
	}
	if o.InterfaceNbIp != nil {
		toSerialize["interface_nb_ip"] = o.InterfaceNbIp
	}
	if o.PearIfaceId != nil {
		toSerialize["pear_iface_id"] = o.PearIfaceId
	}
	if o.PearIplIfaceId != nil {
		toSerialize["pear_ipl_iface_id"] = o.PearIplIfaceId
	}
	if o.RowState != nil {
		toSerialize["row_state"] = o.RowState
	}
	if o.InterfaceVendorKey != nil {
		toSerialize["interface_vendor_key"] = o.InterfaceVendorKey
	}
	if o.InterfaceVendorMac != nil {
		toSerialize["interface_vendor_mac"] = o.InterfaceVendorMac
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceInterfaceDataData struct {
	value *DeviceInterfaceDataData
	isSet bool
}

func (v NullableDeviceInterfaceDataData) Get() *DeviceInterfaceDataData {
	return v.value
}

func (v *NullableDeviceInterfaceDataData) Set(val *DeviceInterfaceDataData) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceInterfaceDataData) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceInterfaceDataData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceInterfaceDataData(val *DeviceInterfaceDataData) *NullableDeviceInterfaceDataData {
	return &NullableDeviceInterfaceDataData{value: val, isSet: true}
}

func (v NullableDeviceInterfaceDataData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceInterfaceDataData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


