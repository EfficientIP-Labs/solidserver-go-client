/*
 * SOLIDserver API
 *
 * OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2021 EfficientIP</p><p><em>All specifications and information regarding the products in  this document are subject to change without notice and should not be  construed as a commitment by EfficientIP. EfficientIP assumes no  responsibility or liability for any mistakes or inaccuracies that may appear  in this document. All statements and recommendations in this document are  believed to be accurate but are presented without warranty. Users must take  full responsibility for their application of any product.</em></p><p>Generated (Monday 14th of June 2021 12:30:34 PM)</p>
 *
 * API version: 2.0
 * Contact: support-api@efficientip.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// DhcpStaticDataData struct for DhcpStaticDataData
type DhcpStaticDataData struct {
	// The delay of creation status. <b>1</b> indicates that the object is not created yet.
	StaticDelayedCreateTime *string `json:"static_delayed_create_time,omitempty"`
	// The delay of deletion status. <b>1</b> indicates that the object is not deleted yet.
	StaticDelayedDeleteTime *string `json:"static_delayed_delete_time,omitempty"`
	// The name of the class applied to the DHCPv4 server the object belongs to, it can be preceded by the class directory.
	ServerClassName *string `json:"server_class_name,omitempty"`
	// #general.output.class_parameters#
	ServerClassParameters *[]ApiClassParameterOutputEntry `json:"server_class_parameters,omitempty"`
	// The database identifier (ID) of the DHCPv4 server the object belongs to.
	ServerId *string `json:"server_id,omitempty"`
	// The name of the DHCPv4 server the object belongs to.
	ServerName *string `json:"server_name,omitempty"`
	// The type of the DHCPv4 server the object belongs to: <table><caption>dhcp_type possible values</caption><br/><thead><tr><th>Type</th><th>Description</th></tr><br/></thead><br/><tbody><tr><td >ipm</td><td >EfficientIP DHCP server or EfficientIP DHCP Package</td></tr><tr><td >msrpc</td><td >Microsoft DHCP server</td></tr><tr><td >dcs</td><td >Nominum DCS server</td></tr><tr><td >vdhcp</td><td >EfficientIP DHCP smart architecture</td></tr></tbody></table></p><br/>
	ServerType *string `json:"server_type,omitempty"`
	// The version details of the DHCPv4 server the object belongs to.
	ServerVersion *string `json:"server_version,omitempty"`
	// The name of the class applied to the DHCPv4 group the static belongs to, it can be preceded by the class directory.
	GroupClassName *string `json:"group_class_name,omitempty"`
	// #general.output.class_parameters#
	GroupClassParameters *[]ApiClassParameterOutputEntry `json:"group_class_parameters,omitempty"`
	// The database identifier (ID) of the DHCPv4 group.
	GroupId *string `json:"group_id,omitempty"`
	// The name of the DHCPv4 group associated with the object.
	GroupName *string `json:"group_name,omitempty"`
	// The IP address associated with the DHCPv4 static.
	StaticAddr *string `json:"static_addr,omitempty"`
	// The name of the class applied to the DHCPv4 static, it can be preceded by the class directory.
	StaticClassName *string `json:"static_class_name,omitempty"`
	// #general.output.class_parameters#
	StaticClassParameters *[]ApiClassParameterOutputEntry `json:"static_class_parameters,omitempty"`
	// The domain name associated with the DHCPv4 static.
	StaticDomain *string `json:"static_domain,omitempty"`
	// The expiration time of the lease associated with the DHCPv4 static, in decimal UNIX date format.
	StaticExpireTime *string `json:"static_expire_time,omitempty"`
	// The database identifier (ID) of the DHCPv4 static.
	StaticId *string `json:"static_id,omitempty"`
	// TODO:dhcp_static_list.output.static_identifier
	StaticIdentifier *string `json:"static_identifier,omitempty"`
	// The IP address associated with the DHCPv4 static, in hexadecimal format.
	StaticAddressAddr *string `json:"static_address_addr,omitempty"`
	// The last time the MAC address associated with the DHCPv4 static was seen on the network, in decimal UNIX date format.
	StaticLastSeen *string `json:"static_last_seen,omitempty"`
	// The MAC address associated with the DHCPv4 static. It is composed of 7 sections, <b>00:11:22:33:44:55:66</b>, where <b>00</b> is the MAC address type. The type <b>01</b> indicates Ethernet.
	StaticMacAddr *string `json:"static_mac_addr,omitempty"`
	// The name of the DHCPv4 static.
	StaticName *string `json:"static_name,omitempty"`
	// The name of the class applied to the DHCPv4 scope the object belongs to, it can be preceded by the class directory.
	ScopeClassName *string `json:"scope_class_name,omitempty"`
	// #general.output.class_parameters#
	ScopeClassParameters *[]ApiClassParameterOutputEntry `json:"scope_class_parameters,omitempty"`
	// The last IP address of the DHCPv4 scope the object belongs to, in hexadecimal format.
	ScopeEndAddressAddr *string `json:"scope_end_address_addr,omitempty"`
	// The database identifier (ID) of the DHCPv4 scope the object belongs to.
	ScopeId *string `json:"scope_id,omitempty"`
	// The name of the DHCPv4 scope the object belongs to.
	ScopeName *string `json:"scope_name,omitempty"`
	// The first IP address of the DHCPv4 scope the object belongs.
	ScopeNetAddr *string `json:"scope_net_addr,omitempty"`
	// The netmask of the DHCPv4 scope the object belongs to. It is expressed in dot-decimal notation and defines the number of addresses the scope contains.
	ScopeNetMask *string `json:"scope_net_mask,omitempty"`
	// The database identifier (ID) of the space associated with the DHCPv4 scope the object belongs to.
	ScopeSpaceId *string `json:"scope_space_id,omitempty"`
	// The number of IP addresses the DHCPv4 scope the object belongs to contains.
	ScopeSize *string `json:"scope_size,omitempty"`
	// The first IP address of the DHCPv4 scope the object belongs to, in hexadecimal format.
	ScopeStartAddressAddr *string `json:"scope_start_address_addr,omitempty"`
	// The database identifier (ID) of the DHCPv4 shared network the object belongs to.
	SharednetworkId *string `json:"sharednetwork_id,omitempty"`
	// The name of the DHCPv4 shared network the object belongs to.
	SharednetworkName *string `json:"sharednetwork_name,omitempty"`
	// The vendor details of the client associated with the DHCPv4 static.
	StaticMacVendor *string `json:"static_mac_vendor,omitempty"`
	// The Multi-status information is displayed as follows: <i>&lt;number-of-instances&gt;@&lt;message-number&gt;@&lt;multi-status-severity&gt;@&lt;module&gt;</i>. The different severity levels are:<br><b>Multi-status severity levels</b>    <table border=1>        <thead>        <tr >            <td><b>Message number</b></td>            <td><b>Severity</b></td>            <td><b>Description</b></td>        </tr>        </thead>        <tbody>        <tr  valign=middle>            <td>0 - 16</td>            <td>Emergency</td>            <td>The object configuration prevents the system from running properly. Action is required.</td>        </tr>        <tr  valign=middle>            <td>17 - 33</td>            <td>Critical</td>            <td>The object configuration is in critical conditions. Immediate action is recommended.</td>        </tr>        <tr  valign=middle>            <td>34 - 50</td>            <td>Error</td>            <td>The object configuration failed at some level. Action is recommended.</td>        </tr>        <tr  valign=middle>            <td>51 - 66</td>            <td>Warning</td>            <td>The object configuration triggers error messages if no action is taken. Action to be taken at your discretion.</td>        </tr>        <tr  valign=middle>            <td>67 - 83</td>            <td>Notice</td>            <td>The object configuration is normal but undergoing events that might trigger errors. No immediate action required.</td>        </tr>        <tr  valign=middle>            <td>84 - 100</td>            <td>Informational</td>            <td>The object configuration is normal, operational messages (might inform you about potential incompatibilities with other modules, etc). No action required.</td>        </tr>        </tbody></table>
	StaticMultistatus *string `json:"static_multistatus,omitempty"`
	// The database identifier (ID) of the DHCPv4 smart architecture managing the DHCPv4 server the object belongs to. <b>0</b> indicates that the server the object belongs to is not managed by a smart architecture or is a smart architecture itself.
	SmartParentId *string `json:"smart_parent_id,omitempty"`
	// The name of the DHCPv4 smart architecture managing the DHCPv4 server the object belongs to. <b>#</b> indicates that the server is not managed by a smart architecture or is a smart architecture itself.
	SmartParentName *string `json:"smart_parent_name,omitempty"`
}

// NewDhcpStaticDataData instantiates a new DhcpStaticDataData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDhcpStaticDataData() *DhcpStaticDataData {
	this := DhcpStaticDataData{}
	return &this
}

// NewDhcpStaticDataDataWithDefaults instantiates a new DhcpStaticDataData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDhcpStaticDataDataWithDefaults() *DhcpStaticDataData {
	this := DhcpStaticDataData{}
	return &this
}

// GetStaticDelayedCreateTime returns the StaticDelayedCreateTime field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetStaticDelayedCreateTime() string {
	if o == nil || o.StaticDelayedCreateTime == nil {
		var ret string
		return ret
	}
	return *o.StaticDelayedCreateTime
}

// GetStaticDelayedCreateTimeOk returns a tuple with the StaticDelayedCreateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetStaticDelayedCreateTimeOk() (*string, bool) {
	if o == nil || o.StaticDelayedCreateTime == nil {
		return nil, false
	}
	return o.StaticDelayedCreateTime, true
}

// HasStaticDelayedCreateTime returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasStaticDelayedCreateTime() bool {
	if o != nil && o.StaticDelayedCreateTime != nil {
		return true
	}

	return false
}

// SetStaticDelayedCreateTime gets a reference to the given string and assigns it to the StaticDelayedCreateTime field.
func (o *DhcpStaticDataData) SetStaticDelayedCreateTime(v string) {
	o.StaticDelayedCreateTime = &v
}

// GetStaticDelayedDeleteTime returns the StaticDelayedDeleteTime field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetStaticDelayedDeleteTime() string {
	if o == nil || o.StaticDelayedDeleteTime == nil {
		var ret string
		return ret
	}
	return *o.StaticDelayedDeleteTime
}

// GetStaticDelayedDeleteTimeOk returns a tuple with the StaticDelayedDeleteTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetStaticDelayedDeleteTimeOk() (*string, bool) {
	if o == nil || o.StaticDelayedDeleteTime == nil {
		return nil, false
	}
	return o.StaticDelayedDeleteTime, true
}

// HasStaticDelayedDeleteTime returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasStaticDelayedDeleteTime() bool {
	if o != nil && o.StaticDelayedDeleteTime != nil {
		return true
	}

	return false
}

// SetStaticDelayedDeleteTime gets a reference to the given string and assigns it to the StaticDelayedDeleteTime field.
func (o *DhcpStaticDataData) SetStaticDelayedDeleteTime(v string) {
	o.StaticDelayedDeleteTime = &v
}

// GetServerClassName returns the ServerClassName field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetServerClassName() string {
	if o == nil || o.ServerClassName == nil {
		var ret string
		return ret
	}
	return *o.ServerClassName
}

// GetServerClassNameOk returns a tuple with the ServerClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetServerClassNameOk() (*string, bool) {
	if o == nil || o.ServerClassName == nil {
		return nil, false
	}
	return o.ServerClassName, true
}

// HasServerClassName returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasServerClassName() bool {
	if o != nil && o.ServerClassName != nil {
		return true
	}

	return false
}

// SetServerClassName gets a reference to the given string and assigns it to the ServerClassName field.
func (o *DhcpStaticDataData) SetServerClassName(v string) {
	o.ServerClassName = &v
}

// GetServerClassParameters returns the ServerClassParameters field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetServerClassParameters() []ApiClassParameterOutputEntry {
	if o == nil || o.ServerClassParameters == nil {
		var ret []ApiClassParameterOutputEntry
		return ret
	}
	return *o.ServerClassParameters
}

// GetServerClassParametersOk returns a tuple with the ServerClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetServerClassParametersOk() (*[]ApiClassParameterOutputEntry, bool) {
	if o == nil || o.ServerClassParameters == nil {
		return nil, false
	}
	return o.ServerClassParameters, true
}

// HasServerClassParameters returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasServerClassParameters() bool {
	if o != nil && o.ServerClassParameters != nil {
		return true
	}

	return false
}

// SetServerClassParameters gets a reference to the given []ApiClassParameterOutputEntry and assigns it to the ServerClassParameters field.
func (o *DhcpStaticDataData) SetServerClassParameters(v []ApiClassParameterOutputEntry) {
	o.ServerClassParameters = &v
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetServerId() string {
	if o == nil || o.ServerId == nil {
		var ret string
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetServerIdOk() (*string, bool) {
	if o == nil || o.ServerId == nil {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasServerId() bool {
	if o != nil && o.ServerId != nil {
		return true
	}

	return false
}

// SetServerId gets a reference to the given string and assigns it to the ServerId field.
func (o *DhcpStaticDataData) SetServerId(v string) {
	o.ServerId = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetServerName() string {
	if o == nil || o.ServerName == nil {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetServerNameOk() (*string, bool) {
	if o == nil || o.ServerName == nil {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasServerName() bool {
	if o != nil && o.ServerName != nil {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *DhcpStaticDataData) SetServerName(v string) {
	o.ServerName = &v
}

// GetServerType returns the ServerType field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetServerType() string {
	if o == nil || o.ServerType == nil {
		var ret string
		return ret
	}
	return *o.ServerType
}

// GetServerTypeOk returns a tuple with the ServerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetServerTypeOk() (*string, bool) {
	if o == nil || o.ServerType == nil {
		return nil, false
	}
	return o.ServerType, true
}

// HasServerType returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasServerType() bool {
	if o != nil && o.ServerType != nil {
		return true
	}

	return false
}

// SetServerType gets a reference to the given string and assigns it to the ServerType field.
func (o *DhcpStaticDataData) SetServerType(v string) {
	o.ServerType = &v
}

// GetServerVersion returns the ServerVersion field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetServerVersion() string {
	if o == nil || o.ServerVersion == nil {
		var ret string
		return ret
	}
	return *o.ServerVersion
}

// GetServerVersionOk returns a tuple with the ServerVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetServerVersionOk() (*string, bool) {
	if o == nil || o.ServerVersion == nil {
		return nil, false
	}
	return o.ServerVersion, true
}

// HasServerVersion returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasServerVersion() bool {
	if o != nil && o.ServerVersion != nil {
		return true
	}

	return false
}

// SetServerVersion gets a reference to the given string and assigns it to the ServerVersion field.
func (o *DhcpStaticDataData) SetServerVersion(v string) {
	o.ServerVersion = &v
}

// GetGroupClassName returns the GroupClassName field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetGroupClassName() string {
	if o == nil || o.GroupClassName == nil {
		var ret string
		return ret
	}
	return *o.GroupClassName
}

// GetGroupClassNameOk returns a tuple with the GroupClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetGroupClassNameOk() (*string, bool) {
	if o == nil || o.GroupClassName == nil {
		return nil, false
	}
	return o.GroupClassName, true
}

// HasGroupClassName returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasGroupClassName() bool {
	if o != nil && o.GroupClassName != nil {
		return true
	}

	return false
}

// SetGroupClassName gets a reference to the given string and assigns it to the GroupClassName field.
func (o *DhcpStaticDataData) SetGroupClassName(v string) {
	o.GroupClassName = &v
}

// GetGroupClassParameters returns the GroupClassParameters field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetGroupClassParameters() []ApiClassParameterOutputEntry {
	if o == nil || o.GroupClassParameters == nil {
		var ret []ApiClassParameterOutputEntry
		return ret
	}
	return *o.GroupClassParameters
}

// GetGroupClassParametersOk returns a tuple with the GroupClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetGroupClassParametersOk() (*[]ApiClassParameterOutputEntry, bool) {
	if o == nil || o.GroupClassParameters == nil {
		return nil, false
	}
	return o.GroupClassParameters, true
}

// HasGroupClassParameters returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasGroupClassParameters() bool {
	if o != nil && o.GroupClassParameters != nil {
		return true
	}

	return false
}

// SetGroupClassParameters gets a reference to the given []ApiClassParameterOutputEntry and assigns it to the GroupClassParameters field.
func (o *DhcpStaticDataData) SetGroupClassParameters(v []ApiClassParameterOutputEntry) {
	o.GroupClassParameters = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetGroupId() string {
	if o == nil || o.GroupId == nil {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetGroupIdOk() (*string, bool) {
	if o == nil || o.GroupId == nil {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasGroupId() bool {
	if o != nil && o.GroupId != nil {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *DhcpStaticDataData) SetGroupId(v string) {
	o.GroupId = &v
}

// GetGroupName returns the GroupName field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetGroupName() string {
	if o == nil || o.GroupName == nil {
		var ret string
		return ret
	}
	return *o.GroupName
}

// GetGroupNameOk returns a tuple with the GroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetGroupNameOk() (*string, bool) {
	if o == nil || o.GroupName == nil {
		return nil, false
	}
	return o.GroupName, true
}

// HasGroupName returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasGroupName() bool {
	if o != nil && o.GroupName != nil {
		return true
	}

	return false
}

// SetGroupName gets a reference to the given string and assigns it to the GroupName field.
func (o *DhcpStaticDataData) SetGroupName(v string) {
	o.GroupName = &v
}

// GetStaticAddr returns the StaticAddr field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetStaticAddr() string {
	if o == nil || o.StaticAddr == nil {
		var ret string
		return ret
	}
	return *o.StaticAddr
}

// GetStaticAddrOk returns a tuple with the StaticAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetStaticAddrOk() (*string, bool) {
	if o == nil || o.StaticAddr == nil {
		return nil, false
	}
	return o.StaticAddr, true
}

// HasStaticAddr returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasStaticAddr() bool {
	if o != nil && o.StaticAddr != nil {
		return true
	}

	return false
}

// SetStaticAddr gets a reference to the given string and assigns it to the StaticAddr field.
func (o *DhcpStaticDataData) SetStaticAddr(v string) {
	o.StaticAddr = &v
}

// GetStaticClassName returns the StaticClassName field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetStaticClassName() string {
	if o == nil || o.StaticClassName == nil {
		var ret string
		return ret
	}
	return *o.StaticClassName
}

// GetStaticClassNameOk returns a tuple with the StaticClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetStaticClassNameOk() (*string, bool) {
	if o == nil || o.StaticClassName == nil {
		return nil, false
	}
	return o.StaticClassName, true
}

// HasStaticClassName returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasStaticClassName() bool {
	if o != nil && o.StaticClassName != nil {
		return true
	}

	return false
}

// SetStaticClassName gets a reference to the given string and assigns it to the StaticClassName field.
func (o *DhcpStaticDataData) SetStaticClassName(v string) {
	o.StaticClassName = &v
}

// GetStaticClassParameters returns the StaticClassParameters field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetStaticClassParameters() []ApiClassParameterOutputEntry {
	if o == nil || o.StaticClassParameters == nil {
		var ret []ApiClassParameterOutputEntry
		return ret
	}
	return *o.StaticClassParameters
}

// GetStaticClassParametersOk returns a tuple with the StaticClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetStaticClassParametersOk() (*[]ApiClassParameterOutputEntry, bool) {
	if o == nil || o.StaticClassParameters == nil {
		return nil, false
	}
	return o.StaticClassParameters, true
}

// HasStaticClassParameters returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasStaticClassParameters() bool {
	if o != nil && o.StaticClassParameters != nil {
		return true
	}

	return false
}

// SetStaticClassParameters gets a reference to the given []ApiClassParameterOutputEntry and assigns it to the StaticClassParameters field.
func (o *DhcpStaticDataData) SetStaticClassParameters(v []ApiClassParameterOutputEntry) {
	o.StaticClassParameters = &v
}

// GetStaticDomain returns the StaticDomain field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetStaticDomain() string {
	if o == nil || o.StaticDomain == nil {
		var ret string
		return ret
	}
	return *o.StaticDomain
}

// GetStaticDomainOk returns a tuple with the StaticDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetStaticDomainOk() (*string, bool) {
	if o == nil || o.StaticDomain == nil {
		return nil, false
	}
	return o.StaticDomain, true
}

// HasStaticDomain returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasStaticDomain() bool {
	if o != nil && o.StaticDomain != nil {
		return true
	}

	return false
}

// SetStaticDomain gets a reference to the given string and assigns it to the StaticDomain field.
func (o *DhcpStaticDataData) SetStaticDomain(v string) {
	o.StaticDomain = &v
}

// GetStaticExpireTime returns the StaticExpireTime field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetStaticExpireTime() string {
	if o == nil || o.StaticExpireTime == nil {
		var ret string
		return ret
	}
	return *o.StaticExpireTime
}

// GetStaticExpireTimeOk returns a tuple with the StaticExpireTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetStaticExpireTimeOk() (*string, bool) {
	if o == nil || o.StaticExpireTime == nil {
		return nil, false
	}
	return o.StaticExpireTime, true
}

// HasStaticExpireTime returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasStaticExpireTime() bool {
	if o != nil && o.StaticExpireTime != nil {
		return true
	}

	return false
}

// SetStaticExpireTime gets a reference to the given string and assigns it to the StaticExpireTime field.
func (o *DhcpStaticDataData) SetStaticExpireTime(v string) {
	o.StaticExpireTime = &v
}

// GetStaticId returns the StaticId field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetStaticId() string {
	if o == nil || o.StaticId == nil {
		var ret string
		return ret
	}
	return *o.StaticId
}

// GetStaticIdOk returns a tuple with the StaticId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetStaticIdOk() (*string, bool) {
	if o == nil || o.StaticId == nil {
		return nil, false
	}
	return o.StaticId, true
}

// HasStaticId returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasStaticId() bool {
	if o != nil && o.StaticId != nil {
		return true
	}

	return false
}

// SetStaticId gets a reference to the given string and assigns it to the StaticId field.
func (o *DhcpStaticDataData) SetStaticId(v string) {
	o.StaticId = &v
}

// GetStaticIdentifier returns the StaticIdentifier field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetStaticIdentifier() string {
	if o == nil || o.StaticIdentifier == nil {
		var ret string
		return ret
	}
	return *o.StaticIdentifier
}

// GetStaticIdentifierOk returns a tuple with the StaticIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetStaticIdentifierOk() (*string, bool) {
	if o == nil || o.StaticIdentifier == nil {
		return nil, false
	}
	return o.StaticIdentifier, true
}

// HasStaticIdentifier returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasStaticIdentifier() bool {
	if o != nil && o.StaticIdentifier != nil {
		return true
	}

	return false
}

// SetStaticIdentifier gets a reference to the given string and assigns it to the StaticIdentifier field.
func (o *DhcpStaticDataData) SetStaticIdentifier(v string) {
	o.StaticIdentifier = &v
}

// GetStaticAddressAddr returns the StaticAddressAddr field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetStaticAddressAddr() string {
	if o == nil || o.StaticAddressAddr == nil {
		var ret string
		return ret
	}
	return *o.StaticAddressAddr
}

// GetStaticAddressAddrOk returns a tuple with the StaticAddressAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetStaticAddressAddrOk() (*string, bool) {
	if o == nil || o.StaticAddressAddr == nil {
		return nil, false
	}
	return o.StaticAddressAddr, true
}

// HasStaticAddressAddr returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasStaticAddressAddr() bool {
	if o != nil && o.StaticAddressAddr != nil {
		return true
	}

	return false
}

// SetStaticAddressAddr gets a reference to the given string and assigns it to the StaticAddressAddr field.
func (o *DhcpStaticDataData) SetStaticAddressAddr(v string) {
	o.StaticAddressAddr = &v
}

// GetStaticLastSeen returns the StaticLastSeen field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetStaticLastSeen() string {
	if o == nil || o.StaticLastSeen == nil {
		var ret string
		return ret
	}
	return *o.StaticLastSeen
}

// GetStaticLastSeenOk returns a tuple with the StaticLastSeen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetStaticLastSeenOk() (*string, bool) {
	if o == nil || o.StaticLastSeen == nil {
		return nil, false
	}
	return o.StaticLastSeen, true
}

// HasStaticLastSeen returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasStaticLastSeen() bool {
	if o != nil && o.StaticLastSeen != nil {
		return true
	}

	return false
}

// SetStaticLastSeen gets a reference to the given string and assigns it to the StaticLastSeen field.
func (o *DhcpStaticDataData) SetStaticLastSeen(v string) {
	o.StaticLastSeen = &v
}

// GetStaticMacAddr returns the StaticMacAddr field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetStaticMacAddr() string {
	if o == nil || o.StaticMacAddr == nil {
		var ret string
		return ret
	}
	return *o.StaticMacAddr
}

// GetStaticMacAddrOk returns a tuple with the StaticMacAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetStaticMacAddrOk() (*string, bool) {
	if o == nil || o.StaticMacAddr == nil {
		return nil, false
	}
	return o.StaticMacAddr, true
}

// HasStaticMacAddr returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasStaticMacAddr() bool {
	if o != nil && o.StaticMacAddr != nil {
		return true
	}

	return false
}

// SetStaticMacAddr gets a reference to the given string and assigns it to the StaticMacAddr field.
func (o *DhcpStaticDataData) SetStaticMacAddr(v string) {
	o.StaticMacAddr = &v
}

// GetStaticName returns the StaticName field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetStaticName() string {
	if o == nil || o.StaticName == nil {
		var ret string
		return ret
	}
	return *o.StaticName
}

// GetStaticNameOk returns a tuple with the StaticName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetStaticNameOk() (*string, bool) {
	if o == nil || o.StaticName == nil {
		return nil, false
	}
	return o.StaticName, true
}

// HasStaticName returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasStaticName() bool {
	if o != nil && o.StaticName != nil {
		return true
	}

	return false
}

// SetStaticName gets a reference to the given string and assigns it to the StaticName field.
func (o *DhcpStaticDataData) SetStaticName(v string) {
	o.StaticName = &v
}

// GetScopeClassName returns the ScopeClassName field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetScopeClassName() string {
	if o == nil || o.ScopeClassName == nil {
		var ret string
		return ret
	}
	return *o.ScopeClassName
}

// GetScopeClassNameOk returns a tuple with the ScopeClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetScopeClassNameOk() (*string, bool) {
	if o == nil || o.ScopeClassName == nil {
		return nil, false
	}
	return o.ScopeClassName, true
}

// HasScopeClassName returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasScopeClassName() bool {
	if o != nil && o.ScopeClassName != nil {
		return true
	}

	return false
}

// SetScopeClassName gets a reference to the given string and assigns it to the ScopeClassName field.
func (o *DhcpStaticDataData) SetScopeClassName(v string) {
	o.ScopeClassName = &v
}

// GetScopeClassParameters returns the ScopeClassParameters field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetScopeClassParameters() []ApiClassParameterOutputEntry {
	if o == nil || o.ScopeClassParameters == nil {
		var ret []ApiClassParameterOutputEntry
		return ret
	}
	return *o.ScopeClassParameters
}

// GetScopeClassParametersOk returns a tuple with the ScopeClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetScopeClassParametersOk() (*[]ApiClassParameterOutputEntry, bool) {
	if o == nil || o.ScopeClassParameters == nil {
		return nil, false
	}
	return o.ScopeClassParameters, true
}

// HasScopeClassParameters returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasScopeClassParameters() bool {
	if o != nil && o.ScopeClassParameters != nil {
		return true
	}

	return false
}

// SetScopeClassParameters gets a reference to the given []ApiClassParameterOutputEntry and assigns it to the ScopeClassParameters field.
func (o *DhcpStaticDataData) SetScopeClassParameters(v []ApiClassParameterOutputEntry) {
	o.ScopeClassParameters = &v
}

// GetScopeEndAddressAddr returns the ScopeEndAddressAddr field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetScopeEndAddressAddr() string {
	if o == nil || o.ScopeEndAddressAddr == nil {
		var ret string
		return ret
	}
	return *o.ScopeEndAddressAddr
}

// GetScopeEndAddressAddrOk returns a tuple with the ScopeEndAddressAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetScopeEndAddressAddrOk() (*string, bool) {
	if o == nil || o.ScopeEndAddressAddr == nil {
		return nil, false
	}
	return o.ScopeEndAddressAddr, true
}

// HasScopeEndAddressAddr returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasScopeEndAddressAddr() bool {
	if o != nil && o.ScopeEndAddressAddr != nil {
		return true
	}

	return false
}

// SetScopeEndAddressAddr gets a reference to the given string and assigns it to the ScopeEndAddressAddr field.
func (o *DhcpStaticDataData) SetScopeEndAddressAddr(v string) {
	o.ScopeEndAddressAddr = &v
}

// GetScopeId returns the ScopeId field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetScopeId() string {
	if o == nil || o.ScopeId == nil {
		var ret string
		return ret
	}
	return *o.ScopeId
}

// GetScopeIdOk returns a tuple with the ScopeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetScopeIdOk() (*string, bool) {
	if o == nil || o.ScopeId == nil {
		return nil, false
	}
	return o.ScopeId, true
}

// HasScopeId returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasScopeId() bool {
	if o != nil && o.ScopeId != nil {
		return true
	}

	return false
}

// SetScopeId gets a reference to the given string and assigns it to the ScopeId field.
func (o *DhcpStaticDataData) SetScopeId(v string) {
	o.ScopeId = &v
}

// GetScopeName returns the ScopeName field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetScopeName() string {
	if o == nil || o.ScopeName == nil {
		var ret string
		return ret
	}
	return *o.ScopeName
}

// GetScopeNameOk returns a tuple with the ScopeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetScopeNameOk() (*string, bool) {
	if o == nil || o.ScopeName == nil {
		return nil, false
	}
	return o.ScopeName, true
}

// HasScopeName returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasScopeName() bool {
	if o != nil && o.ScopeName != nil {
		return true
	}

	return false
}

// SetScopeName gets a reference to the given string and assigns it to the ScopeName field.
func (o *DhcpStaticDataData) SetScopeName(v string) {
	o.ScopeName = &v
}

// GetScopeNetAddr returns the ScopeNetAddr field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetScopeNetAddr() string {
	if o == nil || o.ScopeNetAddr == nil {
		var ret string
		return ret
	}
	return *o.ScopeNetAddr
}

// GetScopeNetAddrOk returns a tuple with the ScopeNetAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetScopeNetAddrOk() (*string, bool) {
	if o == nil || o.ScopeNetAddr == nil {
		return nil, false
	}
	return o.ScopeNetAddr, true
}

// HasScopeNetAddr returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasScopeNetAddr() bool {
	if o != nil && o.ScopeNetAddr != nil {
		return true
	}

	return false
}

// SetScopeNetAddr gets a reference to the given string and assigns it to the ScopeNetAddr field.
func (o *DhcpStaticDataData) SetScopeNetAddr(v string) {
	o.ScopeNetAddr = &v
}

// GetScopeNetMask returns the ScopeNetMask field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetScopeNetMask() string {
	if o == nil || o.ScopeNetMask == nil {
		var ret string
		return ret
	}
	return *o.ScopeNetMask
}

// GetScopeNetMaskOk returns a tuple with the ScopeNetMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetScopeNetMaskOk() (*string, bool) {
	if o == nil || o.ScopeNetMask == nil {
		return nil, false
	}
	return o.ScopeNetMask, true
}

// HasScopeNetMask returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasScopeNetMask() bool {
	if o != nil && o.ScopeNetMask != nil {
		return true
	}

	return false
}

// SetScopeNetMask gets a reference to the given string and assigns it to the ScopeNetMask field.
func (o *DhcpStaticDataData) SetScopeNetMask(v string) {
	o.ScopeNetMask = &v
}

// GetScopeSpaceId returns the ScopeSpaceId field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetScopeSpaceId() string {
	if o == nil || o.ScopeSpaceId == nil {
		var ret string
		return ret
	}
	return *o.ScopeSpaceId
}

// GetScopeSpaceIdOk returns a tuple with the ScopeSpaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetScopeSpaceIdOk() (*string, bool) {
	if o == nil || o.ScopeSpaceId == nil {
		return nil, false
	}
	return o.ScopeSpaceId, true
}

// HasScopeSpaceId returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasScopeSpaceId() bool {
	if o != nil && o.ScopeSpaceId != nil {
		return true
	}

	return false
}

// SetScopeSpaceId gets a reference to the given string and assigns it to the ScopeSpaceId field.
func (o *DhcpStaticDataData) SetScopeSpaceId(v string) {
	o.ScopeSpaceId = &v
}

// GetScopeSize returns the ScopeSize field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetScopeSize() string {
	if o == nil || o.ScopeSize == nil {
		var ret string
		return ret
	}
	return *o.ScopeSize
}

// GetScopeSizeOk returns a tuple with the ScopeSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetScopeSizeOk() (*string, bool) {
	if o == nil || o.ScopeSize == nil {
		return nil, false
	}
	return o.ScopeSize, true
}

// HasScopeSize returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasScopeSize() bool {
	if o != nil && o.ScopeSize != nil {
		return true
	}

	return false
}

// SetScopeSize gets a reference to the given string and assigns it to the ScopeSize field.
func (o *DhcpStaticDataData) SetScopeSize(v string) {
	o.ScopeSize = &v
}

// GetScopeStartAddressAddr returns the ScopeStartAddressAddr field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetScopeStartAddressAddr() string {
	if o == nil || o.ScopeStartAddressAddr == nil {
		var ret string
		return ret
	}
	return *o.ScopeStartAddressAddr
}

// GetScopeStartAddressAddrOk returns a tuple with the ScopeStartAddressAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetScopeStartAddressAddrOk() (*string, bool) {
	if o == nil || o.ScopeStartAddressAddr == nil {
		return nil, false
	}
	return o.ScopeStartAddressAddr, true
}

// HasScopeStartAddressAddr returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasScopeStartAddressAddr() bool {
	if o != nil && o.ScopeStartAddressAddr != nil {
		return true
	}

	return false
}

// SetScopeStartAddressAddr gets a reference to the given string and assigns it to the ScopeStartAddressAddr field.
func (o *DhcpStaticDataData) SetScopeStartAddressAddr(v string) {
	o.ScopeStartAddressAddr = &v
}

// GetSharednetworkId returns the SharednetworkId field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetSharednetworkId() string {
	if o == nil || o.SharednetworkId == nil {
		var ret string
		return ret
	}
	return *o.SharednetworkId
}

// GetSharednetworkIdOk returns a tuple with the SharednetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetSharednetworkIdOk() (*string, bool) {
	if o == nil || o.SharednetworkId == nil {
		return nil, false
	}
	return o.SharednetworkId, true
}

// HasSharednetworkId returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasSharednetworkId() bool {
	if o != nil && o.SharednetworkId != nil {
		return true
	}

	return false
}

// SetSharednetworkId gets a reference to the given string and assigns it to the SharednetworkId field.
func (o *DhcpStaticDataData) SetSharednetworkId(v string) {
	o.SharednetworkId = &v
}

// GetSharednetworkName returns the SharednetworkName field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetSharednetworkName() string {
	if o == nil || o.SharednetworkName == nil {
		var ret string
		return ret
	}
	return *o.SharednetworkName
}

// GetSharednetworkNameOk returns a tuple with the SharednetworkName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetSharednetworkNameOk() (*string, bool) {
	if o == nil || o.SharednetworkName == nil {
		return nil, false
	}
	return o.SharednetworkName, true
}

// HasSharednetworkName returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasSharednetworkName() bool {
	if o != nil && o.SharednetworkName != nil {
		return true
	}

	return false
}

// SetSharednetworkName gets a reference to the given string and assigns it to the SharednetworkName field.
func (o *DhcpStaticDataData) SetSharednetworkName(v string) {
	o.SharednetworkName = &v
}

// GetStaticMacVendor returns the StaticMacVendor field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetStaticMacVendor() string {
	if o == nil || o.StaticMacVendor == nil {
		var ret string
		return ret
	}
	return *o.StaticMacVendor
}

// GetStaticMacVendorOk returns a tuple with the StaticMacVendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetStaticMacVendorOk() (*string, bool) {
	if o == nil || o.StaticMacVendor == nil {
		return nil, false
	}
	return o.StaticMacVendor, true
}

// HasStaticMacVendor returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasStaticMacVendor() bool {
	if o != nil && o.StaticMacVendor != nil {
		return true
	}

	return false
}

// SetStaticMacVendor gets a reference to the given string and assigns it to the StaticMacVendor field.
func (o *DhcpStaticDataData) SetStaticMacVendor(v string) {
	o.StaticMacVendor = &v
}

// GetStaticMultistatus returns the StaticMultistatus field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetStaticMultistatus() string {
	if o == nil || o.StaticMultistatus == nil {
		var ret string
		return ret
	}
	return *o.StaticMultistatus
}

// GetStaticMultistatusOk returns a tuple with the StaticMultistatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetStaticMultistatusOk() (*string, bool) {
	if o == nil || o.StaticMultistatus == nil {
		return nil, false
	}
	return o.StaticMultistatus, true
}

// HasStaticMultistatus returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasStaticMultistatus() bool {
	if o != nil && o.StaticMultistatus != nil {
		return true
	}

	return false
}

// SetStaticMultistatus gets a reference to the given string and assigns it to the StaticMultistatus field.
func (o *DhcpStaticDataData) SetStaticMultistatus(v string) {
	o.StaticMultistatus = &v
}

// GetSmartParentId returns the SmartParentId field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetSmartParentId() string {
	if o == nil || o.SmartParentId == nil {
		var ret string
		return ret
	}
	return *o.SmartParentId
}

// GetSmartParentIdOk returns a tuple with the SmartParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetSmartParentIdOk() (*string, bool) {
	if o == nil || o.SmartParentId == nil {
		return nil, false
	}
	return o.SmartParentId, true
}

// HasSmartParentId returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasSmartParentId() bool {
	if o != nil && o.SmartParentId != nil {
		return true
	}

	return false
}

// SetSmartParentId gets a reference to the given string and assigns it to the SmartParentId field.
func (o *DhcpStaticDataData) SetSmartParentId(v string) {
	o.SmartParentId = &v
}

// GetSmartParentName returns the SmartParentName field value if set, zero value otherwise.
func (o *DhcpStaticDataData) GetSmartParentName() string {
	if o == nil || o.SmartParentName == nil {
		var ret string
		return ret
	}
	return *o.SmartParentName
}

// GetSmartParentNameOk returns a tuple with the SmartParentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpStaticDataData) GetSmartParentNameOk() (*string, bool) {
	if o == nil || o.SmartParentName == nil {
		return nil, false
	}
	return o.SmartParentName, true
}

// HasSmartParentName returns a boolean if a field has been set.
func (o *DhcpStaticDataData) HasSmartParentName() bool {
	if o != nil && o.SmartParentName != nil {
		return true
	}

	return false
}

// SetSmartParentName gets a reference to the given string and assigns it to the SmartParentName field.
func (o *DhcpStaticDataData) SetSmartParentName(v string) {
	o.SmartParentName = &v
}

func (o DhcpStaticDataData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StaticDelayedCreateTime != nil {
		toSerialize["static_delayed_create_time"] = o.StaticDelayedCreateTime
	}
	if o.StaticDelayedDeleteTime != nil {
		toSerialize["static_delayed_delete_time"] = o.StaticDelayedDeleteTime
	}
	if o.ServerClassName != nil {
		toSerialize["server_class_name"] = o.ServerClassName
	}
	if o.ServerClassParameters != nil {
		toSerialize["server_class_parameters"] = o.ServerClassParameters
	}
	if o.ServerId != nil {
		toSerialize["server_id"] = o.ServerId
	}
	if o.ServerName != nil {
		toSerialize["server_name"] = o.ServerName
	}
	if o.ServerType != nil {
		toSerialize["server_type"] = o.ServerType
	}
	if o.ServerVersion != nil {
		toSerialize["server_version"] = o.ServerVersion
	}
	if o.GroupClassName != nil {
		toSerialize["group_class_name"] = o.GroupClassName
	}
	if o.GroupClassParameters != nil {
		toSerialize["group_class_parameters"] = o.GroupClassParameters
	}
	if o.GroupId != nil {
		toSerialize["group_id"] = o.GroupId
	}
	if o.GroupName != nil {
		toSerialize["group_name"] = o.GroupName
	}
	if o.StaticAddr != nil {
		toSerialize["static_addr"] = o.StaticAddr
	}
	if o.StaticClassName != nil {
		toSerialize["static_class_name"] = o.StaticClassName
	}
	if o.StaticClassParameters != nil {
		toSerialize["static_class_parameters"] = o.StaticClassParameters
	}
	if o.StaticDomain != nil {
		toSerialize["static_domain"] = o.StaticDomain
	}
	if o.StaticExpireTime != nil {
		toSerialize["static_expire_time"] = o.StaticExpireTime
	}
	if o.StaticId != nil {
		toSerialize["static_id"] = o.StaticId
	}
	if o.StaticIdentifier != nil {
		toSerialize["static_identifier"] = o.StaticIdentifier
	}
	if o.StaticAddressAddr != nil {
		toSerialize["static_address_addr"] = o.StaticAddressAddr
	}
	if o.StaticLastSeen != nil {
		toSerialize["static_last_seen"] = o.StaticLastSeen
	}
	if o.StaticMacAddr != nil {
		toSerialize["static_mac_addr"] = o.StaticMacAddr
	}
	if o.StaticName != nil {
		toSerialize["static_name"] = o.StaticName
	}
	if o.ScopeClassName != nil {
		toSerialize["scope_class_name"] = o.ScopeClassName
	}
	if o.ScopeClassParameters != nil {
		toSerialize["scope_class_parameters"] = o.ScopeClassParameters
	}
	if o.ScopeEndAddressAddr != nil {
		toSerialize["scope_end_address_addr"] = o.ScopeEndAddressAddr
	}
	if o.ScopeId != nil {
		toSerialize["scope_id"] = o.ScopeId
	}
	if o.ScopeName != nil {
		toSerialize["scope_name"] = o.ScopeName
	}
	if o.ScopeNetAddr != nil {
		toSerialize["scope_net_addr"] = o.ScopeNetAddr
	}
	if o.ScopeNetMask != nil {
		toSerialize["scope_net_mask"] = o.ScopeNetMask
	}
	if o.ScopeSpaceId != nil {
		toSerialize["scope_space_id"] = o.ScopeSpaceId
	}
	if o.ScopeSize != nil {
		toSerialize["scope_size"] = o.ScopeSize
	}
	if o.ScopeStartAddressAddr != nil {
		toSerialize["scope_start_address_addr"] = o.ScopeStartAddressAddr
	}
	if o.SharednetworkId != nil {
		toSerialize["sharednetwork_id"] = o.SharednetworkId
	}
	if o.SharednetworkName != nil {
		toSerialize["sharednetwork_name"] = o.SharednetworkName
	}
	if o.StaticMacVendor != nil {
		toSerialize["static_mac_vendor"] = o.StaticMacVendor
	}
	if o.StaticMultistatus != nil {
		toSerialize["static_multistatus"] = o.StaticMultistatus
	}
	if o.SmartParentId != nil {
		toSerialize["smart_parent_id"] = o.SmartParentId
	}
	if o.SmartParentName != nil {
		toSerialize["smart_parent_name"] = o.SmartParentName
	}
	return json.Marshal(toSerialize)
}

type NullableDhcpStaticDataData struct {
	value *DhcpStaticDataData
	isSet bool
}

func (v NullableDhcpStaticDataData) Get() *DhcpStaticDataData {
	return v.value
}

func (v *NullableDhcpStaticDataData) Set(val *DhcpStaticDataData) {
	v.value = val
	v.isSet = true
}

func (v NullableDhcpStaticDataData) IsSet() bool {
	return v.isSet
}

func (v *NullableDhcpStaticDataData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDhcpStaticDataData(val *DhcpStaticDataData) *NullableDhcpStaticDataData {
	return &NullableDhcpStaticDataData{value: val, isSet: true}
}

func (v NullableDhcpStaticDataData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDhcpStaticDataData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


