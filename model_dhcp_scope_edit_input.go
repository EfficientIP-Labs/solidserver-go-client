/*
 * SOLIDserver API
 *
 * OpenAPI 3.0.2 API definition for SOLIDserver service from EfficientIP.<p>Copyright Â© 2000-2021 EfficientIP</p><p><em>All specifications and information regarding the products in  this document are subject to change without notice and should not be  construed as a commitment by EfficientIP. EfficientIP assumes no  responsibility or liability for any mistakes or inaccuracies that may appear  in this document. All statements and recommendations in this document are  believed to be accurate but are presented without warranty. Users must take  full responsibility for their application of any product.</em></p><p>Generated (Monday 14th of June 2021 12:30:34 PM)</p>
 *
 * API version: 2.0
 * Contact: support-api@efficientip.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package sdsclient

import (
	"encoding/json"
)

// DhcpScopeEditInput struct for DhcpScopeEditInput
type DhcpScopeEditInput struct {
	// The database identifier (ID) of the DHCPv4 server, a unique numeric key value automatically incremented when you add a DHCPv4 server. Use the ID to specify the DHCPv4 server of your choice.
	ServerId *int32 `json:"server_id,omitempty"`
	// The name of the DHCPv4 server.
	ServerName *string `json:"server_name,omitempty"`
	// The database identifier (ID) of the DHCPv4 scope, a unique numeric key value automatically incremented when you add a DHCPv4 scope. Use the ID to specify which DHCPv4 scope to edit.
	ScopeId *int32 `json:"scope_id,omitempty"`
	// The first IP address of the DHCPv4 scope.
	ScopeNetAddr *string `json:"scope_net_addr,omitempty"`
	// The netmask of the DHCPv4 scope. It is expressed in dot-decimal notation and defines the number of addresses the scope contains.
	ScopeNetMask *string `json:"scope_net_mask,omitempty"`
	// The IP address of the DHCP server.
	ServerHostaddr *string `json:"server_hostaddr,omitempty"`
	// The database identifier (ID) of the DHCPv4 failover channel, a unique numeric key value automatically incremented when you add a DHCPv4 failover channel. Use the ID to specify the DHCPv4 failover channel of your choice.
	FailoverId *int32 `json:"failover_id,omitempty"`
	// The name of the DHCPv4 failover channel.
	FailoverName *string `json:"failover_name,omitempty"`
	// The name of the DHCPv4 scope, each DHCPv4 scope must have a unique name.
	ScopeName *string `json:"scope_name,omitempty"`
	// The database identifier (ID) of an existing space you want to associate with the DHCPv4 scope.
	ScopeSpaceId *int32 `json:"scope_space_id,omitempty"`
	// The name of an existing space you want to associate with the DHCPv4 scope.
	ScopeSpaceName *string `json:"scope_space_name,omitempty"`
	// The database identifier (ID) of the DHCPv4 shared network, a unique numeric key value automatically incremented when you add a DHCPv4 shared network. Use the ID to specify the DHCPv4 shared network of your choice.
	SharednetworkId *int32 `json:"sharednetwork_id,omitempty"`
	// The name of the DHCPv4 shared network.
	SharednetworkName *string `json:"sharednetwork_name,omitempty"`
	// class parameters you want to delete from the object
	ClassParametersToDelete *[]string `json:"class_parameters_to_delete,omitempty"`
	// The name of the class to apply to the object you are editing. You must specify the class file directory, e.g. <b>my_directory/my_class.class</b> . You cannot use the classes <b>global</b> and <b>default</b>, they are reserved by the system.
	ScopeClassName *string `json:"scope_class_name,omitempty"`
	// class parameters in json format
	ScopeClassParameters *[]ApiClassParameterInputEntry `json:"scope_class_parameters,omitempty"`
	// A way to bypass <b>(accept) </b>any enabled rule that would return warning messages. If the service returns an error message, you cannot bypass the enabled rules.
	Warnings *string `json:"warnings,omitempty"`
}

// NewDhcpScopeEditInput instantiates a new DhcpScopeEditInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDhcpScopeEditInput() *DhcpScopeEditInput {
	this := DhcpScopeEditInput{}
	return &this
}

// NewDhcpScopeEditInputWithDefaults instantiates a new DhcpScopeEditInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDhcpScopeEditInputWithDefaults() *DhcpScopeEditInput {
	this := DhcpScopeEditInput{}
	return &this
}

// GetServerId returns the ServerId field value if set, zero value otherwise.
func (o *DhcpScopeEditInput) GetServerId() int32 {
	if o == nil || o.ServerId == nil {
		var ret int32
		return ret
	}
	return *o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeEditInput) GetServerIdOk() (*int32, bool) {
	if o == nil || o.ServerId == nil {
		return nil, false
	}
	return o.ServerId, true
}

// HasServerId returns a boolean if a field has been set.
func (o *DhcpScopeEditInput) HasServerId() bool {
	if o != nil && o.ServerId != nil {
		return true
	}

	return false
}

// SetServerId gets a reference to the given int32 and assigns it to the ServerId field.
func (o *DhcpScopeEditInput) SetServerId(v int32) {
	o.ServerId = &v
}

// GetServerName returns the ServerName field value if set, zero value otherwise.
func (o *DhcpScopeEditInput) GetServerName() string {
	if o == nil || o.ServerName == nil {
		var ret string
		return ret
	}
	return *o.ServerName
}

// GetServerNameOk returns a tuple with the ServerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeEditInput) GetServerNameOk() (*string, bool) {
	if o == nil || o.ServerName == nil {
		return nil, false
	}
	return o.ServerName, true
}

// HasServerName returns a boolean if a field has been set.
func (o *DhcpScopeEditInput) HasServerName() bool {
	if o != nil && o.ServerName != nil {
		return true
	}

	return false
}

// SetServerName gets a reference to the given string and assigns it to the ServerName field.
func (o *DhcpScopeEditInput) SetServerName(v string) {
	o.ServerName = &v
}

// GetScopeId returns the ScopeId field value if set, zero value otherwise.
func (o *DhcpScopeEditInput) GetScopeId() int32 {
	if o == nil || o.ScopeId == nil {
		var ret int32
		return ret
	}
	return *o.ScopeId
}

// GetScopeIdOk returns a tuple with the ScopeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeEditInput) GetScopeIdOk() (*int32, bool) {
	if o == nil || o.ScopeId == nil {
		return nil, false
	}
	return o.ScopeId, true
}

// HasScopeId returns a boolean if a field has been set.
func (o *DhcpScopeEditInput) HasScopeId() bool {
	if o != nil && o.ScopeId != nil {
		return true
	}

	return false
}

// SetScopeId gets a reference to the given int32 and assigns it to the ScopeId field.
func (o *DhcpScopeEditInput) SetScopeId(v int32) {
	o.ScopeId = &v
}

// GetScopeNetAddr returns the ScopeNetAddr field value if set, zero value otherwise.
func (o *DhcpScopeEditInput) GetScopeNetAddr() string {
	if o == nil || o.ScopeNetAddr == nil {
		var ret string
		return ret
	}
	return *o.ScopeNetAddr
}

// GetScopeNetAddrOk returns a tuple with the ScopeNetAddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeEditInput) GetScopeNetAddrOk() (*string, bool) {
	if o == nil || o.ScopeNetAddr == nil {
		return nil, false
	}
	return o.ScopeNetAddr, true
}

// HasScopeNetAddr returns a boolean if a field has been set.
func (o *DhcpScopeEditInput) HasScopeNetAddr() bool {
	if o != nil && o.ScopeNetAddr != nil {
		return true
	}

	return false
}

// SetScopeNetAddr gets a reference to the given string and assigns it to the ScopeNetAddr field.
func (o *DhcpScopeEditInput) SetScopeNetAddr(v string) {
	o.ScopeNetAddr = &v
}

// GetScopeNetMask returns the ScopeNetMask field value if set, zero value otherwise.
func (o *DhcpScopeEditInput) GetScopeNetMask() string {
	if o == nil || o.ScopeNetMask == nil {
		var ret string
		return ret
	}
	return *o.ScopeNetMask
}

// GetScopeNetMaskOk returns a tuple with the ScopeNetMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeEditInput) GetScopeNetMaskOk() (*string, bool) {
	if o == nil || o.ScopeNetMask == nil {
		return nil, false
	}
	return o.ScopeNetMask, true
}

// HasScopeNetMask returns a boolean if a field has been set.
func (o *DhcpScopeEditInput) HasScopeNetMask() bool {
	if o != nil && o.ScopeNetMask != nil {
		return true
	}

	return false
}

// SetScopeNetMask gets a reference to the given string and assigns it to the ScopeNetMask field.
func (o *DhcpScopeEditInput) SetScopeNetMask(v string) {
	o.ScopeNetMask = &v
}

// GetServerHostaddr returns the ServerHostaddr field value if set, zero value otherwise.
func (o *DhcpScopeEditInput) GetServerHostaddr() string {
	if o == nil || o.ServerHostaddr == nil {
		var ret string
		return ret
	}
	return *o.ServerHostaddr
}

// GetServerHostaddrOk returns a tuple with the ServerHostaddr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeEditInput) GetServerHostaddrOk() (*string, bool) {
	if o == nil || o.ServerHostaddr == nil {
		return nil, false
	}
	return o.ServerHostaddr, true
}

// HasServerHostaddr returns a boolean if a field has been set.
func (o *DhcpScopeEditInput) HasServerHostaddr() bool {
	if o != nil && o.ServerHostaddr != nil {
		return true
	}

	return false
}

// SetServerHostaddr gets a reference to the given string and assigns it to the ServerHostaddr field.
func (o *DhcpScopeEditInput) SetServerHostaddr(v string) {
	o.ServerHostaddr = &v
}

// GetFailoverId returns the FailoverId field value if set, zero value otherwise.
func (o *DhcpScopeEditInput) GetFailoverId() int32 {
	if o == nil || o.FailoverId == nil {
		var ret int32
		return ret
	}
	return *o.FailoverId
}

// GetFailoverIdOk returns a tuple with the FailoverId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeEditInput) GetFailoverIdOk() (*int32, bool) {
	if o == nil || o.FailoverId == nil {
		return nil, false
	}
	return o.FailoverId, true
}

// HasFailoverId returns a boolean if a field has been set.
func (o *DhcpScopeEditInput) HasFailoverId() bool {
	if o != nil && o.FailoverId != nil {
		return true
	}

	return false
}

// SetFailoverId gets a reference to the given int32 and assigns it to the FailoverId field.
func (o *DhcpScopeEditInput) SetFailoverId(v int32) {
	o.FailoverId = &v
}

// GetFailoverName returns the FailoverName field value if set, zero value otherwise.
func (o *DhcpScopeEditInput) GetFailoverName() string {
	if o == nil || o.FailoverName == nil {
		var ret string
		return ret
	}
	return *o.FailoverName
}

// GetFailoverNameOk returns a tuple with the FailoverName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeEditInput) GetFailoverNameOk() (*string, bool) {
	if o == nil || o.FailoverName == nil {
		return nil, false
	}
	return o.FailoverName, true
}

// HasFailoverName returns a boolean if a field has been set.
func (o *DhcpScopeEditInput) HasFailoverName() bool {
	if o != nil && o.FailoverName != nil {
		return true
	}

	return false
}

// SetFailoverName gets a reference to the given string and assigns it to the FailoverName field.
func (o *DhcpScopeEditInput) SetFailoverName(v string) {
	o.FailoverName = &v
}

// GetScopeName returns the ScopeName field value if set, zero value otherwise.
func (o *DhcpScopeEditInput) GetScopeName() string {
	if o == nil || o.ScopeName == nil {
		var ret string
		return ret
	}
	return *o.ScopeName
}

// GetScopeNameOk returns a tuple with the ScopeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeEditInput) GetScopeNameOk() (*string, bool) {
	if o == nil || o.ScopeName == nil {
		return nil, false
	}
	return o.ScopeName, true
}

// HasScopeName returns a boolean if a field has been set.
func (o *DhcpScopeEditInput) HasScopeName() bool {
	if o != nil && o.ScopeName != nil {
		return true
	}

	return false
}

// SetScopeName gets a reference to the given string and assigns it to the ScopeName field.
func (o *DhcpScopeEditInput) SetScopeName(v string) {
	o.ScopeName = &v
}

// GetScopeSpaceId returns the ScopeSpaceId field value if set, zero value otherwise.
func (o *DhcpScopeEditInput) GetScopeSpaceId() int32 {
	if o == nil || o.ScopeSpaceId == nil {
		var ret int32
		return ret
	}
	return *o.ScopeSpaceId
}

// GetScopeSpaceIdOk returns a tuple with the ScopeSpaceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeEditInput) GetScopeSpaceIdOk() (*int32, bool) {
	if o == nil || o.ScopeSpaceId == nil {
		return nil, false
	}
	return o.ScopeSpaceId, true
}

// HasScopeSpaceId returns a boolean if a field has been set.
func (o *DhcpScopeEditInput) HasScopeSpaceId() bool {
	if o != nil && o.ScopeSpaceId != nil {
		return true
	}

	return false
}

// SetScopeSpaceId gets a reference to the given int32 and assigns it to the ScopeSpaceId field.
func (o *DhcpScopeEditInput) SetScopeSpaceId(v int32) {
	o.ScopeSpaceId = &v
}

// GetScopeSpaceName returns the ScopeSpaceName field value if set, zero value otherwise.
func (o *DhcpScopeEditInput) GetScopeSpaceName() string {
	if o == nil || o.ScopeSpaceName == nil {
		var ret string
		return ret
	}
	return *o.ScopeSpaceName
}

// GetScopeSpaceNameOk returns a tuple with the ScopeSpaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeEditInput) GetScopeSpaceNameOk() (*string, bool) {
	if o == nil || o.ScopeSpaceName == nil {
		return nil, false
	}
	return o.ScopeSpaceName, true
}

// HasScopeSpaceName returns a boolean if a field has been set.
func (o *DhcpScopeEditInput) HasScopeSpaceName() bool {
	if o != nil && o.ScopeSpaceName != nil {
		return true
	}

	return false
}

// SetScopeSpaceName gets a reference to the given string and assigns it to the ScopeSpaceName field.
func (o *DhcpScopeEditInput) SetScopeSpaceName(v string) {
	o.ScopeSpaceName = &v
}

// GetSharednetworkId returns the SharednetworkId field value if set, zero value otherwise.
func (o *DhcpScopeEditInput) GetSharednetworkId() int32 {
	if o == nil || o.SharednetworkId == nil {
		var ret int32
		return ret
	}
	return *o.SharednetworkId
}

// GetSharednetworkIdOk returns a tuple with the SharednetworkId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeEditInput) GetSharednetworkIdOk() (*int32, bool) {
	if o == nil || o.SharednetworkId == nil {
		return nil, false
	}
	return o.SharednetworkId, true
}

// HasSharednetworkId returns a boolean if a field has been set.
func (o *DhcpScopeEditInput) HasSharednetworkId() bool {
	if o != nil && o.SharednetworkId != nil {
		return true
	}

	return false
}

// SetSharednetworkId gets a reference to the given int32 and assigns it to the SharednetworkId field.
func (o *DhcpScopeEditInput) SetSharednetworkId(v int32) {
	o.SharednetworkId = &v
}

// GetSharednetworkName returns the SharednetworkName field value if set, zero value otherwise.
func (o *DhcpScopeEditInput) GetSharednetworkName() string {
	if o == nil || o.SharednetworkName == nil {
		var ret string
		return ret
	}
	return *o.SharednetworkName
}

// GetSharednetworkNameOk returns a tuple with the SharednetworkName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeEditInput) GetSharednetworkNameOk() (*string, bool) {
	if o == nil || o.SharednetworkName == nil {
		return nil, false
	}
	return o.SharednetworkName, true
}

// HasSharednetworkName returns a boolean if a field has been set.
func (o *DhcpScopeEditInput) HasSharednetworkName() bool {
	if o != nil && o.SharednetworkName != nil {
		return true
	}

	return false
}

// SetSharednetworkName gets a reference to the given string and assigns it to the SharednetworkName field.
func (o *DhcpScopeEditInput) SetSharednetworkName(v string) {
	o.SharednetworkName = &v
}

// GetClassParametersToDelete returns the ClassParametersToDelete field value if set, zero value otherwise.
func (o *DhcpScopeEditInput) GetClassParametersToDelete() []string {
	if o == nil || o.ClassParametersToDelete == nil {
		var ret []string
		return ret
	}
	return *o.ClassParametersToDelete
}

// GetClassParametersToDeleteOk returns a tuple with the ClassParametersToDelete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeEditInput) GetClassParametersToDeleteOk() (*[]string, bool) {
	if o == nil || o.ClassParametersToDelete == nil {
		return nil, false
	}
	return o.ClassParametersToDelete, true
}

// HasClassParametersToDelete returns a boolean if a field has been set.
func (o *DhcpScopeEditInput) HasClassParametersToDelete() bool {
	if o != nil && o.ClassParametersToDelete != nil {
		return true
	}

	return false
}

// SetClassParametersToDelete gets a reference to the given []string and assigns it to the ClassParametersToDelete field.
func (o *DhcpScopeEditInput) SetClassParametersToDelete(v []string) {
	o.ClassParametersToDelete = &v
}

// GetScopeClassName returns the ScopeClassName field value if set, zero value otherwise.
func (o *DhcpScopeEditInput) GetScopeClassName() string {
	if o == nil || o.ScopeClassName == nil {
		var ret string
		return ret
	}
	return *o.ScopeClassName
}

// GetScopeClassNameOk returns a tuple with the ScopeClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeEditInput) GetScopeClassNameOk() (*string, bool) {
	if o == nil || o.ScopeClassName == nil {
		return nil, false
	}
	return o.ScopeClassName, true
}

// HasScopeClassName returns a boolean if a field has been set.
func (o *DhcpScopeEditInput) HasScopeClassName() bool {
	if o != nil && o.ScopeClassName != nil {
		return true
	}

	return false
}

// SetScopeClassName gets a reference to the given string and assigns it to the ScopeClassName field.
func (o *DhcpScopeEditInput) SetScopeClassName(v string) {
	o.ScopeClassName = &v
}

// GetScopeClassParameters returns the ScopeClassParameters field value if set, zero value otherwise.
func (o *DhcpScopeEditInput) GetScopeClassParameters() []ApiClassParameterInputEntry {
	if o == nil || o.ScopeClassParameters == nil {
		var ret []ApiClassParameterInputEntry
		return ret
	}
	return *o.ScopeClassParameters
}

// GetScopeClassParametersOk returns a tuple with the ScopeClassParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeEditInput) GetScopeClassParametersOk() (*[]ApiClassParameterInputEntry, bool) {
	if o == nil || o.ScopeClassParameters == nil {
		return nil, false
	}
	return o.ScopeClassParameters, true
}

// HasScopeClassParameters returns a boolean if a field has been set.
func (o *DhcpScopeEditInput) HasScopeClassParameters() bool {
	if o != nil && o.ScopeClassParameters != nil {
		return true
	}

	return false
}

// SetScopeClassParameters gets a reference to the given []ApiClassParameterInputEntry and assigns it to the ScopeClassParameters field.
func (o *DhcpScopeEditInput) SetScopeClassParameters(v []ApiClassParameterInputEntry) {
	o.ScopeClassParameters = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *DhcpScopeEditInput) GetWarnings() string {
	if o == nil || o.Warnings == nil {
		var ret string
		return ret
	}
	return *o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpScopeEditInput) GetWarningsOk() (*string, bool) {
	if o == nil || o.Warnings == nil {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *DhcpScopeEditInput) HasWarnings() bool {
	if o != nil && o.Warnings != nil {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given string and assigns it to the Warnings field.
func (o *DhcpScopeEditInput) SetWarnings(v string) {
	o.Warnings = &v
}

func (o DhcpScopeEditInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ServerId != nil {
		toSerialize["server_id"] = o.ServerId
	}
	if o.ServerName != nil {
		toSerialize["server_name"] = o.ServerName
	}
	if o.ScopeId != nil {
		toSerialize["scope_id"] = o.ScopeId
	}
	if o.ScopeNetAddr != nil {
		toSerialize["scope_net_addr"] = o.ScopeNetAddr
	}
	if o.ScopeNetMask != nil {
		toSerialize["scope_net_mask"] = o.ScopeNetMask
	}
	if o.ServerHostaddr != nil {
		toSerialize["server_hostaddr"] = o.ServerHostaddr
	}
	if o.FailoverId != nil {
		toSerialize["failover_id"] = o.FailoverId
	}
	if o.FailoverName != nil {
		toSerialize["failover_name"] = o.FailoverName
	}
	if o.ScopeName != nil {
		toSerialize["scope_name"] = o.ScopeName
	}
	if o.ScopeSpaceId != nil {
		toSerialize["scope_space_id"] = o.ScopeSpaceId
	}
	if o.ScopeSpaceName != nil {
		toSerialize["scope_space_name"] = o.ScopeSpaceName
	}
	if o.SharednetworkId != nil {
		toSerialize["sharednetwork_id"] = o.SharednetworkId
	}
	if o.SharednetworkName != nil {
		toSerialize["sharednetwork_name"] = o.SharednetworkName
	}
	if o.ClassParametersToDelete != nil {
		toSerialize["class_parameters_to_delete"] = o.ClassParametersToDelete
	}
	if o.ScopeClassName != nil {
		toSerialize["scope_class_name"] = o.ScopeClassName
	}
	if o.ScopeClassParameters != nil {
		toSerialize["scope_class_parameters"] = o.ScopeClassParameters
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	return json.Marshal(toSerialize)
}

type NullableDhcpScopeEditInput struct {
	value *DhcpScopeEditInput
	isSet bool
}

func (v NullableDhcpScopeEditInput) Get() *DhcpScopeEditInput {
	return v.value
}

func (v *NullableDhcpScopeEditInput) Set(val *DhcpScopeEditInput) {
	v.value = val
	v.isSet = true
}

func (v NullableDhcpScopeEditInput) IsSet() bool {
	return v.isSet
}

func (v *NullableDhcpScopeEditInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDhcpScopeEditInput(val *DhcpScopeEditInput) *NullableDhcpScopeEditInput {
	return &NullableDhcpScopeEditInput{value: val, isSet: true}
}

func (v NullableDhcpScopeEditInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDhcpScopeEditInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


